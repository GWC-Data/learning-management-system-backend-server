{"version":3,"file":"classStorage.js","names":["_storageConfig","require","uploadMaterialForClassToGCS","fileBuffer","fileName","mimeType","filePath","classFolder","file","bucket","stream","createWriteStream","metadata","contentType","Promise","resolve","reject","on","err","name","end","error","Error","exports","deleteClassFilesFromGCS","console","log","exists","warn","delete"],"sources":["../../src/config/classStorage.ts"],"sourcesContent":["import { bucket, classFolder } from \"./storageConfig\";\r\n\r\nexport const uploadMaterialForClassToGCS = async (fileBuffer: Buffer, fileName: string, mimeType: string): Promise<string> => {\r\n  try {\r\n    const filePath = `${classFolder}/${fileName}`;\r\n    const file = bucket.file(filePath);\r\n    const stream = file.createWriteStream({ metadata: { contentType: mimeType || \"application/octet-stream\" } });\r\n\r\n    return new Promise<string>((resolve, reject) => {\r\n      stream.on(\"error\", (err) => reject(\"Failed to upload materialForClass to GCS\"));\r\n      stream.on(\"finish\", () => resolve(`https://storage.googleapis.com/${bucket.name}/${filePath}`));\r\n      stream.end(fileBuffer);\r\n    });\r\n  } catch (error) {\r\n    throw new Error(\"Failed to upload materialForClass to GCS\");\r\n  }\r\n};\r\n\r\n\r\nexport const deleteClassFilesFromGCS = async (fileName: string): Promise<void> => {\r\n  try {\r\n    const filePath = `${classFolder}/${fileName}`;\r\n    const file = bucket.file(filePath);\r\n\r\n    console.log(`Attempting to delete file from GCS: ${filePath}`);\r\n\r\n    // Check if file exists before deleting\r\n    const [exists] = await file.exists();\r\n    if (!exists) {\r\n      console.warn(`File not found in GCS: ${filePath}`);\r\n      return; // Don't throw an error if the file is missing\r\n    }\r\n\r\n    // Proceed with deletion\r\n    await file.delete();\r\n    console.log(`File deleted successfully: ${filePath}`);\r\n  } catch (error) {\r\n    console.error(`Error deleting file from GCS`);\r\n    throw new Error(`Failed to delete materialForClass from GCS`);\r\n  }\r\n};\r\n\r\n"],"mappings":";;;;;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AAEO,MAAMC,2BAA2B,GAAG,MAAAA,CAAOC,UAAkB,EAAEC,QAAgB,EAAEC,QAAgB,KAAsB;EAC5H,IAAI;IACF,MAAMC,QAAQ,GAAG,GAAGC,0BAAW,IAAIH,QAAQ,EAAE;IAC7C,MAAMI,IAAI,GAAGC,qBAAM,CAACD,IAAI,CAACF,QAAQ,CAAC;IAClC,MAAMI,MAAM,GAAGF,IAAI,CAACG,iBAAiB,CAAC;MAAEC,QAAQ,EAAE;QAAEC,WAAW,EAAER,QAAQ,IAAI;MAA2B;IAAE,CAAC,CAAC;IAE5G,OAAO,IAAIS,OAAO,CAAS,CAACC,OAAO,EAAEC,MAAM,KAAK;MAC9CN,MAAM,CAACO,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAKF,MAAM,CAAC,0CAA0C,CAAC,CAAC;MAC/EN,MAAM,CAACO,EAAE,CAAC,QAAQ,EAAE,MAAMF,OAAO,CAAC,kCAAkCN,qBAAM,CAACU,IAAI,IAAIb,QAAQ,EAAE,CAAC,CAAC;MAC/FI,MAAM,CAACU,GAAG,CAACjB,UAAU,CAAC;IACxB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EAC7D;AACF,CAAC;AAACC,OAAA,CAAArB,2BAAA,GAAAA,2BAAA;AAGK,MAAMsB,uBAAuB,GAAG,MAAOpB,QAAgB,IAAoB;EAChF,IAAI;IACF,MAAME,QAAQ,GAAG,GAAGC,0BAAW,IAAIH,QAAQ,EAAE;IAC7C,MAAMI,IAAI,GAAGC,qBAAM,CAACD,IAAI,CAACF,QAAQ,CAAC;IAElCmB,OAAO,CAACC,GAAG,CAAC,uCAAuCpB,QAAQ,EAAE,CAAC;;IAE9D;IACA,MAAM,CAACqB,MAAM,CAAC,GAAG,MAAMnB,IAAI,CAACmB,MAAM,CAAC,CAAC;IACpC,IAAI,CAACA,MAAM,EAAE;MACXF,OAAO,CAACG,IAAI,CAAC,0BAA0BtB,QAAQ,EAAE,CAAC;MAClD,OAAO,CAAC;IACV;;IAEA;IACA,MAAME,IAAI,CAACqB,MAAM,CAAC,CAAC;IACnBJ,OAAO,CAACC,GAAG,CAAC,8BAA8BpB,QAAQ,EAAE,CAAC;EACvD,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,8BAA8B,CAAC;IAC7C,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;AACF,CAAC;AAACC,OAAA,CAAAC,uBAAA,GAAAA,uBAAA","ignoreList":[]}