{"version":3,"file":"courses.handler.js","names":["_uuid","require","_bigquery","_courses","_courseStorage","_audit","TABLE_COURSE_CATEGORY","process","env","TABLE_COURSE","checkCourseTableExists","console","log","rows","bigquery","query","length","error","Error","createCourseTableIfNotExists","exists","PROJECT_ID","DATASET_ID","createCourseHandler","courseData","req","file","user","id","uuidv4","courseName","courseDesc","courseCategoryId","courseLink","validCategories","Array","isArray","categoriesString","join","existingCourse","params","warn","success","message","courseId","createdAt","Date","toISOString","uploadedImgUrl","fileName","mimetype","split","uploadCourseImageToGCS","buffer","uploadError","courseQueries","createCourse","courseImg","createdBy","auditLogParams","entityType","entityId","action","previousData","newData","JSON","stringify","performedBy","auditQueries","insertAuditLog","types","auditError","exports","getAllCoursesHandler","getAllCourses","getCourseByIdHandler","getCourse","updateCourseHandler","updatedData","tableExists","courseResults","status","errors","course","newCourseImgUrl","oldFileName","pop","deleteCourseImageFromGCS","queryParams","updatedBy","updatedAt","Object","entries","forEach","key","value","undefined","categories","filter","Boolean","updateFields","keys","map","deleteCourseHandler","deleteCourse"],"sources":["../../../src/endpoints/courses/courses.handler.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { bigquery } from '../../config/bigquery';\r\nimport { courseQueries } from '../../queries/courses/courses.queries';\r\nimport { Courses } from 'db';\r\nimport {\r\n  deleteCourseImageFromGCS,\r\n  uploadCourseImageToGCS\r\n} from '../../config/courseStorage';\r\nimport { auditQueries } from 'queries/audit/audit.queries';\r\n\r\nconst TABLE_COURSE_CATEGORY =\r\n  process.env.TABLE_COURSE_CATEGORY || 'courseCategory';\r\nconst TABLE_COURSE = process.env.TABLE_COURSE || 'course';\r\n\r\n// Function to check if the course category table exists\r\nconst checkCourseTableExists = async (): Promise<boolean> => {\r\n  try {\r\n    console.log('Checking if course table exists...');\r\n    const [rows] = await bigquery.query({\r\n      query: `SELECT table_name FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` WHERE table_name = '${TABLE_COURSE}'`\r\n    });\r\n    console.log(`Table exists: ${rows.length > 0}`);\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error('Error checking table existence:', error);\r\n    throw new Error('Database error while checking table existence.');\r\n  }\r\n};\r\n\r\n// Function to create the course category table if it does not exist\r\nconst createCourseTableIfNotExists = async (): Promise<void> => {\r\n  const exists = await checkCourseTableExists();\r\n  if (!exists) {\r\n    try {\r\n      console.log('Creating course table...');\r\n      await bigquery.query({\r\n        query: `\r\n        CREATE TABLE \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_COURSE}\\` (\r\n          id STRING NOT NULL, \r\n          courseName STRING NOT NULL,\r\n          courseDesc STRING,\r\n          courseCategoryId STRING,\r\n          courseImg STRING,\r\n          courseLink STRING,\r\n          createdBy STRING NOT NULL,\r\n          updatedBy STRING,\r\n          createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n          updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n        )\r\n      `\r\n      });\r\n      console.log('Course table created successfully.');\r\n    } catch (error) {\r\n      console.error('Error creating course table:', error);\r\n      throw new Error('Failed to create course table.');\r\n    }\r\n  }\r\n};\r\n\r\n// **Create course**\r\n// export const createCourseHandler = async (\r\n//   courseData: Courses,\r\n//   req: any,\r\n//   file?: Express.Multer.File\r\n// ) => {\r\n\r\n//   const { user } = req;\r\n//   const id = uuidv4();\r\n//   const { courseName, courseDesc, courseCategoryId, courseLink } =\r\n//     courseData;\r\n\r\n//   try {\r\n//     await createCourseTableIfNotExists();\r\n//     console.log('Checking if course name already exists...');\r\n\r\n//     // **Check if course category already exists**\r\n//     const [existingCourse] = await bigquery.query({\r\n//       query: `SELECT id FROM \\`teqcertify.lms.${process.env.TABLE_COURSE}\\` WHERE courseName = @courseName`,\r\n//       params: { courseName }\r\n//     });\r\n\r\n//     if (existingCourse.length > 0) {\r\n//       console.warn(`Course category \"${courseName}\" already exists.`);\r\n//       return { success: false, message: 'Course Name already exists.' };\r\n//     }\r\n\r\n//     console.log('Creating new course...');\r\n//     const courseId = uuidv4();\r\n//     const createdAt = new Date().toISOString();\r\n//     const updatedAt = createdAt;\r\n//     let uploadedImgUrl = '';\r\n\r\n//     // **Upload image to GCS if provided**\r\n//     if (file) {\r\n//       try {\r\n//         const fileName = `${courseId}.${file.mimetype.split('/')[1]}`;\r\n//         console.log('Uploading course image to GCS...');\r\n//         uploadedImgUrl = await uploadCourseImageToGCS(\r\n//           file.buffer,\r\n//           fileName,\r\n//           file.mimetype\r\n//         );\r\n//       } catch (uploadError) {\r\n//         console.error('Error uploading image to GCS:', uploadError);\r\n//         return { success: false, message: 'Failed to upload image.' };\r\n//       }\r\n//     }\r\n\r\n//     console.log('Inserting course info into BigQuery...');\r\n\r\n//     await bigquery.query({\r\n//       query: courseQueries.createCourse,\r\n//       params: {\r\n//         id: courseId,\r\n//         courseName,\r\n//         courseDesc,\r\n//         courseCategoryId,\r\n//         courseImg: uploadedImgUrl,\r\n//         courseLink,\r\n//         createdBy: user?.id,\r\n//         createdAt\r\n//       }\r\n//     });\r\n\r\n//     console.log(`Course created successfully. ID: ${courseId}`);\r\n\r\n//      //audit log\r\n//      await bigquery.query({\r\n//       query: auditQueries.insertAuditLog,\r\n//       params: {\r\n//         id: uuidv4(),\r\n//         entityType: \"Course\",\r\n//         entityId: courseId,\r\n//         action: \"CREATE\",\r\n//         previousData: null, \r\n//         newData: JSON.stringify({ id, courseName, courseDesc, courseCategoryId, courseLink }),\r\n//         performedBy: user?.id,\r\n//         createdAt: new Date().toISOString(),\r\n//       },\r\n//       types: {\r\n//         previousData: \"STRING\",\r\n//       },\r\n//     });\r\n\r\n\r\n//     return {\r\n//       message: 'Course created successfully.',\r\n//       courseId,\r\n//       courseImg: uploadedImgUrl,\r\n//       courseData: courseData\r\n//     };\r\n//   } catch (error) {\r\n//     console.error('Error creating course:', error);\r\n//     return {\r\n//       success: false,\r\n//       errors: [\r\n//         error instanceof Error ? error.message : 'Unknown error occurred.'\r\n//       ]\r\n//     };\r\n//   }\r\n// };\r\n\r\nexport const createCourseHandler = async (\r\n  courseData: Courses,\r\n  req: any,\r\n  file?: Express.Multer.File\r\n) => {\r\n  const { user } = req;\r\n  const id = uuidv4();\r\n  const { courseName, courseDesc, courseCategoryId=[], courseLink } = courseData;\r\n\r\n  try {\r\n\r\n    const validCategories = Array.isArray(courseCategoryId) \r\n    ? courseCategoryId \r\n    : [courseCategoryId]; // Ensure it's an array\r\n\r\n  // Convert categories to a string representation for BigQuery storage\r\n  const categoriesString = validCategories.join(',');\r\n\r\n    await createCourseTableIfNotExists();\r\n    console.log('Checking if course name already exists...');\r\n\r\n    // Check if course name already exists\r\n    const [existingCourse] = await bigquery.query({\r\n      query: `SELECT id FROM \\`teqcertify.lms.${process.env.TABLE_COURSE}\\` WHERE courseName = @courseName`,\r\n      params: { courseName }\r\n    });\r\n\r\n    if (existingCourse.length > 0) {\r\n      console.warn(`Course \"${courseName}\" already exists.`);\r\n      return { success: false, message: 'Course Name already exists.' };\r\n    }\r\n\r\n    console.log('Creating new course...');\r\n    const courseId = uuidv4();\r\n    const createdAt = new Date().toISOString();\r\n    let uploadedImgUrl = '';\r\n\r\n    // Upload image to GCS if provided\r\n    if (file) {\r\n      try {\r\n        const fileName = `${courseId}.${file.mimetype.split('/')[1]}`;\r\n        console.log('Uploading course image to GCS...');\r\n        uploadedImgUrl = await uploadCourseImageToGCS(\r\n          file.buffer,\r\n          fileName,\r\n          file.mimetype\r\n        );\r\n      } catch (uploadError) {\r\n        console.error('Error uploading image to GCS:', uploadError);\r\n        return { success: false, message: 'Failed to upload image.' };\r\n      }\r\n    }\r\n\r\n    console.log('Inserting course info into BigQuery...');\r\n    await bigquery.query({\r\n      query: courseQueries.createCourse,\r\n      params: {\r\n        id: courseId,\r\n        courseName,\r\n        courseDesc,\r\n        courseCategoryId: categoriesString,\r\n        courseImg: uploadedImgUrl,\r\n        courseLink,\r\n        createdBy: user?.id,\r\n        createdAt\r\n      }\r\n    });\r\n\r\n    console.log(`Course created successfully. ID: ${courseId}`);\r\n\r\n    // Prepare audit log data\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"Course\",\r\n      entityId: courseId,\r\n      action: \"CREATE\",\r\n      previousData: null, // No previous data for a new course\r\n      newData: JSON.stringify({ id: courseId, courseName, courseDesc, courseCategoryId, courseLink }), // Serialize new data\r\n      performedBy: user?.id,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    console.log('Audit Log Params:', auditLogParams); // Debugging: Log audit log params\r\n\r\n    // Insert Audit Log\r\n    try {\r\n      await bigquery.query({\r\n        query: auditQueries.insertAuditLog,\r\n        params: auditLogParams,\r\n        types: { previousData: \"STRING\", newData: \"STRING\" }, // Ensure JSON storage\r\n      });\r\n      console.log('Audit log inserted successfully.');\r\n    } catch (auditError) {\r\n      console.error('Error inserting audit log:', auditError);\r\n      return {\r\n        success: false,\r\n        message: 'Course created, but audit log insertion failed.'\r\n      };\r\n    }\r\n\r\n    // Explicitly set success: true in the success case\r\n    return {\r\n      success: true,\r\n      message: 'Course created successfully.',\r\n      courseId,\r\n      courseImg: uploadedImgUrl,\r\n      courseData: courseData\r\n    };\r\n  } catch (error) {\r\n    console.error('Error creating course:', error);\r\n    return {\r\n      success: false,\r\n      message: error instanceof Error ? error.message : 'Unknown error occurred.'\r\n    };\r\n  }\r\n};\r\n\r\n// **Get All Course**\r\nexport const getAllCoursesHandler = async () => {\r\n  await checkCourseTableExists();\r\n  try {\r\n    console.log('Fetching all course...');\r\n    const [rows] = await bigquery.query({\r\n      query: courseQueries.getAllCourses\r\n    });\r\n    console.log(`Total course found: ${rows.length}`);\r\n    return rows;\r\n  } catch (error) {\r\n    console.error('Error fetching all course:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// **Get Course By ID**\r\nexport const getCourseByIdHandler = async (courseId: string) => {\r\n  await checkCourseTableExists();\r\n  try {\r\n    console.log(`Fetching course with ID: ${courseId}`);\r\n    const [rows] = await bigquery.query({\r\n      query: courseQueries.getCourse,\r\n      params: { courseId }, // Ensure the param matches the query placeholder\r\n    });\r\n    if (!rows.length) {\r\n      console.log(`No course found with ID: ${courseId}`);\r\n      return null;\r\n    }\r\n    console.log(`Course found:`, rows[0]);\r\n    return rows[0];\r\n  } catch (error) {\r\n    console.error(`Error fetching course with ID ${courseId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//UPDATE course\r\nexport const updateCourseHandler = async (\r\n  id: string,\r\n  req: any,\r\n  updatedData: Courses,\r\n  file?: Express.Multer.File\r\n) => {\r\n\r\n  const { user } = req;\r\n  try {\r\n\r\n    console.log(`Updating company info for ID: ${id}`);\r\n\r\n    // Check if the table exists\r\n    const tableExists = await checkCourseTableExists();\r\n    if (!tableExists) {\r\n      return {\r\n        success: false,\r\n        message: `Table '${TABLE_COURSE}' does not exist.`\r\n      };\r\n    }\r\n\r\n    // Fetch existing company data\r\n    const [courseResults] = await bigquery.query({\r\n      query: `SELECT * FROM \\`teqcertify.lms.${TABLE_COURSE}\\` WHERE id = @id`,\r\n      params: { id }\r\n    });\r\n\r\n    if (!Array.isArray(courseResults) || courseResults.length === 0) {\r\n      console.error(`course with ID ${id} is not registered.`);\r\n      return {\r\n        status: 400,\r\n        success: false,\r\n        errors: [`course with ID ${id} is not registered.`]\r\n      };\r\n    }\r\n\r\n    const course = courseResults[0];\r\n    let newCourseImgUrl = course.courseImg;\r\n\r\n    // Handle Company Logo Update\r\n    if (file) {\r\n      try {\r\n        // Delete old image if exists\r\n        const oldFileName = course.courseImg?.split('/').pop();\r\n        if (oldFileName) {\r\n          await deleteCourseImageFromGCS(oldFileName);\r\n        }\r\n\r\n        // Upload new image\r\n        const fileName = `${id}.${file.mimetype.split('/')[1]}`;\r\n        newCourseImgUrl = await uploadCourseImageToGCS(\r\n          file.buffer,\r\n          fileName,\r\n          file.mimetype\r\n        );\r\n      } catch (uploadError) {\r\n        console.error('Error uploading company image:', uploadError);\r\n        return { success: false, message: 'Failed to upload company image.' };\r\n      }\r\n    }\r\n\r\n    // Prepare update values\r\n    const queryParams: Record<string, any> = {\r\n      id,\r\n      updatedBy: user?.id,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n   // Handle image update\r\n    if (newCourseImgUrl !== course.courseImg) {\r\n      queryParams.courseImg = newCourseImgUrl;\r\n    }\r\n\r\n    // Process updated data with special handling for categories\r\n    Object.entries(updatedData).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        if (key === 'courseCategoryId') {\r\n          // Ensure categories are processed as an array and converted to comma-separated string\r\n          const categories = Array.isArray(value) \r\n            ? value \r\n            : [value].filter(Boolean);\r\n          queryParams[key] = categories.join(',');\r\n        } else {\r\n          queryParams[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    Object.entries(updatedData).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        queryParams[key] = value;\r\n      }\r\n    });\r\n\r\n    // Construct dynamic update query\r\n    const updateFields = Object.keys(queryParams)\r\n      .filter((key) => key !== 'id')\r\n      .map((key) => `${key} = @${key}`)\r\n      .join(', ');\r\n\r\n    if (!updateFields) {\r\n      return { success: false, message: 'No fields provided for update.' };\r\n    }\r\n\r\n    // Execute update query\r\n    await bigquery.query({\r\n      query: `UPDATE \\`teqcertify.lms.${TABLE_COURSE}\\` SET ${updateFields} WHERE id = @id`,\r\n      params: queryParams\r\n    });\r\n\r\n    console.log(`Course with ID ${id} updated successfully.`);\r\n\r\n    // Insert Audit Log\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"Course\",\r\n      entityId: id,\r\n      action: \"UPDATE\",\r\n      previousData: JSON.stringify(course),\r\n      newData: JSON.stringify(queryParams),\r\n      performedBy: user?.id,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\" }, // Ensures JSON storage\r\n    });\r\n\r\n    return {\r\n      message: `Course with ID ${id} updated successfully.`,\r\n      // courseCategoryImg: queryParams.coursecategoryImg || courseCategory.coursecategoryImg,\r\n      courseData: updatedData\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error updating course with ID ${id}:`, error);\r\n    return {\r\n      status: 500,\r\n      success: false,\r\n      errors: ['Internal server error occurred.']\r\n    };\r\n  }\r\n};\r\n\r\n// **Delete Course Handler**\r\nexport const deleteCourseHandler = async (id: string, req: any) => {\r\n  const { user } = req;\r\n  try {\r\n    console.log(`Deleting course with ID: ${id}`);\r\n\r\n    // Check if the course table exists\r\n    if (!(await checkCourseTableExists())) {\r\n      throw new Error(`Table '${TABLE_COURSE}' does not exist.`);\r\n    }\r\n\r\n    // Fetch the course data before deletion\r\n    const [rows] = await bigquery.query({\r\n      query: `SELECT * FROM \\`teqcertify.lms.${TABLE_COURSE}\\` WHERE id = @id`,\r\n      params: { id }\r\n    });\r\n\r\n    if (!rows.length) {\r\n      console.log('Course not found.');\r\n      return { success: false, message: 'Course not found.' };\r\n    }\r\n\r\n    // Delete the course image from GCS if it exists\r\n    const fileName = rows[0].courseImg?.split('/').pop();\r\n    if (fileName) {\r\n      console.log('Deleting Course image...');\r\n      await deleteCourseImageFromGCS(fileName);\r\n    }\r\n\r\n    // Delete the course from BigQuery\r\n    await bigquery.query({\r\n      query: courseQueries.deleteCourse,\r\n      params: { id } // Use id here\r\n    });\r\n\r\n    console.log(`Course with ID ${id} deleted successfully.`);\r\n\r\n    // Insert Audit Log\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"Course\",\r\n      entityId: id,\r\n      action: \"DELETE\",\r\n      previousData: JSON.stringify(rows[0]), // Store full course data before deletion\r\n      newData: null,\r\n      performedBy: user?.id,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: {\r\n        previousData: \"STRING\",\r\n        newData: \"STRING\",\r\n      }\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      message: `Course with ID ${id} deleted successfully.`\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error deleting Course with ID ${id}:`, error);\r\n    return { success: false, errors: ['Internal server error occurred.'] };\r\n  }\r\n};\r\n"],"mappings":";;;;;;AACA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AAEA,IAAAG,cAAA,GAAAH,OAAA;AAIA,IAAAI,MAAA,GAAAJ,OAAA;AAEA,MAAMK,qBAAqB,GACzBC,OAAO,CAACC,GAAG,CAACF,qBAAqB,IAAI,gBAAgB;AACvD,MAAMG,YAAY,GAAGF,OAAO,CAACC,GAAG,CAACC,YAAY,IAAI,QAAQ;;AAEzD;AACA,MAAMC,sBAAsB,GAAG,MAAAA,CAAA,KAA8B;EAC3D,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjD,MAAM,CAACC,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAE,2FAA2FN,YAAY;IAChH,CAAC,CAAC;IACFE,OAAO,CAACC,GAAG,CAAC,iBAAiBC,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE,CAAC;IAC/C,OAAOH,IAAI,CAACG,MAAM,GAAG,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;AACF,CAAC;;AAED;AACA,MAAMC,4BAA4B,GAAG,MAAAA,CAAA,KAA2B;EAC9D,MAAMC,MAAM,GAAG,MAAMV,sBAAsB,CAAC,CAAC;EAC7C,IAAI,CAACU,MAAM,EAAE;IACX,IAAI;MACFT,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,MAAME,kBAAQ,CAACC,KAAK,CAAC;QACnBA,KAAK,EAAE;AACf,yBAAyBR,OAAO,CAACC,GAAG,CAACa,UAAU,IAAId,OAAO,CAACC,GAAG,CAACc,UAAU,IAAIf,OAAO,CAACC,GAAG,CAACC,YAAY;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFE,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACnD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,MAAMK,mBAAmB,GAAG,MAAAA,CACjCC,UAAmB,EACnBC,GAAQ,EACRC,IAA0B,KACvB;EACH,MAAM;IAAEC;EAAK,CAAC,GAAGF,GAAG;EACpB,MAAMG,EAAE,GAAG,IAAAC,QAAM,EAAC,CAAC;EACnB,MAAM;IAAEC,UAAU;IAAEC,UAAU;IAAEC,gBAAgB,GAAC,EAAE;IAAEC;EAAW,CAAC,GAAGT,UAAU;EAE9E,IAAI;IAEF,MAAMU,eAAe,GAAGC,KAAK,CAACC,OAAO,CAACJ,gBAAgB,CAAC,GACrDA,gBAAgB,GAChB,CAACA,gBAAgB,CAAC,CAAC,CAAC;;IAExB;IACA,MAAMK,gBAAgB,GAAGH,eAAe,CAACI,IAAI,CAAC,GAAG,CAAC;IAEhD,MAAMnB,4BAA4B,CAAC,CAAC;IACpCR,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;;IAExD;IACA,MAAM,CAAC2B,cAAc,CAAC,GAAG,MAAMzB,kBAAQ,CAACC,KAAK,CAAC;MAC5CA,KAAK,EAAE,mCAAmCR,OAAO,CAACC,GAAG,CAACC,YAAY,mCAAmC;MACrG+B,MAAM,EAAE;QAAEV;MAAW;IACvB,CAAC,CAAC;IAEF,IAAIS,cAAc,CAACvB,MAAM,GAAG,CAAC,EAAE;MAC7BL,OAAO,CAAC8B,IAAI,CAAC,WAAWX,UAAU,mBAAmB,CAAC;MACtD,OAAO;QAAEY,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA8B,CAAC;IACnE;IAEAhC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,MAAMgC,QAAQ,GAAG,IAAAf,QAAM,EAAC,CAAC;IACzB,MAAMgB,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC1C,IAAIC,cAAc,GAAG,EAAE;;IAEvB;IACA,IAAItB,IAAI,EAAE;MACR,IAAI;QACF,MAAMuB,QAAQ,GAAG,GAAGL,QAAQ,IAAIlB,IAAI,CAACwB,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QAC7DxC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/CoC,cAAc,GAAG,MAAM,IAAAI,qCAAsB,EAC3C1B,IAAI,CAAC2B,MAAM,EACXJ,QAAQ,EACRvB,IAAI,CAACwB,QACP,CAAC;MACH,CAAC,CAAC,OAAOI,WAAW,EAAE;QACpB3C,OAAO,CAACM,KAAK,CAAC,+BAA+B,EAAEqC,WAAW,CAAC;QAC3D,OAAO;UAAEZ,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAE;QAA0B,CAAC;MAC/D;IACF;IAEAhC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrD,MAAME,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAEwC,sBAAa,CAACC,YAAY;MACjChB,MAAM,EAAE;QACNZ,EAAE,EAAEgB,QAAQ;QACZd,UAAU;QACVC,UAAU;QACVC,gBAAgB,EAAEK,gBAAgB;QAClCoB,SAAS,EAAET,cAAc;QACzBf,UAAU;QACVyB,SAAS,EAAE/B,IAAI,EAAEC,EAAE;QACnBiB;MACF;IACF,CAAC,CAAC;IAEFlC,OAAO,CAACC,GAAG,CAAC,oCAAoCgC,QAAQ,EAAE,CAAC;;IAE3D;IACA,MAAMe,cAAc,GAAG;MACrB/B,EAAE,EAAE,IAAAC,QAAM,EAAC,CAAC;MACZ+B,UAAU,EAAE,QAAQ;MACpBC,QAAQ,EAAEjB,QAAQ;MAClBkB,MAAM,EAAE,QAAQ;MAChBC,YAAY,EAAE,IAAI;MAAE;MACpBC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEtC,EAAE,EAAEgB,QAAQ;QAAEd,UAAU;QAAEC,UAAU;QAAEC,gBAAgB;QAAEC;MAAW,CAAC,CAAC;MAAE;MACjGkC,WAAW,EAAExC,IAAI,EAAEC,EAAE;MACrBiB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAEDpC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE+C,cAAc,CAAC,CAAC,CAAC;;IAElD;IACA,IAAI;MACF,MAAM7C,kBAAQ,CAACC,KAAK,CAAC;QACnBA,KAAK,EAAEqD,mBAAY,CAACC,cAAc;QAClC7B,MAAM,EAAEmB,cAAc;QACtBW,KAAK,EAAE;UAAEP,YAAY,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAS,CAAC,CAAE;MACxD,CAAC,CAAC;MACFrD,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IACjD,CAAC,CAAC,OAAO2D,UAAU,EAAE;MACnB5D,OAAO,CAACM,KAAK,CAAC,4BAA4B,EAAEsD,UAAU,CAAC;MACvD,OAAO;QACL7B,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,OAAO;MACLD,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,8BAA8B;MACvCC,QAAQ;MACRa,SAAS,EAAET,cAAc;MACzBxB,UAAU,EAAEA;IACd,CAAC;EACH,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO;MACLyB,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE1B,KAAK,YAAYC,KAAK,GAAGD,KAAK,CAAC0B,OAAO,GAAG;IACpD,CAAC;EACH;AACF,CAAC;;AAED;AAAA6B,OAAA,CAAAjD,mBAAA,GAAAA,mBAAA;AACO,MAAMkD,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,MAAM/D,sBAAsB,CAAC,CAAC;EAC9B,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,MAAM,CAACC,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAEwC,sBAAa,CAACmB;IACvB,CAAC,CAAC;IACF/D,OAAO,CAACC,GAAG,CAAC,uBAAuBC,IAAI,CAACG,MAAM,EAAE,CAAC;IACjD,OAAOH,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AAAAuD,OAAA,CAAAC,oBAAA,GAAAA,oBAAA;AACO,MAAME,oBAAoB,GAAG,MAAO/B,QAAgB,IAAK;EAC9D,MAAMlC,sBAAsB,CAAC,CAAC;EAC9B,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,4BAA4BgC,QAAQ,EAAE,CAAC;IACnD,MAAM,CAAC/B,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAEwC,sBAAa,CAACqB,SAAS;MAC9BpC,MAAM,EAAE;QAAEI;MAAS,CAAC,CAAE;IACxB,CAAC,CAAC;IACF,IAAI,CAAC/B,IAAI,CAACG,MAAM,EAAE;MAChBL,OAAO,CAACC,GAAG,CAAC,4BAA4BgC,QAAQ,EAAE,CAAC;MACnD,OAAO,IAAI;IACb;IACAjC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrC,OAAOA,IAAI,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,iCAAiC2B,QAAQ,GAAG,EAAE3B,KAAK,CAAC;IAClE,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AAAAuD,OAAA,CAAAG,oBAAA,GAAAA,oBAAA;AACO,MAAME,mBAAmB,GAAG,MAAAA,CACjCjD,EAAU,EACVH,GAAQ,EACRqD,WAAoB,EACpBpD,IAA0B,KACvB;EAEH,MAAM;IAAEC;EAAK,CAAC,GAAGF,GAAG;EACpB,IAAI;IAEFd,OAAO,CAACC,GAAG,CAAC,iCAAiCgB,EAAE,EAAE,CAAC;;IAElD;IACA,MAAMmD,WAAW,GAAG,MAAMrE,sBAAsB,CAAC,CAAC;IAClD,IAAI,CAACqE,WAAW,EAAE;MAChB,OAAO;QACLrC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,UAAUlC,YAAY;MACjC,CAAC;IACH;;IAEA;IACA,MAAM,CAACuE,aAAa,CAAC,GAAG,MAAMlE,kBAAQ,CAACC,KAAK,CAAC;MAC3CA,KAAK,EAAE,kCAAkCN,YAAY,mBAAmB;MACxE+B,MAAM,EAAE;QAAEZ;MAAG;IACf,CAAC,CAAC;IAEF,IAAI,CAACO,KAAK,CAACC,OAAO,CAAC4C,aAAa,CAAC,IAAIA,aAAa,CAAChE,MAAM,KAAK,CAAC,EAAE;MAC/DL,OAAO,CAACM,KAAK,CAAC,kBAAkBW,EAAE,qBAAqB,CAAC;MACxD,OAAO;QACLqD,MAAM,EAAE,GAAG;QACXvC,OAAO,EAAE,KAAK;QACdwC,MAAM,EAAE,CAAC,kBAAkBtD,EAAE,qBAAqB;MACpD,CAAC;IACH;IAEA,MAAMuD,MAAM,GAAGH,aAAa,CAAC,CAAC,CAAC;IAC/B,IAAII,eAAe,GAAGD,MAAM,CAAC1B,SAAS;;IAEtC;IACA,IAAI/B,IAAI,EAAE;MACR,IAAI;QACF;QACA,MAAM2D,WAAW,GAAGF,MAAM,CAAC1B,SAAS,EAAEN,KAAK,CAAC,GAAG,CAAC,CAACmC,GAAG,CAAC,CAAC;QACtD,IAAID,WAAW,EAAE;UACf,MAAM,IAAAE,uCAAwB,EAACF,WAAW,CAAC;QAC7C;;QAEA;QACA,MAAMpC,QAAQ,GAAG,GAAGrB,EAAE,IAAIF,IAAI,CAACwB,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QACvDiC,eAAe,GAAG,MAAM,IAAAhC,qCAAsB,EAC5C1B,IAAI,CAAC2B,MAAM,EACXJ,QAAQ,EACRvB,IAAI,CAACwB,QACP,CAAC;MACH,CAAC,CAAC,OAAOI,WAAW,EAAE;QACpB3C,OAAO,CAACM,KAAK,CAAC,gCAAgC,EAAEqC,WAAW,CAAC;QAC5D,OAAO;UAAEZ,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAkC,CAAC;MACvE;IACF;;IAEA;IACA,MAAM6C,WAAgC,GAAG;MACvC5D,EAAE;MACF6D,SAAS,EAAE9D,IAAI,EAAEC,EAAE;MACnB8D,SAAS,EAAE,IAAI5C,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;;IAEF;IACC,IAAIqC,eAAe,KAAKD,MAAM,CAAC1B,SAAS,EAAE;MACxC+B,WAAW,CAAC/B,SAAS,GAAG2B,eAAe;IACzC;;IAEA;IACAO,MAAM,CAACC,OAAO,CAACd,WAAW,CAAC,CAACe,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;MACpD,IAAIA,KAAK,KAAKC,SAAS,EAAE;QACvB,IAAIF,GAAG,KAAK,kBAAkB,EAAE;UAC9B;UACA,MAAMG,UAAU,GAAG9D,KAAK,CAACC,OAAO,CAAC2D,KAAK,CAAC,GACnCA,KAAK,GACL,CAACA,KAAK,CAAC,CAACG,MAAM,CAACC,OAAO,CAAC;UAC3BX,WAAW,CAACM,GAAG,CAAC,GAAGG,UAAU,CAAC3D,IAAI,CAAC,GAAG,CAAC;QACzC,CAAC,MAAM;UACLkD,WAAW,CAACM,GAAG,CAAC,GAAGC,KAAK;QAC1B;MACF;IACF,CAAC,CAAC;IAEFJ,MAAM,CAACC,OAAO,CAACd,WAAW,CAAC,CAACe,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;MACpD,IAAIA,KAAK,KAAKC,SAAS,EAAE;QACvBR,WAAW,CAACM,GAAG,CAAC,GAAGC,KAAK;MAC1B;IACF,CAAC,CAAC;;IAEF;IACA,MAAMK,YAAY,GAAGT,MAAM,CAACU,IAAI,CAACb,WAAW,CAAC,CAC1CU,MAAM,CAAEJ,GAAG,IAAKA,GAAG,KAAK,IAAI,CAAC,CAC7BQ,GAAG,CAAER,GAAG,IAAK,GAAGA,GAAG,OAAOA,GAAG,EAAE,CAAC,CAChCxD,IAAI,CAAC,IAAI,CAAC;IAEb,IAAI,CAAC8D,YAAY,EAAE;MACjB,OAAO;QAAE1D,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAiC,CAAC;IACtE;;IAEA;IACA,MAAM7B,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAE,2BAA2BN,YAAY,UAAU2F,YAAY,iBAAiB;MACrF5D,MAAM,EAAEgD;IACV,CAAC,CAAC;IAEF7E,OAAO,CAACC,GAAG,CAAC,kBAAkBgB,EAAE,wBAAwB,CAAC;;IAEzD;IACA,MAAM+B,cAAc,GAAG;MACrB/B,EAAE,EAAE,IAAAC,QAAM,EAAC,CAAC;MACZ+B,UAAU,EAAE,QAAQ;MACpBC,QAAQ,EAAEjC,EAAE;MACZkC,MAAM,EAAE,QAAQ;MAChBC,YAAY,EAAEE,IAAI,CAACC,SAAS,CAACiB,MAAM,CAAC;MACpCnB,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACsB,WAAW,CAAC;MACpCrB,WAAW,EAAExC,IAAI,EAAEC,EAAE;MACrBiB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAED,MAAMjC,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAEqD,mBAAY,CAACC,cAAc;MAClC7B,MAAM,EAAEmB,cAAc;MACtBW,KAAK,EAAE;QAAEP,YAAY,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAS,CAAC,CAAE;IACxD,CAAC,CAAC;IAEF,OAAO;MACLrB,OAAO,EAAE,kBAAkBf,EAAE,wBAAwB;MACrD;MACAJ,UAAU,EAAEsD;IACd,CAAC;EACH,CAAC,CAAC,OAAO7D,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,iCAAiCW,EAAE,GAAG,EAAEX,KAAK,CAAC;IAC5D,OAAO;MACLgE,MAAM,EAAE,GAAG;MACXvC,OAAO,EAAE,KAAK;MACdwC,MAAM,EAAE,CAAC,iCAAiC;IAC5C,CAAC;EACH;AACF,CAAC;;AAED;AAAAV,OAAA,CAAAK,mBAAA,GAAAA,mBAAA;AACO,MAAM0B,mBAAmB,GAAG,MAAAA,CAAO3E,EAAU,EAAEH,GAAQ,KAAK;EACjE,MAAM;IAAEE;EAAK,CAAC,GAAGF,GAAG;EACpB,IAAI;IACFd,OAAO,CAACC,GAAG,CAAC,4BAA4BgB,EAAE,EAAE,CAAC;;IAE7C;IACA,IAAI,EAAE,MAAMlB,sBAAsB,CAAC,CAAC,CAAC,EAAE;MACrC,MAAM,IAAIQ,KAAK,CAAC,UAAUT,YAAY,mBAAmB,CAAC;IAC5D;;IAEA;IACA,MAAM,CAACI,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAE,kCAAkCN,YAAY,mBAAmB;MACxE+B,MAAM,EAAE;QAAEZ;MAAG;IACf,CAAC,CAAC;IAEF,IAAI,CAACf,IAAI,CAACG,MAAM,EAAE;MAChBL,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC,OAAO;QAAE8B,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAoB,CAAC;IACzD;;IAEA;IACA,MAAMM,QAAQ,GAAGpC,IAAI,CAAC,CAAC,CAAC,CAAC4C,SAAS,EAAEN,KAAK,CAAC,GAAG,CAAC,CAACmC,GAAG,CAAC,CAAC;IACpD,IAAIrC,QAAQ,EAAE;MACZtC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,MAAM,IAAA2E,uCAAwB,EAACtC,QAAQ,CAAC;IAC1C;;IAEA;IACA,MAAMnC,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAEwC,sBAAa,CAACiD,YAAY;MACjChE,MAAM,EAAE;QAAEZ;MAAG,CAAC,CAAC;IACjB,CAAC,CAAC;IAEFjB,OAAO,CAACC,GAAG,CAAC,kBAAkBgB,EAAE,wBAAwB,CAAC;;IAEzD;IACA,MAAM+B,cAAc,GAAG;MACrB/B,EAAE,EAAE,IAAAC,QAAM,EAAC,CAAC;MACZ+B,UAAU,EAAE,QAAQ;MACpBC,QAAQ,EAAEjC,EAAE;MACZkC,MAAM,EAAE,QAAQ;MAChBC,YAAY,EAAEE,IAAI,CAACC,SAAS,CAACrD,IAAI,CAAC,CAAC,CAAC,CAAC;MAAE;MACvCmD,OAAO,EAAE,IAAI;MACbG,WAAW,EAAExC,IAAI,EAAEC,EAAE;MACrBiB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAED,MAAMjC,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAEqD,mBAAY,CAACC,cAAc;MAClC7B,MAAM,EAAEmB,cAAc;MACtBW,KAAK,EAAE;QACLP,YAAY,EAAE,QAAQ;QACtBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;IAEF,OAAO;MACLtB,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,kBAAkBf,EAAE;IAC/B,CAAC;EACH,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,iCAAiCW,EAAE,GAAG,EAAEX,KAAK,CAAC;IAC5D,OAAO;MAAEyB,OAAO,EAAE,KAAK;MAAEwC,MAAM,EAAE,CAAC,iCAAiC;IAAE,CAAC;EACxE;AACF,CAAC;AAACV,OAAA,CAAA+B,mBAAA,GAAAA,mBAAA","ignoreList":[]}