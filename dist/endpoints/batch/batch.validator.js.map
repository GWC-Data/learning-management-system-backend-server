{"version":3,"file":"batch.validator.js","names":["createBatchValidator","exports","batchName","in","exists","errorMessage","isString","isLength","options","max","courseId","traineeIds","optional","isArray","custom","some","id","Error","startDate","isISO8601","endDate","updateBatchValidator","deleteBatchValidator"],"sources":["../../../src/endpoints/batch/batch.validator.ts"],"sourcesContent":["import { Schema } from 'express-validator';\r\n\r\nexport const createBatchValidator: Schema = {\r\n  batchName: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'Batch name is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Batch name must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 255 },\r\n      errorMessage: 'Batch name cannot exceed 255 characters'\r\n    }\r\n  },\r\n  courseId: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'Course ID is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Course ID must be an string'\r\n    }\r\n  },\r\n  traineeIds: {\r\n    in: 'body',\r\n    optional: true,\r\n    isArray: {\r\n      errorMessage: 'Trainee IDs must be an array'\r\n    },\r\n    custom: {\r\n      options: (traineeIds: any) => {\r\n        if (traineeIds && traineeIds.some((id: any) => typeof id !== 'string')) {\r\n          throw new Error('Each trainee ID must be a string');\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n  startDate: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'Start date is required'\r\n    },\r\n    isISO8601: {\r\n      errorMessage: 'Start date must be a valid date in ISO8601 format'\r\n    }\r\n  },\r\n  endDate: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'End date is required'\r\n    },\r\n    isISO8601: {\r\n      errorMessage: 'End date must be a valid date in ISO8601 format'\r\n    }\r\n  }\r\n};\r\n\r\nexport const updateBatchValidator: Schema = {\r\n  id: {\r\n    in: 'params',\r\n    exists: {\r\n      errorMessage: 'Batch ID is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Batch ID must be an string'\r\n    }\r\n  },\r\n  batchName: {\r\n    in: 'body',\r\n    optional: true,\r\n    isString: {\r\n      errorMessage: 'Batch name must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 255 },\r\n      errorMessage: 'Batch name cannot exceed 255 characters'\r\n    }\r\n  },\r\n  courseId: {\r\n    in: 'body',\r\n    optional: true,\r\n    isString: {\r\n      errorMessage: 'Course ID must be an string'\r\n    }\r\n  },\r\n  traineeIds: {\r\n    in: 'body',\r\n    optional: true,\r\n    isArray: {\r\n      errorMessage: 'Trainee IDs must be an array'\r\n    },\r\n    custom: {\r\n      options: (traineeIds: any) => {\r\n        if (traineeIds && traineeIds.some((id: any) => typeof id !== 'string')) {\r\n          throw new Error('Each trainee ID must be a string');\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n  startDate: {\r\n    in: 'body',\r\n    optional: true,\r\n    isISO8601: {\r\n      errorMessage: 'Start date must be a valid date in ISO8601 format'\r\n    }\r\n  },\r\n  endDate: {\r\n    in: 'body',\r\n    optional: true,\r\n    isISO8601: {\r\n      errorMessage: 'End date must be a valid date in ISO8601 format'\r\n    }\r\n  }\r\n};\r\n\r\nexport const deleteBatchValidator: Schema = {\r\n  id: {\r\n    in: 'params',\r\n    exists: {\r\n      errorMessage: 'Batch ID is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Batch ID must be an string'\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]}