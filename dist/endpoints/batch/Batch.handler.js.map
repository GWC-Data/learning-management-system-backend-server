{"version":3,"file":"Batch.handler.js","names":["_bigquery","require","_uuid","_batch","_batchTrainee","_audit","checkBatchTableExists","rows","bigquery","query","length","error","console","createBatchTableIfNotExists","exists","log","checkBatchTraineeTableExists","createBatchTraineeTableIfNotExists","createBatchTable","req","batch","courseId","batchName","traineeIds","startDate","endDate","batchId","uuidv4","user","currentTimestamp","Date","toISOString","courseExists","process","env","PROJECT_ID","DATASET_ID","TABLE_COURSE","params","Error","matchedTraineeIds","traineeResults","TABLE_USER","map","row","id","missingTraineeIds","filter","includes","join","TABLE_BATCH","createdBy","createdAt","batchTraineeInsertData","traineeId","TABLE_BATCH_TRAINEE","timestamp","auditQueries","insertAuditLog","entityType","entityId","action","previousData","newData","JSON","stringify","performedBy","types","message","exports","getAllBatchesHandler","batchQueries","getBatches","batchMap","Map","forEach","batchCourseId","batchStartDate","batchEndDate","traineeFirstName","traineeLastName","courseName","courseImg","courseLink","has","set","course","trainees","get","push","firstName","lastName","Array","from","values","getBatchDetailsHandler","options","getBatchDetails","batchData","getBatchByBatchNameHandler","getBatchByBatchName","getBatchIdsByTraineeIdHandler","getBatchIdsByTraineeId","batchIds","updateBatchesHandler","updateBatch","batchOptions","existingRows","existingBatch","updateBatchOptions","updatedBy","updatedAt","deleteBatchOptions","batchTraineeQueries","deleteBatchTrainee","validTrainees","getBatchTraineeIds","insertBatchTraineesOptions","deleteBatchHandler","exist","success","deleteBatch"],"sources":["../../../src/endpoints/batch/Batch.handler.ts"],"sourcesContent":["import { bigquery } from '../../config/bigquery';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Batch } from 'db';\r\nimport { batchQueries } from 'queries/batch/batch.queries';\r\nimport { batchTraineeQueries } from 'queries/batchTrainee/batchTrainee.queries';\r\nimport { auditQueries } from 'queries/audit/audit.queries';\r\n\r\n\r\n// Function to check if the batch table exists\r\nconst checkBatchTableExists = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `\r\n        SELECT table_name \r\n        FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` \r\n        WHERE table_name = 'batches'\r\n      `\r\n    });\r\n\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking table existence:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to create the batch table if it does not exist\r\nconst createBatchTableIfNotExists = async () => {\r\n  const exists = await checkBatchTableExists();\r\n  if (!exists) {\r\n    try {\r\n      await bigquery.query({\r\n        query: `\r\n          CREATE TABLE \\`teqcertify.lms.batches\\` (\r\n            id STRING NOT NULL, \r\n            courseId STRING NOT NULL,\r\n            batchName STRING NOT NULL,\r\n            startDate DATE NOT NULL,\r\n            endDate DATE NOT NULL,\r\n            createdBy STRING NOT NULL,\r\n            updatedBy STRING,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `\r\n      });\r\n      console.log(\"Batch table created successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error creating Batch table:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Function to check if the batchTrainee table exists\r\nconst checkBatchTraineeTableExists = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `\r\n        SELECT table_name \r\n        FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` \r\n        WHERE table_name = 'batchTrainees'\r\n      `\r\n    });\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking table existence:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst createBatchTraineeTableIfNotExists = async () => {\r\n  const exists = await checkBatchTraineeTableExists();\r\n  if (!exists) {\r\n    try {\r\n      await bigquery.query({\r\n        query: `\r\n          CREATE TABLE \\`teqcertify.lms.batchTrainees\\` (\r\n            batchId STRING NOT NULL,\r\n            traineeId STRING NOT NULL,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `\r\n      });\r\n      console.log(\"BatchTrainee table created successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error creating BatchTrainee table:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n//create batch table\r\n// export const createBatchTable = async (req: any, batch: Batch) => {\r\n//   await createBatchTableIfNotExists();\r\n//   await createBatchTraineeTableIfNotExists();\r\n\r\n//   const { courseId, batchName, traineeIds, startDate, endDate } = batch;\r\n//   const batchId = uuidv4();\r\n//   const { user } = req;\r\n\r\n//   try {\r\n//     // Step 1: Validate Course Existence\r\n//     const [courseExists] = await bigquery.query({\r\n//       query: `\r\n//         SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_COURSE}\\`\r\n//         WHERE id = @courseId`,\r\n//       params: { courseId },\r\n//     });\r\n\r\n//     if (courseExists.length === 0) {\r\n//       throw new Error(`Course with ID ${courseId} not found.`);\r\n//     }\r\n\r\n//     // Step 2: Validate Trainees\r\n//     let matchedTraineeIds: string[] = [];\r\n//     if (traineeIds.length > 0) {\r\n//       const [traineeResults] = await bigquery.query({\r\n//         query: `\r\n//           SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_USER}\\`\r\n//           WHERE id IN UNNEST(@traineeIds)`,\r\n//         params: { traineeIds },\r\n//       });\r\n\r\n//       matchedTraineeIds = traineeResults.map((row: any) => row.id);\r\n\r\n//       if (matchedTraineeIds.length !== traineeIds.length) {\r\n//         const missingTraineeIds = traineeIds.filter(\r\n//           (id) => !matchedTraineeIds.includes(id)\r\n//         );\r\n//         throw new Error(\r\n//           `Some trainees were not found: ${missingTraineeIds.join(\", \")}`\r\n//         );\r\n//       }\r\n//     }\r\n\r\n//     // Step 3: Insert Batch Data\r\n//     await bigquery.query({\r\n//       query: batchQueries.createBatch,\r\n//       params: {\r\n//         id: batchId,\r\n//         courseId,\r\n//         batchName,\r\n//         startDate,\r\n//         endDate,\r\n//         createdBy: user?.id,\r\n//         createdAt: new Date().toISOString(),\r\n//       },\r\n//     });\r\n//     console.log(\"Batch created successfully:\", batchId);\r\n\r\n//     // Step 4: Bulk Insert Batch-Trainee Mappings\r\n//     if (matchedTraineeIds.length > 0) {\r\n//       const batchTraineeInsertData = matchedTraineeIds.map((traineeId) => ({\r\n//         batchId,\r\n//         traineeId,\r\n//       }));\r\n\r\n//       await bigquery.query({\r\n//         query: `\r\n//       INSERT INTO \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_TRAINEE}\\`\r\n//       (batchId, traineeId, createdAt, updatedAt)\r\n//       SELECT\r\n//         batchId,\r\n//         traineeId,\r\n//         TIMESTAMP(createdAt) AS createdAt,\r\n//         TIMESTAMP(updatedAt) AS updatedAt\r\n//       FROM UNNEST(@batchTraineeInsertData) AS batchTraineeInsertData\r\n//       WHERE NOT EXISTS (\r\n//         SELECT 1\r\n//         FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_TRAINEE}\\` bt\r\n//         WHERE bt.batchId = @batchId AND bt.traineeId = batchTraineeInsertData.traineeId\r\n//       )`,\r\n//         params: {\r\n//           batchTraineeInsertData,\r\n//           batchId,\r\n//           createdAt: new Date().toISOString(),\r\n//           updatedAt: new Date().toISOString(),\r\n//         },\r\n//       });\r\n\r\n//       console.log(\"Batch-Trainee linked successfully.\");\r\n\r\n//        // **Step 6: Audit Log for Batch-Trainee Mapping**\r\n//        await bigquery.query({\r\n//         query: auditQueries.insertAuditLog,\r\n//         params: {\r\n//           id: uuidv4(),\r\n//           entityType: \"Batch\",\r\n//           entityId: batchId,\r\n//           action: \"CREATE\",\r\n//           previousData: null,\r\n//           newData: JSON.stringify(matchedTraineeIds),\r\n//           performedBy: user?.id,\r\n//           createdAt: new Date().toISOString(),\r\n//         },\r\n//         types: {\r\n//           previousData: 'STRING',\r\n//           newData: 'STRING',\r\n//         }\r\n//       });\r\n//       console.log(\"Audit log inserted for batch-trainee linking.\");\r\n//     }\r\n\r\n//     return { id: batchId, ...batch, traineeIds };\r\n//   } catch (error: any) {\r\n//     console.error(\"Error creating Batch:\", error.message, error);\r\n//     throw new Error(`Batch creation failed: ${error.message}`);\r\n//   }\r\n// };\r\n\r\nexport const createBatchTable = async (req: any, batch: Batch) => {\r\n  await createBatchTableIfNotExists();\r\n  await createBatchTraineeTableIfNotExists();\r\n\r\n  const { courseId, batchName, traineeIds, startDate, endDate } = batch;\r\n  const batchId = uuidv4();\r\n  const { user } = req;\r\n  const currentTimestamp = new Date().toISOString();\r\n\r\n  try {\r\n    // Step 1: Validate Course Existence\r\n    const [courseExists] = await bigquery.query({\r\n      query: `\r\n        SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_COURSE}\\`\r\n        WHERE id = @courseId`,\r\n      params: { courseId },\r\n    });\r\n\r\n    if (courseExists.length === 0) {\r\n      throw new Error(`Course with ID ${courseId} not found.`);\r\n    }\r\n\r\n    // Step 2: Validate Trainees\r\n    let matchedTraineeIds: string[] = [];\r\n    if (traineeIds.length > 0) {\r\n      const [traineeResults] = await bigquery.query({\r\n        query: `\r\n          SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_USER}\\`\r\n          WHERE id IN UNNEST(@traineeIds)`,\r\n        params: { traineeIds },\r\n      });\r\n\r\n      matchedTraineeIds = traineeResults.map((row: any) => row.id);\r\n\r\n      if (matchedTraineeIds.length !== traineeIds.length) {\r\n        const missingTraineeIds = traineeIds.filter(\r\n          (id) => !matchedTraineeIds.includes(id)\r\n        );\r\n        throw new Error(\r\n          `Some trainees were not found: ${missingTraineeIds.join(\", \")}`\r\n        );\r\n      }\r\n    }\r\n\r\n    // Step 3: Insert Batch Data\r\n    await bigquery.query({\r\n      query: `\r\n        INSERT INTO \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH}\\`\r\n         (id, courseId, batchName, startDate, endDate, createdBy, createdAt)\r\n        VALUES (@id, @courseId, @batchName, @startDate, @endDate, @createdBy, TIMESTAMP(@createdAt))\r\n      `,\r\n      params: {\r\n        id: batchId,\r\n        courseId,\r\n        batchName,\r\n        startDate,\r\n        endDate,\r\n        createdBy: user?.id,\r\n        createdAt: currentTimestamp,\r\n      },\r\n    });\r\n    console.log(\"Batch created successfully:\", batchId);\r\n\r\n    // Step 4: Bulk Insert Batch-Trainee Mappings\r\n    if (matchedTraineeIds.length > 0) {\r\n      const batchTraineeInsertData = matchedTraineeIds.map((traineeId) => ({\r\n        batchId,\r\n        traineeId,\r\n      }));\r\n\r\n      await bigquery.query({\r\n        query: `\r\n          INSERT INTO \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_TRAINEE}\\`\r\n          (batchId, traineeId, createdAt, updatedAt)\r\n          SELECT\r\n            batchTraineeData.batchId,\r\n            batchTraineeData.traineeId,\r\n            TIMESTAMP(@timestamp) AS createdAt,\r\n            TIMESTAMP(@timestamp) AS updatedAt\r\n          FROM UNNEST(@batchTraineeInsertData) AS batchTraineeData\r\n          WHERE NOT EXISTS (\r\n            SELECT 1\r\n            FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_TRAINEE}\\` bt\r\n            WHERE bt.batchId = @batchId AND bt.traineeId = batchTraineeData.traineeId\r\n          )`,\r\n        params: {\r\n          batchTraineeInsertData,\r\n          batchId,\r\n          timestamp: currentTimestamp,\r\n        },\r\n      });\r\n\r\n      console.log(\"Batch-Trainee linked successfully.\");\r\n\r\n      // Step 6: Audit Log for Batch-Trainee Mapping\r\n      await bigquery.query({\r\n        query: auditQueries.insertAuditLog,\r\n        params: {\r\n          id: uuidv4(),\r\n          entityType: \"Batch\",\r\n          entityId: batchId,\r\n          action: \"CREATE\",\r\n          previousData: null,\r\n          newData: JSON.stringify(matchedTraineeIds),\r\n          performedBy: user?.id,\r\n          createdAt: currentTimestamp,\r\n        },\r\n        types: {\r\n          previousData: 'STRING',\r\n          newData: 'STRING',\r\n        }\r\n      });\r\n      console.log(\"Audit log inserted for batch-trainee linking.\");\r\n    }\r\n\r\n    return { id: batchId, ...batch, traineeIds };\r\n  } catch (error: any) {\r\n    console.error(\"Error creating Batch:\", error.message, error);\r\n    throw new Error(`Batch creation failed: ${error.message}`);\r\n  }\r\n};\r\n\r\n//getall Batches\r\nexport const getAllBatchesHandler = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({ query: batchQueries.getBatches });\r\n\r\n    const batchMap = new Map();\r\n\r\n    rows.forEach((row: any) => {\r\n      const { batchId, batchCourseId, batchName, batchStartDate, batchEndDate, traineeId, traineeFirstName, traineeLastName, courseName, courseImg, courseLink } = row;\r\n\r\n      if (!batchMap.has(batchId)) {\r\n        batchMap.set(batchId, {\r\n          id: batchId,\r\n          course: batchCourseId\r\n            ? { id: batchCourseId, courseName, courseImg, courseLink }\r\n            : null,\r\n          batchName,\r\n          startDate: batchStartDate,\r\n          endDate: batchEndDate,\r\n          trainees: [],\r\n        });\r\n      }\r\n\r\n      // Add trainees if they exist\r\n      if (traineeId) {\r\n        batchMap.get(batchId).trainees.push({\r\n          id: traineeId,\r\n          firstName: traineeFirstName,\r\n          lastName: traineeLastName,\r\n        });\r\n      }\r\n    });\r\n\r\n    return Array.from(batchMap.values());\r\n  } catch (error) {\r\n    console.error(\"Error fetching all batches:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//getBatch based on id\r\nexport const getBatchDetailsHandler = async (id: string) => {\r\n  try {\r\n\r\n    console.log(\"Fetching batch with ID:\", id);\r\n\r\n    const options = {\r\n      query: batchQueries.getBatchDetails,\r\n      params: { batchId: id }\r\n    };\r\n\r\n    const [rows] = await bigquery.query(options);\r\n\r\n    if (rows.length === 0) {\r\n      throw new Error(\"Batch not found\");\r\n    }\r\n\r\n    const batchData = {\r\n      id: rows[0].batchId,\r\n      courseId: rows[0].batchCourseId,\r\n      batchName: rows[0].batchName,\r\n      startDate: rows[0].batchStartDate,\r\n      endDate: rows[0].batchEndDate,\r\n      trainees: rows[0].trainees || [],\r\n      course: {\r\n        courseName: rows[0].courseName,\r\n        courseImg: rows[0].courseImg,\r\n        courseLink: rows[0].courseLink\r\n      }\r\n    };\r\n\r\n    return batchData;\r\n  } catch (error) {\r\n    console.error(\"Error fetching batch details:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getBatchByBatchNameHandler = async (batchName: string) => {\r\n  try {\r\n    console.log(\"Fetching Batch Details for Batch Name:\", batchName);\r\n\r\n    const options = {\r\n      query: batchQueries.getBatchByBatchName,\r\n      params: { batchName },\r\n    };\r\n\r\n    const [rows] = await bigquery.query(options);\r\n\r\n    if (rows.length === 0) {\r\n      throw new Error(\"Batch not found\");\r\n    }\r\n\r\n    // Transform the result into a structured response\r\n    const batchData = {\r\n      batchId: rows[0].batchId,\r\n      batchName: rows[0].batchName,\r\n      startDate: rows[0].startDate,\r\n      endDate: rows[0].endDate,\r\n      course: rows[0].courseId\r\n        ? {\r\n            id: rows[0].courseId,\r\n            courseName: rows[0].courseName,\r\n            courseImg: rows[0].courseImg,\r\n            courseLink: rows[0].courseLink,\r\n          }\r\n        : null,\r\n      trainees: rows\r\n        .filter((row) => row.traineeId !== null) // Remove null values if no trainees exist\r\n        .map((row) => ({\r\n          id: row.traineeId,\r\n          firstName: row.traineeFirstName,\r\n          lastName: row.traineeLastName,\r\n        })),\r\n    };\r\n\r\n    return batchData;\r\n  } catch (error) {\r\n    console.error(\"Error fetching batch:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getBatchIdsByTraineeIdHandler = async (id: string) => {\r\n  try {\r\n    console.log(\"Fetching batches for traineeId:\", id);\r\n\r\n    const options = {\r\n      query: batchQueries.getBatchIdsByTraineeId,\r\n      params: { traineeId: id },\r\n    };\r\n\r\n    const [rows] = await bigquery.query(options);\r\n\r\n    if (!rows || rows.length === 0) {\r\n      throw new Error(\"No batches found for this trainee\");\r\n    }\r\n\r\n    // Extract only batch IDs\r\n    const batchIds = rows.map(row => row.batchId);\r\n\r\n    return batchIds;\r\n  } catch (error) {\r\n    console.error(\"Error fetching batch IDs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//update batch\r\nexport const updateBatchesHandler = async (id: string, req: any, updateBatch: Partial<Batch>) => {\r\n  const { user } =req;\r\n  try {\r\n    console.log(`Updating batch with ID: ${id}`);\r\n\r\n    // Step 1: Fetch existing batch data\r\n    const batchOptions = {\r\n      query: batchQueries.getBatchDetails,\r\n      params: { batchId: id },\r\n    };\r\n\r\n    const [existingRows] = await bigquery.query(batchOptions);\r\n    if (existingRows.length === 0) {\r\n      throw new Error(\"Batch not found\");\r\n    }\r\n\r\n    const existingBatch = existingRows[0];\r\n\r\n    // Step 2: Update batch details\r\n    const updateBatchOptions = {\r\n      query: batchQueries.updateBatch,\r\n      params: {\r\n        batchId: id,\r\n        batchName: updateBatch.batchName || existingBatch.batchName,\r\n        courseId: updateBatch.courseId || existingBatch.batchCourseId,\r\n        startDate: updateBatch.startDate || existingBatch.batchStartDate,\r\n        endDate: updateBatch.endDate || existingBatch.batchEndDate,\r\n        updatedBy: user.id,\r\n        updatedAt: new Date().toISOString(),\r\n      },\r\n    };\r\n\r\n      // **Step 3: Audit Log for Batch Update**\r\n      // await bigquery.query({\r\n      //   query: auditQueries.insertAuditLog,\r\n      //   params: {\r\n      //     id: uuidv4(),\r\n      //     entityType: \"Batch\",\r\n      //     entityId: id,\r\n      //     action: \"UPDATE\",\r\n      //     previousData: JSON.stringify(existingBatch),\r\n      //     newData: JSON.stringify(updateBatch),\r\n      //     performedBy: user?.id,\r\n      //     createdAt: new Date().toISOString(),\r\n      //   },\r\n      // });\r\n      \r\n    await bigquery.query(updateBatchOptions);\r\n\r\n    if (updateBatch.traineeIds && updateBatch.traineeIds.length > 0) {\r\n      // Step 1: Delete existing batch-trainee relationships\r\n      const deleteBatchOptions = {\r\n        query: batchTraineeQueries.deleteBatchTrainee,\r\n        params: { batchId: id },\r\n      };\r\n      await bigquery.query(deleteBatchOptions);\r\n\r\n      // Step 2: Validate the trainee IDs\r\n      const [validTrainees] = await bigquery.query({\r\n        query: batchTraineeQueries.getBatchTraineeIds,\r\n        params: { traineeIds: updateBatch.traineeIds },\r\n      });\r\n\r\n      const matchedTraineeIds = validTrainees.map((row: any) => row.id);\r\n\r\n      if (matchedTraineeIds.length !== updateBatch.traineeIds.length) {\r\n        throw new Error(\"Some traineeIds were not found.\");\r\n      }\r\n\r\n      // Step 3: Insert new trainees using `UNNEST`\r\n      const batchTraineeInsertData = matchedTraineeIds.map((traineeId) => ({\r\n        batchId: id,\r\n        traineeId,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      }));\r\n\r\n      const insertBatchTraineesOptions = {\r\n        query: `\r\n          INSERT INTO \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_TRAINEE}\\`\r\n          (batchId, traineeId, createdAt, updatedAt)\r\n          SELECT\r\n            batchId,\r\n            traineeId,\r\n            TIMESTAMP(createdAt) AS createdAt,\r\n            TIMESTAMP(updatedAt) AS updatedAt\r\n          FROM UNNEST(@batchTraineeInsertData) AS batchTraineeInsertData\r\n        `,\r\n        params: {\r\n          batchTraineeInsertData,\r\n        },\r\n      };\r\n\r\n      await bigquery.query(insertBatchTraineesOptions);\r\n    }\r\n\r\n    // **Step 3: Audit Log for Batch Update**\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"Batch\",\r\n        entityId: id,\r\n        action: \"UPDATE\",\r\n        previousData: JSON.stringify(existingBatch),\r\n        newData: JSON.stringify(updateBatch),\r\n        performedBy: user?.id,\r\n        createdAt: new Date().toISOString(),\r\n      },\r\n    });\r\n\r\n    console.log(\"Audit log inserted for batch-trainee update.\");\r\n\r\n    console.log(`Batch updated successfully.`);\r\n\r\n    return { id, ...updateBatch };\r\n  } catch (error) {\r\n    console.error(`Error updating batch ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//DELETE batch\r\nexport const deleteBatchHandler = async (req: any, id: string) => {\r\n  const exist = await checkBatchTableExists();\r\n  const { user } = req;\r\n\r\n  if (!exist) {\r\n    console.error(\"Batch table does not exist\");\r\n    return { success: false, message: \"Batch table does not exist\" };\r\n  }\r\n\r\n  try {\r\n    console.log(`Deleting trainees associated with batch ID: ${id}`);\r\n    await bigquery.query({\r\n      query: batchTraineeQueries.deleteBatchTrainee,\r\n      params: { batchId: id },\r\n    });\r\n\r\n    console.log(`Deleting batch with ID: ${id}`);\r\n    await bigquery.query({\r\n      query: batchQueries.deleteBatch,\r\n      params: { id },\r\n    });\r\n\r\n    // **Audit Log for Deleting Batch**\r\n    console.log(`Inserting audit log for batch deletion (ID: ${id})...`);\r\n    \r\n    //audit log\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"Batch\",\r\n        entityId: id,\r\n        action: \"DELETE\",\r\n        previousData: JSON.stringify({ batchId: id }), // Store previous data as a string\r\n        newData: \"\", // Instead of `null`, use an empty string\r\n        performedBy: user?.id || \"SYSTEM\",\r\n        createdAt: new Date().toISOString(),\r\n      },\r\n      types: {\r\n        previousData: \"STRING\",\r\n        newData: \"STRING\",\r\n      },\r\n    });\r\n\r\n    console.log(`Batch and associated trainees deleted successfully.`);\r\n    return { success: true, message: \"Batch deleted successfully\" };\r\n  } catch (error) {\r\n    console.error(`Error deleting batch ${id}:`, error);\r\n    return { success: false, message: `Error deleting batch` };\r\n  }\r\n};\r\n"],"mappings":";;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AAEA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAH,OAAA;AACA,IAAAI,MAAA,GAAAJ,OAAA;AAGA;AACA,MAAMK,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAM,CAACC,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAE;AACb;AACA;AACA;AACA;IACI,CAAC,CAAC;IAEF,OAAOF,IAAI,CAACG,MAAM,GAAG,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAME,2BAA2B,GAAG,MAAAA,CAAA,KAAY;EAC9C,MAAMC,MAAM,GAAG,MAAMR,qBAAqB,CAAC,CAAC;EAC5C,IAAI,CAACQ,MAAM,EAAE;IACX,IAAI;MACF,MAAMN,kBAAQ,CAACC,KAAK,CAAC;QACnBA,KAAK,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFG,OAAO,CAACG,GAAG,CAAC,mCAAmC,CAAC;IAClD,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,MAAMK,4BAA4B,GAAG,MAAAA,CAAA,KAAY;EAC/C,IAAI;IACF,MAAM,CAACT,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAE;AACb;AACA;AACA;AACA;IACI,CAAC,CAAC;IACF,OAAOF,IAAI,CAACG,MAAM,GAAG,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMM,kCAAkC,GAAG,MAAAA,CAAA,KAAY;EACrD,MAAMH,MAAM,GAAG,MAAME,4BAA4B,CAAC,CAAC;EACnD,IAAI,CAACF,MAAM,EAAE;IACX,IAAI;MACF,MAAMN,kBAAQ,CAACC,KAAK,CAAC;QACnBA,KAAK,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFG,OAAO,CAACG,GAAG,CAAC,0CAA0C,CAAC;IACzD,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO,MAAMO,gBAAgB,GAAG,MAAAA,CAAOC,GAAQ,EAAEC,KAAY,KAAK;EAChE,MAAMP,2BAA2B,CAAC,CAAC;EACnC,MAAMI,kCAAkC,CAAC,CAAC;EAE1C,MAAM;IAAEI,QAAQ;IAAEC,SAAS;IAAEC,UAAU;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGL,KAAK;EACrE,MAAMM,OAAO,GAAG,IAAAC,QAAM,EAAC,CAAC;EACxB,MAAM;IAAEC;EAAK,CAAC,GAAGT,GAAG;EACpB,MAAMU,gB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","ignoreList":[]}