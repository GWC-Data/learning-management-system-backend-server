{"version":3,"file":"assignmentCompletion.js","names":["_nodeServerEngine","require","_multer","_interopRequireDefault","_assignmentCompletion","_assignmentCompletion2","_assignmentCompletion3","_middleware","upload","multer","storage","memoryStorage","createAssignmentCompletionEndpoint","exports","Endpoint","path","method","EndpointMethod","POST","authType","EndpointAuthType","JWT","validator","assignmentCompletionValidator","middleware","checkPermission","single","handler","req","res","body","classId","traineeId","obtainedMarks","status","json","error","response","createAssignmentCompletionHandler","file","success","message","console","ASSIGNMENT_COMPLETION_CREATION_ERROR","getAllAssignmentCompletionsEndpoint","GET","assignmentCompletions","getAllAssignmentCompletionsHandler","ASSIGNMENT_COMPLETION_NOT_FOUND","ASSIGNMENT_COMPLETION_FETCH_ERROR","getAssignmentCompletionByIdEndpoint","assignmentCompletion","getAssignmentCompletionByIdHandler","params","id","ASSIGNMENT_COMPLETION_GET_ERROR","updateAssignmentCompletionByIdEndpoint","PUT","updatedAssignmentCompletion","updateAssignmentCompletionHandler","ASSIGNMENT_COMPLETION_UPDATE_ERROR","updateAssignmentCompletionValidator","deleteAssignmentCompletionEndpoint","DELETE","deleteAssignmentCompletionHandler","ASSIGNMENT_COMPLETION_DELETION_ERROR","deleteAssignmentCompletionValidator"],"sources":["../../../src/endpoints/assignmentCompletion/assignmentCompletion.ts"],"sourcesContent":["import { Endpoint, EndpointAuthType, EndpointMethod } from 'node-server-engine';\r\nimport multer from 'multer';\r\nimport { Request, Response } from 'express';\r\nimport {\r\n  createAssignmentCompletionHandler,\r\n  updateAssignmentCompletionHandler,\r\n  getAssignmentCompletionByIdHandler,\r\n  deleteAssignmentCompletionHandler,\r\n  getAllAssignmentCompletionsHandler\r\n} from './assignmentCompletion.handler';\r\n\r\nimport {\r\n  assignmentCompletionValidator,\r\n  updateAssignmentCompletionValidator,\r\n  deleteAssignmentCompletionValidator\r\n} from './assignmentCompletion.validator';\r\n\r\nimport {\r\n  ASSIGNMENT_COMPLETION_CREATION_ERROR,\r\n  ASSIGNMENT_COMPLETION_UPDATE_ERROR,\r\n  ASSIGNMENT_COMPLETION_DELETION_ERROR,\r\n  ASSIGNMENT_COMPLETION_FETCH_ERROR,\r\n  ASSIGNMENT_COMPLETION_NOT_FOUND,\r\n  ASSIGNMENT_COMPLETION_GET_ERROR\r\n} from './assignmentCompletion.const';\r\nimport { checkPermission } from 'middleware';\r\n// Multer Memory Storage for handling file uploads\r\nconst upload = multer({ storage: multer.memoryStorage() });\r\n\r\n// Create Assignment Completion Endpoint\r\nexport const createAssignmentCompletionEndpoint = new Endpoint({\r\n  path: '/assignment-completion',\r\n  method: EndpointMethod.POST,\r\n  authType: EndpointAuthType.JWT,\r\n  validator: assignmentCompletionValidator,\r\n  middleware: [checkPermission(\"CreateAssignmentCompletion\"),upload.single('courseAssignmentAnswerFile')],\r\n\r\n  handler: async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n    \r\n      // Ensure required fields are present\r\n      if (\r\n        !req.body.classId ||\r\n        !req.body.traineeId ||\r\n        !req.body.obtainedMarks\r\n      ) {\r\n        res\r\n          .status(400)\r\n          .json({\r\n            error: 'classId, traineeId, and obtainedMarks are required'\r\n          });\r\n        return;\r\n      }\r\n\r\n      // Call handler with request body and file\r\n      const response = await createAssignmentCompletionHandler(\r\n        req,\r\n        req.body,\r\n        req.file\r\n      );\r\n\r\n      if (!response.success) {\r\n        res.status(400).json({ error: response.message });\r\n        return;\r\n      }\r\n\r\n      res.status(201).json({\r\n        message: 'Assignmentcompletion created successfully',\r\n        response\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating assignment completion:', error);\r\n      res\r\n        .status(500)\r\n        .json({ message: ASSIGNMENT_COMPLETION_CREATION_ERROR, error });\r\n    }\r\n  }\r\n});\r\n\r\n// Get All Assignment Completions Endpoint\r\nexport const getAllAssignmentCompletionsEndpoint = new Endpoint({\r\n  path: '/assignment-completion',\r\n  method: EndpointMethod.GET,\r\n  handler: async (req, res): Promise<void> => {\r\n    try {\r\n      const assignmentCompletions = await getAllAssignmentCompletionsHandler();\r\n\r\n      if (!assignmentCompletions) {\r\n        res.status(404).json({ message: ASSIGNMENT_COMPLETION_NOT_FOUND });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        message: 'Assignment completions retrieved successfully',\r\n        assignmentCompletions\r\n      });\r\n    } catch (error) {\r\n      res\r\n        .status(500)\r\n        .json({ message: ASSIGNMENT_COMPLETION_FETCH_ERROR, error });\r\n    }\r\n  },\r\n  authType: EndpointAuthType.JWT,\r\n  validator: {},\r\n  middleware: [checkPermission(\"GetAssignmentCompletion\")]\r\n});\r\n\r\n// Get Assignment Completion By ID Endpoint\r\nexport const getAssignmentCompletionByIdEndpoint = new Endpoint({\r\n  path: '/assignment-completion/:id',\r\n  method: EndpointMethod.GET,\r\n  handler: async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n      const assignmentCompletion = await getAssignmentCompletionByIdHandler(\r\n        req.params.id\r\n      );\r\n\r\n      if (!assignmentCompletion) {\r\n        res.status(404).json({ message: ASSIGNMENT_COMPLETION_NOT_FOUND });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        message: 'Assignment completion retrieved successfully',\r\n        assignmentCompletion\r\n      });\r\n    } catch (error) {\r\n      res.status(500).json({ message: ASSIGNMENT_COMPLETION_GET_ERROR, error });\r\n    }\r\n  },\r\n  authType: EndpointAuthType.JWT,\r\n  validator: {},\r\n  middleware: [checkPermission(\"GetAssignmentCompletion\")]\r\n\r\n});\r\n\r\n// Update Assignment Completion Endpoint\r\nexport const updateAssignmentCompletionByIdEndpoint = new Endpoint({\r\n  path: '/assignment-completion/:id',\r\n  method: EndpointMethod.PUT,\r\n  handler: async (req, res): Promise<void> => {\r\n    try {\r\n      const updatedAssignmentCompletion =\r\n        await updateAssignmentCompletionHandler(\r\n          req,\r\n          req.params.id,\r\n          req.body,\r\n          req.file\r\n        );\r\n\r\n      res.status(200).json({\r\n        message: 'Assignment completion updated successfully',\r\n        updatedAssignmentCompletion\r\n      });\r\n    } catch (error) {\r\n      res\r\n        .status(500)\r\n        .json({ message: ASSIGNMENT_COMPLETION_UPDATE_ERROR, error });\r\n    }\r\n  },\r\n  authType: EndpointAuthType.JWT,\r\n  validator: updateAssignmentCompletionValidator,\r\n  middleware: [checkPermission(\"UpdateAssignmentCompletion\"),upload.single('courseAssignmentAnswerFile')] // Ensure correct field name\r\n});\r\n\r\n// Delete Assignment Completion Endpoint\r\nexport const deleteAssignmentCompletionEndpoint = new Endpoint({\r\n  path: '/assignment-completion/:id',\r\n  method: EndpointMethod.DELETE,\r\n  handler: async (req, res): Promise<void> => {\r\n    try {\r\n      await deleteAssignmentCompletionHandler(req, req.params.id);\r\n      res\r\n        .status(200)\r\n        .json({ message: 'Assignment completion deleted successfully' });\r\n    } catch (error) {\r\n      res\r\n        .status(500)\r\n        .json({ message: ASSIGNMENT_COMPLETION_DELETION_ERROR, error });\r\n    }\r\n  },\r\n  authType: EndpointAuthType.JWT,\r\n  validator: deleteAssignmentCompletionValidator,\r\n  middleware: [checkPermission(\"DeleteAssignmentCompletion\")]\r\n});\r\n"],"mappings":"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","ignoreList":[]}