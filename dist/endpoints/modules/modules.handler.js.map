{"version":3,"file":"modules.handler.js","names":["_uuid","require","_bigquery","_module","_moduleStorage","_audit","TABLE_MODULE","process","env","checkModuleTableExists","console","log","rows","bigquery","query","length","error","Error","createModuleTableIfNotExists","exists","PROJECT_ID","DATASET_ID","createModuleHandler","req","moduleData","file","courseId","moduleName","moduleDescription","materialForModule","user","existingModule","params","warn","success","message","maxSequenceResult","nextSequence","maxSequence","moduleId","uuidv4","createdAt","Date","toISOString","updatedAt","uploadedDocumentUrl","fileName","mimetype","split","uploadModuleMaterialToGCS","buffer","uploadError","moduleQueries","createModule","id","sequence","createdBy","auditQueries","insertAuditLog","entityType","entityId","action","previousData","newData","JSON","stringify","performedBy","types","errors","exports","getAllModulesHandler","getAllModules","getModuleByIdHandler","getModule","updateModuleHandler","updatedData","tableExists","moduleResults","Array","isArray","status","module","newMaterialForModule","oldFileName","pop","deleteModuleMaterialFromGCS","queryParams","Object","entries","forEach","key","value","undefined","updateFields","keys","filter","map","join","auditLogParams","courseData","deleteModuleHandler","deleteModule"],"sources":["../../../src/endpoints/modules/modules.handler.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport { bigquery } from '../../config/bigquery';\r\nimport { moduleQueries } from '../../queries/module/module.queries';\r\nimport { Modules } from 'db';\r\nimport {\r\n  deleteModuleMaterialFromGCS,\r\n  uploadModuleMaterialToGCS\r\n} from '../../config/moduleStorage';\r\nimport { auditQueries } from 'queries/audit/audit.queries';\r\n\r\nconst TABLE_MODULE = process.env.TABLE_MODULE || 'course';\r\n\r\n// // Function to check if the module table exists\r\nconst checkModuleTableExists = async (): Promise<boolean> => {\r\n  try {\r\n    console.log('Checking if course table exists...');\r\n    const [rows] = await bigquery.query({\r\n      query: `SELECT table_name FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` WHERE table_name = 'modules'`\r\n    });\r\n    console.log(`Table exists: ${rows.length > 0}`);\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error('Error checking table existence:', error);\r\n    throw new Error('Database error while checking table existence.');\r\n  }\r\n};\r\n\r\n// // Function to create the module table if it does not exist\r\nconst createModuleTableIfNotExists = async (): Promise<void> => {\r\n  const exists = await checkModuleTableExists();\r\n  if (!exists) {\r\n    try {\r\n      console.log('Creating module table...');\r\n      await bigquery.query({\r\n        query: `\r\n        CREATE TABLE \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_MODULE}\\` (\r\n          id STRING NOT NULL, \r\n          courseId STRING NOT NULL,\r\n          moduleName STRING NOT NULL,\r\n          moduleDescription STRING,\r\n          sequence INT64,\r\n          materialForModule STRING,\r\n          createdBy STRING NOT NULL,\r\n          updatedBy STRING,\r\n          createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n          updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n        )`\r\n      });\r\n      console.log('Course table created successfully.');\r\n    } catch (error) {\r\n      console.error('Error creating module table:', error);\r\n      throw new Error('Failed to create module table.');\r\n    }\r\n  }\r\n};\r\n\r\n//CREATE Module\r\nexport const createModuleHandler = async (\r\n  req:any,\r\n  moduleData: Modules,\r\n  file?: Express.Multer.File\r\n) => {\r\n  const { courseId, moduleName, moduleDescription, materialForModule } =\r\n    moduleData;\r\n\r\n    const { user } = req;\r\n \r\n  try {\r\n    await createModuleTableIfNotExists();\r\n    console.log('Checking if moduleName already exists...');\r\n \r\n    // **Check if module already exists**\r\n    const [existingModule] = await bigquery.query({\r\n      query: `SELECT id FROM \\`teqcertify.lms.${process.env.TABLE_MODULE}\\` WHERE moduleName = @moduleName`,\r\n      params: { moduleName }\r\n    });\r\n \r\n    if (existingModule.length > 0) {\r\n      console.warn(`Modulename \"${moduleName}\" already exists.`);\r\n      return { success: false, message: 'ModuleName already exists.' };\r\n    }\r\n \r\n    console.log(\r\n      'Fetching the highest sequence number for the given courseId...'\r\n    );\r\n    const [maxSequenceResult] = await bigquery.query({\r\n      query: `SELECT MAX(sequence) as maxSequence FROM \\`teqcertify.lms.${process.env.TABLE_MODULE}\\` WHERE courseId = @courseId`,\r\n      params: { courseId }\r\n    });\r\n \r\n    const nextSequence = (maxSequenceResult[0]?.maxSequence || 0) + 1;\r\n    console.log(`Next sequence number: ${nextSequence}`);\r\n \r\n    console.log('Creating new Module...');\r\n    const moduleId = uuidv4();\r\n    const createdAt = new Date().toISOString();\r\n    const updatedAt = createdAt;\r\n    let uploadedDocumentUrl = '';\r\n \r\n    // **Upload file to GCS if provided**\r\n    if (file) {\r\n      try {\r\n        const fileName = `${moduleId}.${file.mimetype.split('/')[1]}`;\r\n        console.log('Uploading material file to GCS...');\r\n        uploadedDocumentUrl = await uploadModuleMaterialToGCS(\r\n          file.buffer,\r\n          fileName,\r\n          file.mimetype\r\n        );\r\n      } catch (uploadError) {\r\n        console.error('Error uploading file to GCS:', uploadError);\r\n        return { success: false, message: 'Failed to upload material file.' };\r\n      }\r\n    }\r\n \r\n    console.log('Inserting module info into BigQuery...');\r\n \r\n    await bigquery.query({\r\n      query: moduleQueries.createModule,\r\n      params: {\r\n        id: moduleId,\r\n        courseId,\r\n        moduleName,\r\n        moduleDescription,\r\n        sequence: nextSequence,\r\n        materialForModule: uploadedDocumentUrl,\r\n        createdBy: user?.id,\r\n        createdAt\r\n      }\r\n    });\r\n\r\n     // Audit log\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(), \r\n        entityType: \"Module\",\r\n        entityId: moduleId, \r\n        action: \"CREATE\",\r\n        previousData: null, \r\n        newData: JSON.stringify({\r\n          id: moduleId,\r\n          courseId,\r\n          moduleName,\r\n          moduleDescription,\r\n          sequence: nextSequence,\r\n          materialForModule: uploadedDocumentUrl\r\n        }), \r\n        performedBy: user?.id,\r\n        createdAt: createdAt\r\n      },\r\n      types: {\r\n        previousData: 'STRING',\r\n        newData: 'STRING',\r\n      }\r\n    });\r\n \r\n    console.log(`Module created successfully. ID: ${moduleId}`);\r\n    return {\r\n      success: true,\r\n      message: 'Module created successfully.',\r\n      moduleId,\r\n      materialForModule: uploadedDocumentUrl,\r\n      moduleData: { ...moduleData, sequence: nextSequence }\r\n    };\r\n  } catch (error) {\r\n    console.error('Error creating module:', error);\r\n    return {\r\n      success: false,\r\n      errors: [\r\n        error instanceof Error ? error.message : 'Unknown error occurred.'\r\n      ]\r\n    };\r\n  }\r\n};\r\n \r\n// **Get All Modules**\r\nexport const getAllModulesHandler = async () => {\r\n  await checkModuleTableExists();\r\n  try {\r\n    console.log('Fetching all modules...');\r\n    const [rows] = await bigquery.query({\r\n      query: moduleQueries.getAllModules\r\n    });\r\n    console.log(`Total Module found: ${rows.length}`);\r\n    return rows;\r\n  } catch (error) {\r\n    console.error('Error fetching all course:', error);\r\n    throw error;\r\n  }\r\n};\r\n \r\n// **Get Module By ID**\r\nexport const getModuleByIdHandler = async (moduleId: string) => {\r\n  await checkModuleTableExists();\r\n  try {\r\n    console.log(`Fetching module with ID: ${moduleId}`);\r\n    const [rows] = await bigquery.query({\r\n      query: moduleQueries.getModule,\r\n      params: { moduleId } // Ensure the param matches the query placeholder\r\n    });\r\n    if (!rows.length) {\r\n      console.log(`No module found with ID: ${moduleId}`);\r\n      return null;\r\n    }\r\n    console.log(`Module found:`, rows[0]);\r\n    return rows[0];\r\n  } catch (error) {\r\n    console.error(`Error fetching module with ID ${moduleId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n \r\nexport const updateModuleHandler = async (\r\n  req:any,\r\n  id: string,\r\n  updatedData: Modules,\r\n  file?: Express.Multer.File\r\n) => {\r\n\r\n  const { user } = req;\r\n\r\n  try {\r\n    console.log(`Updating module info for ID: ${id}`);\r\n \r\n    // Check if the table exists\r\n    const tableExists = await checkModuleTableExists();\r\n    if (!tableExists) {\r\n      return {\r\n        success: false,\r\n        message: `Table '${TABLE_MODULE}' does not exist.`\r\n      };\r\n    }\r\n \r\n    // Fetch existing module data\r\n    const [moduleResults] = await bigquery.query({\r\n      query: `SELECT * FROM \\`teqcertify.lms.${TABLE_MODULE}\\` WHERE id = @id`,\r\n      params: { id }\r\n    });\r\n \r\n    if (!Array.isArray(moduleResults) || moduleResults.length === 0) {\r\n      console.error(`module with ID ${id} is not registered.`);\r\n      return {\r\n        status: 400,\r\n        success: false,\r\n        errors: [`module with ID ${id} is not registered.`]\r\n      };\r\n    }\r\n \r\n    const module = moduleResults[0];\r\n    let newMaterialForModule = module.materialForModule;\r\n \r\n    // Handle material for module Update\r\n    if (file) {\r\n      try {\r\n        // Delete old file if exists\r\n        const oldFileName = module.materialForModule?.split('/').pop();\r\n        if (oldFileName) {\r\n          await deleteModuleMaterialFromGCS(oldFileName);\r\n        }\r\n \r\n        // Upload new file\r\n        const fileName = `${id}.${file.mimetype.split('/')[1]}`;\r\n        newMaterialForModule = await uploadModuleMaterialToGCS(\r\n          file.buffer,\r\n          fileName,\r\n          file.mimetype\r\n        );\r\n      } catch (uploadError) {\r\n        console.error('Error uploading material for module:', uploadError);\r\n        return {\r\n          success: false,\r\n          message: 'Failed to upload material for module.'\r\n        };\r\n      }\r\n    }\r\n \r\n    // Prepare update values\r\n    const queryParams: Record<string, any> = {\r\n      id,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    if (newMaterialForModule !== module.materialForModule) {\r\n      queryParams.materialForModule = newMaterialForModule;\r\n    }\r\n \r\n    Object.entries(updatedData).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        queryParams[key] = value;\r\n      }\r\n    });\r\n \r\n    // Construct dynamic update query\r\n    const updateFields = Object.keys(queryParams)\r\n      .filter((key) => key !== 'id')\r\n      .map((key) => `${key} = @${key}`)\r\n      .join(', ');\r\n \r\n    if (!updateFields) {\r\n      return { success: false, message: 'No fields provided for update.' };\r\n    }\r\n \r\n    // Execute update query\r\n    await bigquery.query({\r\n      query: `UPDATE \\`teqcertify.lms.${TABLE_MODULE}\\` SET ${updateFields} WHERE id = @id`,\r\n      params: queryParams\r\n    });\r\n\r\n    const auditLogParams = {\r\n          id: uuidv4(),\r\n          entityType: \"Module\",\r\n          entityId: id,\r\n          action: \"UPDATE\",\r\n          previousData: JSON.stringify(module),\r\n          newData: JSON.stringify(queryParams), \r\n          performedBy: user?.id, \r\n          createdAt: new Date().toISOString(),\r\n        };\r\n      \r\n        await bigquery.query({\r\n          query: auditQueries.insertAuditLog,\r\n          params: auditLogParams,\r\n          types: { previousData: \"STRING\", newData: \"STRING\" }, \r\n        });\r\n\r\n    console.log(`Module with ID ${id} updated successfully.`);\r\n    return {\r\n      // status: 200,\r\n      success: true,\r\n      message: `Module with ID ${id} updated successfully.`,\r\n      courseData: updatedData\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error updating module with ID ${id}:`, error);\r\n    return {\r\n      status: 500,\r\n      success: false,\r\n      errors: ['Internal server error occurred.']\r\n    };\r\n  }\r\n};\r\n \r\n \r\n// **Delete Module Handler**\r\nexport const deleteModuleHandler = async (req:any, id: string) => {\r\n  const { user } = req;\r\n\r\n  try {\r\n    console.log(`Deleting module with ID: ${id}`);\r\n \r\n    if (!(await checkModuleTableExists())) {\r\n      throw new Error(`Table '${TABLE_MODULE}' does not exist.`);\r\n    }\r\n \r\n    // Check if the module exists\r\n    const [rows] = await bigquery.query({\r\n      query: moduleQueries.getModule,\r\n      params: { moduleId: id } // ✅ Correctly maps to @moduleId\r\n    });\r\n   \r\n \r\n    if (!rows.length) {\r\n      throw new Error('Module not found'); // ❌ Instead of returning, throw an error\r\n    }\r\n \r\n    // Delete module material from GCS\r\n    const fileName = rows[0].materialForModule?.split('/').pop();\r\n    if (fileName) {\r\n      console.log('Deleting MaterialForModule...');\r\n      await deleteModuleMaterialFromGCS(fileName);\r\n    }\r\n \r\n    // Delete module from database\r\n    await bigquery.query({\r\n      query: moduleQueries.deleteModule,\r\n      params: { id: id } // ✅ Ensure correct parameter binding\r\n    });\r\n\r\n    // Insert Audit Log\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"Module\",\r\n        entityId: id,\r\n        action: \"DELETE\",\r\n        previousData: JSON.stringify(rows[0]),  // ✅ Correct previousData\r\n        newData: null,\r\n        performedBy: user?.id,\r\n        createdAt: new Date().toISOString(),\r\n      },\r\n      types: {\r\n        previousData: \"STRING\",\r\n        newData: \"STRING\",\r\n      },\r\n    });\r\n\r\n    console.log(`✅ Module with ID ${id} deleted successfully.`);\r\n \r\n  } catch (error) {\r\n    console.error(`❌ Error deleting module with ID ${id}:`, error);\r\n    throw error; // ✅ Now properly throwing the error so `deleteModuleEndpoint` can catch it\r\n  }\r\n};"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AAEA,IAAAG,cAAA,GAAAH,OAAA;AAIA,IAAAI,MAAA,GAAAJ,OAAA;AAEA,MAAMK,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACF,YAAY,IAAI,QAAQ;;AAEzD;AACA,MAAMG,sBAAsB,GAAG,MAAAA,CAAA,KAA8B;EAC3D,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjD,MAAM,CAACC,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAE;IACT,CAAC,CAAC;IACFJ,OAAO,CAACC,GAAG,CAAC,iBAAiBC,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE,CAAC;IAC/C,OAAOH,IAAI,CAACG,MAAM,GAAG,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;AACF,CAAC;;AAED;AACA,MAAMC,4BAA4B,GAAG,MAAAA,CAAA,KAA2B;EAC9D,MAAMC,MAAM,GAAG,MAAMV,sBAAsB,CAAC,CAAC;EAC7C,IAAI,CAACU,MAAM,EAAE;IACX,IAAI;MACFT,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,MAAME,kBAAQ,CAACC,KAAK,CAAC;QACnBA,KAAK,EAAE;AACf,yBAAyBP,OAAO,CAACC,GAAG,CAACY,UAAU,IAAIb,OAAO,CAACC,GAAG,CAACa,UAAU,IAAId,OAAO,CAACC,GAAG,CAACF,YAAY;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFI,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACnD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;AACF,CAAC;;AAED;AACO,MAAMK,mBAAmB,GAAG,MAAAA,CACjCC,GAAO,EACPC,UAAmB,EACnBC,IAA0B,KACvB;EACH,MAAM;IAAEC,QAAQ;IAAEC,UAAU;IAAEC,iBAAiB;IAAEC;EAAkB,CAAC,GAClEL,UAAU;EAEV,MAAM;IAAEM;EAAK,CAAC,GAAGP,GAAG;EAEtB,IAAI;IACF,MAAML,4BAA4B,CAAC,CAAC;IACpCR,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;IAEvD;IACA,MAAM,CAACoB,cAAc,CAAC,GAAG,MAAMlB,kBAAQ,CAACC,KAAK,CAAC;MAC5CA,KAAK,EAAE,mCAAmCP,OAAO,CAACC,GAAG,CAACF,YAAY,mCAAmC;MACrG0B,MAAM,EAAE;QAAEL;MAAW;IACvB,CAAC,CAAC;IAEF,IAAII,cAAc,CAAChB,MAAM,GAAG,CAAC,EAAE;MAC7BL,OAAO,CAACuB,IAAI,CAAC,eAAeN,UAAU,mBAAmB,CAAC;MAC1D,OAAO;QAAEO,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA6B,CAAC;IAClE;IAEAzB,OAAO,CAACC,GAAG,CACT,gEACF,CAAC;IACD,MAAM,CAACyB,iBAAiB,CAAC,GAAG,MAAMvB,kBAAQ,CAACC,KAAK,CAAC;MAC/CA,KAAK,EAAE,6DAA6DP,OAAO,CAACC,GAAG,CAACF,YAAY,+BAA+B;MAC3H0B,MAAM,EAAE;QAAEN;MAAS;IACrB,CAAC,CAAC;IAEF,MAAMW,YAAY,GAAG,CAACD,iBAAiB,CAAC,CAAC,CAAC,EAAEE,WAAW,IAAI,CAAC,IAAI,CAAC;IACjE5B,OAAO,CAACC,GAAG,CAAC,yBAAyB0B,YAAY,EAAE,CAAC;IAEpD3B,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,MAAM4B,QAAQ,GAAG,IAAAC,QAAM,EAAC,CAAC;IACzB,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC1C,MAAMC,SAAS,GAAGH,SAAS;IAC3B,IAAII,mBAAmB,GAAG,EAAE;;IAE5B;IACA,IAAIpB,IAAI,EAAE;MACR,IAAI;QACF,MAAMqB,QAAQ,GAAG,GAAGP,QAAQ,IAAId,IAAI,CAACsB,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QAC7DtC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChDkC,mBAAmB,GAAG,MAAM,IAAAI,wCAAyB,EACnDxB,IAAI,CAACyB,MAAM,EACXJ,QAAQ,EACRrB,IAAI,CAACsB,QACP,CAAC;MACH,CAAC,CAAC,OAAOI,WAAW,EAAE;QACpBzC,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEmC,WAAW,CAAC;QAC1D,OAAO;UAAEjB,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAkC,CAAC;MACvE;IACF;IAEAzB,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IAErD,MAAME,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAEsC,qBAAa,CAACC,YAAY;MACjCrB,MAAM,EAAE;QACNsB,EAAE,EAAEf,QAAQ;QACZb,QAAQ;QACRC,UAAU;QACVC,iBAAiB;QACjB2B,QAAQ,EAAElB,YAAY;QACtBR,iBAAiB,EAAEgB,mBAAmB;QACtCW,SAAS,EAAE1B,IAAI,EAAEwB,EAAE;QACnBb;MACF;IACF,CAAC,CAAC;;IAED;IACD,MAAM5B,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAE2C,mBAAY,CAACC,cAAc;MAClC1B,MAAM,EAAE;QACNsB,EAAE,EAAE,IAAAd,QAAM,EAAC,CAAC;QACZmB,UAAU,EAAE,QAAQ;QACpBC,QAAQ,EAAErB,QAAQ;QAClBsB,MAAM,EAAE,QAAQ;QAChBC,YAAY,EAAE,IAAI;QAClBC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAAC;UACtBX,EAAE,EAAEf,QAAQ;UACZb,QAAQ;UACRC,UAAU;UACVC,iBAAiB;UACjB2B,QAAQ,EAAElB,YAAY;UACtBR,iBAAiB,EAAEgB;QACrB,CAAC,CAAC;QACFqB,WAAW,EAAEpC,IAAI,EAAEwB,EAAE;QACrBb,SAAS,EAAEA;MACb,CAAC;MACD0B,KAAK,EAAE;QACLL,YAAY,EAAE,QAAQ;QACtBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;IAEFrD,OAAO,CAACC,GAAG,CAAC,oCAAoC4B,QAAQ,EAAE,CAAC;IAC3D,OAAO;MACLL,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,8BAA8B;MACvCI,QAAQ;MACRV,iBAAiB,EAAEgB,mBAAmB;MACtCrB,UAAU,EAAE;QAAE,GAAGA,UAAU;QAAE+B,QAAQ,EAAElB;MAAa;IACtD,CAAC;EACH,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO;MACLkB,OAAO,EAAE,KAAK;MACdkC,MAAM,EAAE,CACNpD,KAAK,YAAYC,KAAK,GAAGD,KAAK,CAACmB,OAAO,GAAG,yBAAyB;IAEtE,CAAC;EACH;AACF,CAAC;;AAED;AAAAkC,OAAA,CAAA/C,mBAAA,GAAAA,mBAAA;AACO,MAAMgD,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,MAAM7D,sBAAsB,CAAC,CAAC;EAC9B,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAM,CAACC,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAEsC,qBAAa,CAACmB;IACvB,CAAC,CAAC;IACF7D,OAAO,CAACC,GAAG,CAAC,uBAAuBC,IAAI,CAACG,MAAM,EAAE,CAAC;IACjD,OAAOH,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AAAAqD,OAAA,CAAAC,oBAAA,GAAAA,oBAAA;AACO,MAAME,oBAAoB,GAAG,MAAOjC,QAAgB,IAAK;EAC9D,MAAM9B,sBAAsB,CAAC,CAAC;EAC9B,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,4BAA4B4B,QAAQ,EAAE,CAAC;IACnD,MAAM,CAAC3B,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAEsC,qBAAa,CAACqB,SAAS;MAC9BzC,MAAM,EAAE;QAAEO;MAAS,CAAC,CAAC;IACvB,CAAC,CAAC;IACF,IAAI,CAAC3B,IAAI,CAACG,MAAM,EAAE;MAChBL,OAAO,CAACC,GAAG,CAAC,4BAA4B4B,QAAQ,EAAE,CAAC;MACnD,OAAO,IAAI;IACb;IACA7B,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrC,OAAOA,IAAI,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,iCAAiCuB,QAAQ,GAAG,EAAEvB,KAAK,CAAC;IAClE,MAAMA,KAAK;EACb;AACF,CAAC;AAACqD,OAAA,CAAAG,oBAAA,GAAAA,oBAAA;AAEK,MAAME,mBAAmB,GAAG,MAAAA,CACjCnD,GAAO,EACP+B,EAAU,EACVqB,WAAoB,EACpBlD,IAA0B,KACvB;EAEH,MAAM;IAAEK;EAAK,CAAC,GAAGP,GAAG;EAEpB,IAAI;IACFb,OAAO,CAACC,GAAG,CAAC,gCAAgC2C,EAAE,EAAE,CAAC;;IAEjD;IACA,MAAMsB,WAAW,GAAG,MAAMnE,sBAAsB,CAAC,CAAC;IAClD,IAAI,CAACmE,WAAW,EAAE;MAChB,OAAO;QACL1C,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,UAAU7B,YAAY;MACjC,CAAC;IACH;;IAEA;IACA,MAAM,CAACuE,aAAa,CAAC,GAAG,MAAMhE,kBAAQ,CAACC,KAAK,CAAC;MAC3CA,KAAK,EAAE,kCAAkCR,YAAY,mBAAmB;MACxE0B,MAAM,EAAE;QAAEsB;MAAG;IACf,CAAC,CAAC;IAEF,IAAI,CAACwB,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,IAAIA,aAAa,CAAC9D,MAAM,KAAK,CAAC,EAAE;MAC/DL,OAAO,CAACM,KAAK,CAAC,kBAAkBsC,EAAE,qBAAqB,CAAC;MACxD,OAAO;QACL0B,MAAM,EAAE,GAAG;QACX9C,OAAO,EAAE,KAAK;QACdkC,MAAM,EAAE,CAAC,kBAAkBd,EAAE,qBAAqB;MACpD,CAAC;IACH;IAEA,MAAM2B,MAAM,GAAGJ,aAAa,CAAC,CAAC,CAAC;IAC/B,IAAIK,oBAAoB,GAAGD,MAAM,CAACpD,iBAAiB;;IAEnD;IACA,IAAIJ,IAAI,EAAE;MACR,IAAI;QACF;QACA,MAAM0D,WAAW,GAAGF,MAAM,CAACpD,iBAAiB,EAAEmB,KAAK,CAAC,GAAG,CAAC,CAACoC,GAAG,CAAC,CAAC;QAC9D,IAAID,WAAW,EAAE;UACf,MAAM,IAAAE,0CAA2B,EAACF,WAAW,CAAC;QAChD;;QAEA;QACA,MAAMrC,QAAQ,GAAG,GAAGQ,EAAE,IAAI7B,IAAI,CAACsB,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QACvDkC,oBAAoB,GAAG,MAAM,IAAAjC,wCAAyB,EACpDxB,IAAI,CAACyB,MAAM,EACXJ,QAAQ,EACRrB,IAAI,CAACsB,QACP,CAAC;MACH,CAAC,CAAC,OAAOI,WAAW,EAAE;QACpBzC,OAAO,CAACM,KAAK,CAAC,sCAAsC,EAAEmC,WAAW,CAAC;QAClE,OAAO;UACLjB,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC;MACH;IACF;;IAEA;IACA,MAAMmD,WAAgC,GAAG;MACvChC,EAAE;MACFV,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IACD,IAAIuC,oBAAoB,KAAKD,MAAM,CAACpD,iBAAiB,EAAE;MACrDyD,WAAW,CAACzD,iBAAiB,GAAGqD,oBAAoB;IACtD;IAEAK,MAAM,CAACC,OAAO,CAACb,WAAW,CAAC,CAACc,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;MACpD,IAAIA,KAAK,KAAKC,SAAS,EAAE;QACvBN,WAAW,CAACI,GAAG,CAAC,GAAGC,KAAK;MAC1B;IACF,CAAC,CAAC;;IAEF;IACA,MAAME,YAAY,GAAGN,MAAM,CAACO,IAAI,CAACR,WAAW,CAAC,CAC1CS,MAAM,CAAEL,GAAG,IAAKA,GAAG,KAAK,IAAI,CAAC,CAC7BM,GAAG,CAAEN,GAAG,IAAK,GAAGA,GAAG,OAAOA,GAAG,EAAE,CAAC,CAChCO,IAAI,CAAC,IAAI,CAAC;IAEb,IAAI,CAACJ,YAAY,EAAE;MACjB,OAAO;QAAE3D,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAiC,CAAC;IACtE;;IAEA;IACA,MAAMtB,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAE,2BAA2BR,YAAY,UAAUuF,YAAY,iBAAiB;MACrF7D,MAAM,EAAEsD;IACV,CAAC,CAAC;IAEF,MAAMY,cAAc,GAAG;MACjB5C,EAAE,EAAE,IAAAd,QAAM,EAAC,CAAC;MACZmB,UAAU,EAAE,QAAQ;MACpBC,QAAQ,EAAEN,EAAE;MACZO,MAAM,EAAE,QAAQ;MAChBC,YAAY,EAAEE,IAAI,CAACC,SAAS,CAACgB,MAAM,CAAC;MACpClB,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACqB,WAAW,CAAC;MACpCpB,WAAW,EAAEpC,IAAI,EAAEwB,EAAE;MACrBb,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAED,MAAM9B,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAE2C,mBAAY,CAACC,cAAc;MAClC1B,MAAM,EAAEkE,cAAc;MACtB/B,KAAK,EAAE;QAAEL,YAAY,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAS;IACrD,CAAC,CAAC;IAENrD,OAAO,CAACC,GAAG,CAAC,kBAAkB2C,EAAE,wBAAwB,CAAC;IACzD,OAAO;MACL;MACApB,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,kBAAkBmB,EAAE,wBAAwB;MACrD6C,UAAU,EAAExB;IACd,CAAC;EACH,CAAC,CAAC,OAAO3D,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,iCAAiCsC,EAAE,GAAG,EAAEtC,KAAK,CAAC;IAC5D,OAAO;MACLgE,MAAM,EAAE,GAAG;MACX9C,OAAO,EAAE,KAAK;MACdkC,MAAM,EAAE,CAAC,iCAAiC;IAC5C,CAAC;EACH;AACF,CAAC;;AAGD;AAAAC,OAAA,CAAAK,mBAAA,GAAAA,mBAAA;AACO,MAAM0B,mBAAmB,GAAG,MAAAA,CAAO7E,GAAO,EAAE+B,EAAU,KAAK;EAChE,MAAM;IAAExB;EAAK,CAAC,GAAGP,GAAG;EAEpB,IAAI;IACFb,OAAO,CAACC,GAAG,CAAC,4BAA4B2C,EAAE,EAAE,CAAC;IAE7C,IAAI,EAAE,MAAM7C,sBAAsB,CAAC,CAAC,CAAC,EAAE;MACrC,MAAM,IAAIQ,KAAK,CAAC,UAAUX,YAAY,mBAAmB,CAAC;IAC5D;;IAEA;IACA,MAAM,CAACM,IAAI,CAAC,GAAG,MAAMC,kBAAQ,CAACC,KAAK,CAAC;MAClCA,KAAK,EAAEsC,qBAAa,CAACqB,SAAS;MAC9BzC,MAAM,EAAE;QAAEO,QAAQ,EAAEe;MAAG,CAAC,CAAC;IAC3B,CAAC,CAAC;IAGF,IAAI,CAAC1C,IAAI,CAACG,MAAM,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACvC;;IAEA;IACA,MAAM6B,QAAQ,GAAGlC,IAAI,CAAC,CAAC,CAAC,CAACiB,iBAAiB,EAAEmB,KAAK,CAAC,GAAG,CAAC,CAACoC,GAAG,CAAC,CAAC;IAC5D,IAAItC,QAAQ,EAAE;MACZpC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5C,MAAM,IAAA0E,0CAA2B,EAACvC,QAAQ,CAAC;IAC7C;;IAEA;IACA,MAAMjC,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAEsC,qBAAa,CAACiD,YAAY;MACjCrE,MAAM,EAAE;QAAEsB,EAAE,EAAEA;MAAG,CAAC,CAAC;IACrB,CAAC,CAAC;;IAEF;IACA,MAAMzC,kBAAQ,CAACC,KAAK,CAAC;MACnBA,KAAK,EAAE2C,mBAAY,CAACC,cAAc;MAClC1B,MAAM,EAAE;QACNsB,EAAE,EAAE,IAAAd,QAAM,EAAC,CAAC;QACZmB,UAAU,EAAE,QAAQ;QACpBC,QAAQ,EAAEN,EAAE;QACZO,MAAM,EAAE,QAAQ;QAChBC,YAAY,EAAEE,IAAI,CAACC,SAAS,CAACrD,IAAI,CAAC,CAAC,CAAC,CAAC;QAAG;QACxCmD,OAAO,EAAE,IAAI;QACbG,WAAW,EAAEpC,IAAI,EAAEwB,EAAE;QACrBb,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MACDwB,KAAK,EAAE;QACLL,YAAY,EAAE,QAAQ;QACtBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;IAEFrD,OAAO,CAACC,GAAG,CAAC,oBAAoB2C,EAAE,wBAAwB,CAAC;EAE7D,CAAC,CAAC,OAAOtC,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,mCAAmCsC,EAAE,GAAG,EAAEtC,KAAK,CAAC;IAC9D,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAACqD,OAAA,CAAA+B,mBAAA,GAAAA,mBAAA","ignoreList":[]}