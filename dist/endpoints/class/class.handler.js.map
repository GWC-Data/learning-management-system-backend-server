{"version":3,"file":"class.handler.js","names":["_uuid","require","_bigquery","_class","_classStorage","_audit","TABLE_CLASS","process","env","checkClassTableExists","console","log","rows","bigquery","query","length","error","Error","createClassTableIfNotExists","exists","PROJECT_ID","DATASET_ID","createClassHandler","req","classData","files","classTitle","classDescription","moduleId","assignmentName","totalMarks","user","existingClass","params","warn","success","message","classId","uuidv4","createdAt","Date","toISOString","uploadedMaterialUrl","uploadedAssignmentUrl","materialForClass","file","fileName","mimetype","split","uploadMaterialForClassToGCS","buffer","uploadError","assignmentFile","classQueries","createClass","id","createdBy","auditQueries","insertAuditLog","entityType","entityId","action","previousData","newData","JSON","stringify","performedBy","types","errors","exports","getAllClassesHandler","getAllClasses","getClassByIdHandler","getClass","getClassByModuleIdHandler","getClassByModuleId","updateClassHandler","updatedData","tableExists","classResults","Array","isArray","status","newMaterialForClassUrl","newAssignmentFileUrl","materialFile","oldFileName","pop","deleteClassFilesFromGCS","materialExt","originalname","materialFileName","oldAssignmentFileName","assignmentExt","assignmentFileName","queryParams","updatedBy","updatedAt","Object","entries","forEach","key","value","undefined","updateClass","deleteClassHandler","tableName"],"sources":["../../../src/endpoints/class/class.handler.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport { bigquery } from '../../config/bigquery';\r\nimport { classQueries } from '../../queries/class/class.queries';\r\nimport { Classes } from 'db';\r\nimport {\r\n  deleteClassFilesFromGCS,\r\n  uploadMaterialForClassToGCS\r\n} from '../../config/classStorage';\r\nimport { auditQueries } from 'queries/audit/audit.queries';\r\n\r\nconst TABLE_CLASS = process.env.TABLE_CLASS || 'classes';\r\n\r\n// Function to check if the class table exists\r\nconst checkClassTableExists = async (): Promise<boolean> => {\r\n  try {\r\n    console.log('Checking if class table exists...');\r\n    const [rows] = await bigquery.query({\r\n      query: `SELECT table_name FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` WHERE table_name = '${TABLE_CLASS}'`\r\n    });\r\n    console.log(`Table exists: ${rows.length > 0}`);\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error('Error checking table existence:', error);\r\n    throw new Error('Database error while checking table existence.');\r\n  }\r\n};\r\n\r\n// Function to create the class table if it does not exist\r\nconst createClassTableIfNotExists = async (): Promise<void> => {\r\n  const exists = await checkClassTableExists();\r\n  if (!exists) {\r\n    try {\r\n      console.log(\"Creating class table...\");\r\n      await bigquery.query({\r\n        query: `\r\n        CREATE TABLE \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_CLASS}\\` (\r\n          id STRING NOT NULL, \r\n          classTitle STRING NOT NULL,\r\n          classDescription STRING,\r\n          classRecordedLink STRING,\r\n          moduleId STRING,\r\n          assignmentName STRING,\r\n          assignmentFile STRING, -- Assignment file URL (optional)\r\n          materialForClass STRING, -- Material file URL\r\n          totalMarks INTEGER,\r\n          createdBy STRING NOT NULL,\r\n          updatedBy STRING,\r\n          createdAt TIMESTAMP NOT NULL, -- Set manually in query\r\n          updatedAt TIMESTAMP -- Updated manually\r\n        )\r\n      `,\r\n      });\r\n      console.log(\"Class table created successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error creating Class table:\", error);\r\n      throw new Error(\"Failed to create Class table.\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const createClassHandler = async (\r\n  req: any,\r\n  classData: Classes,\r\n  files?: { materialForClass?: Express.Multer.File; assignmentFile?: Express.Multer.File }\r\n) => {\r\n  const {\r\n    classTitle,\r\n    classDescription,\r\n    moduleId,\r\n    assignmentName,\r\n    totalMarks,\r\n  } = classData;\r\n  \r\n  const { user } = req;\r\n\r\n  try {\r\n    await createClassTableIfNotExists();\r\n    console.log(\"Checking if class table already exists...\");\r\n\r\n    // **Check if class already exists**\r\n    const [existingClass] = await bigquery.query({\r\n      query: `SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_CLASS}\\` WHERE classTitle = @classTitle`,\r\n      params: { classTitle },\r\n    });\r\n\r\n    if (existingClass.length > 0) {\r\n      console.warn(`Class Title \"${classTitle}\" already exists.`);\r\n      return { success: false, message: \"Class Title already exists.\" };\r\n    }\r\n\r\n    console.log(\"Creating new Class...\");\r\n    const classId = uuidv4();\r\n    const createdAt = new Date().toISOString();\r\n    let uploadedMaterialUrl = \"\";\r\n    let uploadedAssignmentUrl = \"\";\r\n\r\n    // **Upload Material for Class**\r\n    if (files?.materialForClass) {\r\n      try {\r\n        const file = files.materialForClass;\r\n        const fileName = `${classId}_material.${file.mimetype.split(\"/\")[1]}`;\r\n        console.log(\"Uploading materialForClass to GCS...\");\r\n        uploadedMaterialUrl = await uploadMaterialForClassToGCS(\r\n          file.buffer,\r\n          fileName,\r\n          file.mimetype\r\n        );\r\n      } catch (uploadError) {\r\n        console.error(\"Error uploading materialForClass to GCS:\", uploadError);\r\n        return {\r\n          success: false,\r\n          message: \"Failed to upload materialForClass.\",\r\n        };\r\n      }\r\n    }\r\n\r\n    // **Upload Assignment File**\r\n    if (files?.assignmentFile) {\r\n      try {\r\n        const file = files.assignmentFile;\r\n        const fileName = `${classId}_assignment.${file.mimetype.split(\"/\")[1]}`;\r\n        console.log(\"Uploading assignmentFile to GCS...\");\r\n        uploadedAssignmentUrl = await uploadMaterialForClassToGCS(\r\n          file.buffer,\r\n          fileName,\r\n          file.mimetype\r\n        );\r\n      } catch (uploadError) {\r\n        console.error(\"Error uploading assignmentFile to GCS:\", uploadError);\r\n        return {\r\n          success: false,\r\n          message: \"Failed to upload assignmentFile.\",\r\n        };\r\n      }\r\n    }\r\n\r\n    console.log(\"Inserting class info into BigQuery...\");\r\n\r\n    await bigquery.query({\r\n      query: classQueries.createClass,\r\n      params: {\r\n        id: classId,\r\n        classTitle,\r\n        classDescription,\r\n        moduleId,\r\n        assignmentName,\r\n        assignmentFile: uploadedAssignmentUrl, // Storing the assignment file URL\r\n        materialForClass: uploadedMaterialUrl, // Storing the material file URL\r\n        totalMarks,\r\n        createdBy: user?.id,\r\n        createdAt,\r\n      },\r\n    });\r\n\r\n    console.log(`Class created successfully. ID: ${classId}`);\r\n\r\n    // **Insert audit log**\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"Class\",\r\n        entityId: classId,\r\n        action: \"CREATE\",\r\n        previousData: null,\r\n        newData: JSON.stringify(classData),\r\n        performedBy: user?.id,\r\n        createdAt: new Date().toISOString(),\r\n      },\r\n      types: {\r\n        previousData: \"STRING\",\r\n        newData: \"STRING\",\r\n      },\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Class created successfully.\",\r\n      classId,\r\n      classTitle,\r\n      classDescription,\r\n      moduleId,\r\n      assignmentName,\r\n      assignmentFile: uploadedAssignmentUrl, // Storing the assignment file URL\r\n      materialForClass: uploadedMaterialUrl, // Storing the material file URL\r\n      totalMarks,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error creating class:\", error);\r\n    return {\r\n      success: false,\r\n      errors: [\r\n        error instanceof Error ? error.message : \"Unknown error occurred.\",\r\n      ],\r\n    };\r\n  }\r\n};\r\n\r\n\r\n\r\n// **Get All Classes**\r\nexport const getAllClassesHandler = async () => {\r\n  await checkClassTableExists();\r\n  try {\r\n    console.log('Fetching all class...');\r\n    const [rows] = await bigquery.query({\r\n      query: classQueries.getAllClasses\r\n    });\r\n    console.log(`Total class found: ${rows.length}`);\r\n    return rows;\r\n  } catch (error) {\r\n    console.error('Error fetching all class:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// **Get Class By ID**\r\nexport const getClassByIdHandler = async (classId: string) => {\r\n  await checkClassTableExists();\r\n  try {\r\n    console.log(`Fetching course with ID: ${classId}`);\r\n    const [rows] = await bigquery.query({\r\n      query: classQueries.getClass,\r\n      params: { classId } // Ensure the param matches the query placeholder\r\n    });\r\n    if (!rows.length) {\r\n      console.log(`No class found with ID: ${classId}`);\r\n      return null;\r\n    }\r\n    console.log(`Class found:`, rows[0]);\r\n    return rows[0];\r\n  } catch (error) {\r\n    console.error(`Error fetching class with ID ${classId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Handler to get classes by moduleId\r\nexport const getClassByModuleIdHandler = async (moduleId: string) => {\r\n  await checkClassTableExists();\r\n  try {\r\n    console.log(`Fetching classes for module ID: ${moduleId}`);\r\n    const [rows] = await bigquery.query({\r\n      query: classQueries.getClassByModuleId,\r\n      params: { moduleId },\r\n    });\r\n    if (!rows.length) {\r\n      console.log(`No classes found for module ID: ${moduleId}`);\r\n      return [];\r\n    }\r\n    console.log(`Classes found:`, rows);\r\n    return rows;\r\n  } catch (error) {\r\n    console.error(`Error fetching classes for module ID ${moduleId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateClassHandler = async (\r\n  req: any,\r\n  id: string,\r\n  updatedData: Classes,\r\n  files?: { materialForClass?: Express.Multer.File[]; assignmentFile?: Express.Multer.File[] }\r\n) => {\r\n  try {\r\n    const { user } = req;\r\n    console.log(`Updating class info for ID: ${id}`);\r\n    console.log(\"Files received:\", files);\r\n\r\n    // Check if table exists\r\n    const tableExists = await checkClassTableExists();\r\n    if (!tableExists) {\r\n      return {\r\n        success: false,\r\n        message: `Table '${process.env.TABLE_CLASS}' does not exist.`,\r\n      };\r\n    }\r\n\r\n    // Fetch existing class data\r\n    const [classResults] = await bigquery.query({\r\n      query: `SELECT * FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_CLASS}\\` WHERE id = @id`,\r\n      params: { id },\r\n    });\r\n\r\n    if (!Array.isArray(classResults) || classResults.length === 0) {\r\n      return {\r\n        status: 400,\r\n        success: false,\r\n        errors: [`Class with ID ${id} is not registered.`],\r\n      };\r\n    }\r\n\r\n    const classData = classResults[0];\r\n\r\n    let newMaterialForClassUrl = classData.materialForClass;\r\n    let newAssignmentFileUrl = classData.assignmentFile;\r\n\r\n    // Handle Material Update\r\n    if (files?.materialForClass?.length) {\r\n      const materialFile = files.materialForClass[0];\r\n\r\n      // Delete old material if exists\r\n      if (classData.materialForClass) {\r\n        const oldFileName = classData.materialForClass.split(\"/\").pop();\r\n        if (oldFileName) {\r\n          await deleteClassFilesFromGCS(oldFileName);\r\n        }\r\n      }\r\n\r\n      // Upload new material\r\n      const materialExt = materialFile.originalname.split(\".\").pop();\r\n      const materialFileName = `${id}_material.${materialExt}`;\r\n      newMaterialForClassUrl = await uploadMaterialForClassToGCS(materialFile.buffer, materialFileName, materialFile.mimetype);\r\n\r\n      updatedData.materialForClass = newMaterialForClassUrl;\r\n    }\r\n\r\n    // Handle Assignment File Update\r\n    if (files?.assignmentFile?.length) {\r\n      const assignmentFile = files.assignmentFile[0];\r\n\r\n      // Delete old assignment file if exists\r\n      if (classData.assignmentFile) {\r\n        const oldAssignmentFileName = classData.assignmentFile.split(\"/\").pop();\r\n        if (oldAssignmentFileName) {\r\n          await deleteClassFilesFromGCS(oldAssignmentFileName);\r\n        }\r\n      }\r\n\r\n      // Upload new assignment file\r\n      const assignmentExt = assignmentFile.originalname.split(\".\").pop();\r\n      const assignmentFileName = `${id}_assignment.${assignmentExt}`;\r\n      newAssignmentFileUrl = await uploadMaterialForClassToGCS(assignmentFile.buffer, assignmentFileName, assignmentFile.mimetype);\r\n\r\n      updatedData.assignmentFile = newAssignmentFileUrl;\r\n    }\r\n\r\n    // Prepare update values\r\n    const queryParams: Record<string, any> = {\r\n      classId: id,\r\n      updatedBy: user?.id,\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    // Add all fields from updatedData to queryParams\r\n    Object.entries(updatedData).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        queryParams[key] = value;\r\n      }\r\n    });\r\n\r\n    console.log(\"Update parameters:\", queryParams);\r\n\r\n    // Execute update query\r\n    await bigquery.query({\r\n      query: classQueries.updateClass,\r\n      params: queryParams,\r\n    });\r\n\r\n    // Audit log\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"Class\",\r\n        entityId: id,\r\n        action: \"UPDATE\",\r\n        previousData: JSON.stringify(classData),\r\n        newData: JSON.stringify(updatedData),\r\n        performedBy: user?.id,\r\n        createdAt: new Date().toISOString(),\r\n      },\r\n      types: {\r\n        previousData: \"STRING\",\r\n        newData: \"STRING\",\r\n      },\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      message: `Class with ID ${id} updated successfully.`,\r\n      classData: updatedData,\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error updating class with ID ${id}:`, error);\r\n    return {\r\n      status: 500,\r\n      success: false,\r\n      errors: [\"Internal server error occurred.\"],\r\n    };\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const deleteClassHandler = async (req: any, id: string) => {\r\n  const { user } = req;\r\n  \r\n  try {\r\n    console.log(`Deleting class with ID: ${id}`);\r\n    \r\n    // Ensure TABLE_CLASS is defined\r\n    const tableName = process.env.TABLE_CLASS;\r\n    if (!tableName) throw new Error(\"TABLE_CLASS environment variable is not set.\");\r\n\r\n    // Check if table exists before querying\r\n    if (!(await checkClassTableExists())) {\r\n      throw new Error(`Table '${tableName}' does not exist.`);\r\n    }\r\n\r\n    // Fetch class details\r\n    const [rows] = await bigquery.query({\r\n      query: `SELECT * FROM \\`teqcertify.lms.${tableName}\\` WHERE id = @id`,\r\n      params: { id }\r\n    });\r\n\r\n    if (!rows.length) {\r\n      console.log('Class not found.');\r\n      return { success: false, message: 'Class not found.' };\r\n    }\r\n\r\n    // Delete associated material if present\r\n    const fileName = rows[0].materialForClass?.split('/').pop();\r\n    if (fileName) {\r\n      console.log('Deleting Material for class...');\r\n      await deleteClassFilesFromGCS(fileName);\r\n    }\r\n    \r\n    // Delete class\r\n    await bigquery.query({\r\n      query: `DELETE FROM \\`teqcertify.lms.${tableName}\\` WHERE id = @id`,\r\n      params: { id }\r\n    });\r\n    console.log(`Class with ID ${id} deleted successfully.`);\r\n\r\n    // Insert Audit Log\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"Class\",\r\n        entityId: id,\r\n        action: \"DELETE\",\r\n        previousData: JSON.stringify(rows[0]),\r\n        newData: null,\r\n        performedBy: user?.id,\r\n        createdAt: new Date().toISOString(),\r\n      },\r\n      types: {\r\n        previousData: \"STRING\",\r\n        newData: \"STRING\",\r\n      },\r\n    });\r\n\r\n    return { success: true, message: `Class with ID ${id} deleted successfully.` };\r\n  } catch (error) {\r\n    console.error(`Error deleting Class with ID ${id}:`, error);\r\n    return { success: false, errors: [\"Internal server error occurred.\"] };\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]}