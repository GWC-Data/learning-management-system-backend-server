{"version":3,"file":"batchClassSchedules.handler.js","names":["_bigquery","require","_uuid","_batchClassSchedule","_batchTrainer","_audit","checkBatchClassScheduleTableExists","rows","bigquery","query","length","error","console","createBatchClassScheduleTableIfNotExists","exists","log","checkAssignmentTableExists","createAssignmentTableIfNotExists","checkBatchTrainerTableExists","createBatchTrainerTableIfNotExists","createBatchClassScheduleTableHandler","req","batchModule","batchId","moduleId","classId","trainerIds","startDate","startTime","endDate","endTime","meetingLink","batchClassScheduleId","uuidv4","user","batchExists","process","env","PROJECT_ID","DATASET_ID","TABLE_BATCH","params","Error","moduleExists","TABLE_MODULE","classExit","TABLE_CLASS","matchedTrainerIds","traineeResults","TABLE_USER","map","row","id","missingTrainerIds","filter","includes","join","assignmentEndDate","Date","setDate","getDate","batchClassScheduleQueries","createBatchClassSchedule","toISOString","createdBy","createdAt","batchTrainerInsertData","trainerId","updatedAt","TABLE_BATCH_TRAINER","auditLogParams","entityType","entityId","action","previousData","newData","JSON","stringify","performedBy","CreatedAt","auditQueries","insertAuditLog","types","message","exports","getAllBatchClassSchedulesHandler","getAllBatchClassSchedules","batchClassSchedules","batch","batchName","module","moduleName","class","classTitle","trainers","trainer","firstName","lastName","assignments","assignment","assignmentId","assignmentBatchId","traineeId","assignmentTraineeId","traineeFirstName","traineeLastName","getBatchClassScheduleDetailsHandler","options","getBatchClassScheduleDetails","getBatchClassScheduleByClassIdHandler","getBatchClassScheduleByClassId","batchModuleClass","duration","materialForModule","BatchTrainer","traineeName","getBatchClassScheduleByBatchIdHandler","getBatchClassScheduleByBatchId","batchClassSchedule","updateBatchClassScheduleHandler","updateBatchModule","existingRows","TABLE_BATCH_CLASS_SCHEDULE","existingBatchClassSchedule","newAssignmentEndDate","endDateObj","split","updateBatchClassSchedule","updatedBy","bulkUpdateAssignmentEndDate","traineeAssignments","assignmentEndDateStr","existingAssignment","TABLE_ASSIGNMENT","validTrainers","deleteBatchClassScheduleHandler","exist","existingRecords","existingData","batchTrainerQueries","deleteBatchTrainer","deleteBatchClassSchedule"],"sources":["../../../src/endpoints/batchClassSchedules/batchClassSchedules.handler.ts"],"sourcesContent":["import { bigquery } from '../../config/bigquery';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { batchClassScheduleQueries } from 'queries/batchClassSchedule/batchClassSchedule.queries';\r\nimport { batchTrainerQueries } from 'queries/batchTrainer/batchTrainer.queries';\r\nimport { auditQueries } from 'queries/audit/audit.queries';\r\nimport { BatchClassSchedule } from 'db';\r\n\r\n// The interface is now defined in your file\r\n\r\n// Function to check if the batchClassSchedule table exists\r\nconst checkBatchClassScheduleTableExists = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `\r\n        SELECT table_name \r\n        FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` \r\n        WHERE table_name = 'batchClassSchedules'\r\n      `\r\n    });\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking table existence:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to create the batchClassSchedule table if it does not exist\r\nconst createBatchClassScheduleTableIfNotExists = async () => {\r\n  const exists = await checkBatchClassScheduleTableExists();\r\n  if (!exists) {\r\n    try {\r\n      await bigquery.query({\r\n        query: `\r\n          CREATE TABLE \\`teqcertify.lms.batchClassSchedules\\` (\r\n            id STRING NOT NULL, \r\n            batchId STRING NOT NULL,\r\n            moduleId STRING NOT NULL,\r\n            classId STRING NOT NULL,\r\n            startDate DATE NOT NULL,\r\n            startTime TIME NOT NULL,\r\n            endDate DATE NOT NULL,\r\n            endTime TIME NOT NULL,\r\n            meetingLink STRING NOT NULL,\r\n            assignmentEndDate STRING,\r\n            createdBy STRING NOT NULL,\r\n            updatedBy STRING,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `\r\n      });\r\n      console.log(\"BatchClassSchedule table created successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error creating BatchClassSchedule table:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n\r\nconst checkAssignmentTableExists = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `\r\n        SELECT table_name \r\n        FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` \r\n        WHERE table_name = 'assignments'\r\n      `\r\n    });\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking table existence:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nconst createAssignmentTableIfNotExists = async () => {\r\n  const exists = await checkAssignmentTableExists();\r\n  if (!exists) {\r\n    try {\r\n      await bigquery.query({\r\n        query: `\r\n          CREATE TABLE \\`teqcertify.lms.assignments\\` (\r\n            id STRING NOT NULL, \r\n            batchId STRING NOT NULL,\r\n            classId STRING NOT NULL,\r\n            traineeId STRING NOT NULL,\r\n            assignmentEndDate STRING,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `\r\n      });\r\n      console.log(\"Assignments table created successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error creating Assignments table:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n\r\n// Function to check if the batchTrainer table exists\r\nconst checkBatchTrainerTableExists = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `\r\n        SELECT table_name \r\n        FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` \r\n        WHERE table_name = 'batchTrainers'\r\n      `\r\n    });\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking table existence:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//create batchClassSchedule table\r\nconst createBatchTrainerTableIfNotExists = async () => {\r\n  const exists = await checkBatchTrainerTableExists();\r\n  if (!exists) {\r\n    try {\r\n      await bigquery.query({\r\n        query: `\r\n          CREATE TABLE \\`teqcertify.lms.batchTrainers\\` (\r\n            batchClassScheduleId STRING NOT NULL,\r\n            trainerId STRING NOT NULL,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `\r\n      });\r\n      console.log(\"BatchTrainer table created successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error creating BatchTrainer table:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n//Create batchClassSchedule\r\n  export const createBatchClassScheduleTableHandler = async (req: any, batchModule: BatchClassSchedule) => {\r\n    await createBatchClassScheduleTableIfNotExists();\r\n    await createBatchTrainerTableIfNotExists();\r\n\r\n    const { batchId, moduleId, classId, trainerIds = [], startDate, startTime, endDate, endTime, meetingLink } = batchModule;\r\n    const batchClassScheduleId = uuidv4();\r\n    const { user } = req;\r\n    try {\r\n      // Step 1: Validate Batch Existence\r\n      const [batchExists] = await bigquery.query({\r\n        query: `\r\n          SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH}\\`\r\n          WHERE id = @batchId`,\r\n        params: { batchId },\r\n      });\r\n\r\n      if (batchExists.length === 0) {\r\n        throw new Error(`Batch with ID ${batchId} not found.`);\r\n      }\r\n\r\n      // Step 2: Validate Module Existence\r\n      const [moduleExists] = await bigquery.query({\r\n        query: `\r\n          SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_MODULE}\\`\r\n          WHERE id = @moduleId`,\r\n        params: { moduleId },\r\n      });\r\n\r\n      if (moduleExists.length === 0) {\r\n        throw new Error(`Module with ID ${moduleId} not found.`);\r\n      }\r\n\r\n      // Step 2: Validate Module Existence\r\n      const [classExit] = await bigquery.query({\r\n        query: `\r\n          SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_CLASS}\\`\r\n          WHERE id = @classId`,\r\n        params: { classId },\r\n      });\r\n\r\n      if (classExit.length === 0) {\r\n        throw new Error(`Class with ID ${classId} not found.`);\r\n      }\r\n\r\n      // Step 3: Validate Trainers\r\n      let matchedTrainerIds: string[] = [];\r\n      if (trainerIds.length > 0) {\r\n        const [traineeResults] = await bigquery.query({\r\n          query: `\r\n            SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_USER}\\`\r\n            WHERE id IN UNNEST(@trainerIds)`,\r\n          params: { trainerIds },\r\n        });\r\n\r\n        matchedTrainerIds = traineeResults.map((row: any) => row.id);\r\n\r\n        if (matchedTrainerIds.length !== trainerIds.length) {\r\n          const missingTrainerIds = trainerIds.filter(\r\n            (id: string) => !matchedTrainerIds.includes(id)\r\n          );\r\n          throw new Error(\r\n            `Some trainers were not found: ${missingTrainerIds.join(\", \")}`\r\n          );\r\n        }\r\n      };\r\n\r\n      const assignmentEndDate = new Date(endDate);\r\n      assignmentEndDate.setDate(assignmentEndDate.getDate() + 1); // Add 1 day\r\n\r\n      // Step 4: Insert BatchModule Data\r\n      await bigquery.query({\r\n        query: batchClassScheduleQueries.createBatchClassSchedule,\r\n        params: {\r\n          id: batchClassScheduleId,\r\n          batchId,\r\n          moduleId,\r\n          classId,\r\n          startDate,\r\n          startTime,\r\n          endDate,\r\n          endTime,\r\n          meetingLink,\r\n          assignmentEndDate: assignmentEndDate.toISOString(),\r\n          createdBy: user?.id,\r\n          createdAt: new Date().toISOString(),\r\n        },\r\n      });\r\n      console.log(\"BatchClassSchedule created successfully:\", batchClassScheduleId);\r\n\r\n      // Step 5: Bulk Insert Batch-Trainer Mappings\r\n      if (matchedTrainerIds.length > 0) {\r\n        const batchTrainerInsertData = matchedTrainerIds.map((trainerId) => ({\r\n          batchClassScheduleId,\r\n          trainerId,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString(),\r\n        }));\r\n\r\n        await bigquery.query({\r\n          query: `\r\n        INSERT INTO \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_TRAINER}\\`\r\n        (batchClassScheduleId, trainerId, createdAt, updatedAt)\r\n        SELECT\r\n          batchClassScheduleId,\r\n          trainerId,\r\n          TIMESTAMP(createdAt) AS createdAt,\r\n          TIMESTAMP(updatedAt) AS updatedAt\r\n        FROM UNNEST(@batchTrainerInsertData) AS batchTrainerInsertData\r\n        WHERE NOT EXISTS (\r\n          SELECT 1\r\n          FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_TRAINER}\\` bt\r\n          WHERE bt.batchClassScheduleId = @batchClassScheduleId AND bt.trainerId = batchTrainerInsertData.trainerId\r\n        )`,\r\n          params: {\r\n            batchTrainerInsertData,\r\n            batchClassScheduleId,\r\n          },\r\n        });\r\n\r\n        console.log(\"Batch-Trainer linked successfully.\");\r\n      }\r\n\r\n      // Insert Audit Log\r\n      const auditLogParams = {\r\n        id: uuidv4(),\r\n        entityType: \"BatchClassSchedule\",\r\n        entityId: batchClassScheduleId,\r\n        action: \"CREATE\",\r\n        previousData: null, // Since it's a new role, there's no previous data\r\n        newData: JSON.stringify({ batchClassScheduleId, batchId, moduleId, classId, startDate, startTime, endDate, endTime, meetingLink, assignmentEndDate }),\r\n        performedBy: user?.id,\r\n        CreatedAt: new Date().toISOString(),\r\n      };\r\n\r\n      await bigquery.query({\r\n        query: auditQueries.insertAuditLog,\r\n        params: auditLogParams,\r\n        types: { previousData: \"STRING\", newData: \"STRING\" },\r\n      });\r\n\r\n      return { id: batchClassScheduleId, ...batchModule, trainerIds, assignmentEndDate };\r\n    } catch (error: any) {\r\n      console.error(\"Error creating BatchClassSchedule:\", error.message, error);\r\n      throw new Error(`BatchClassSchedule creation failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n//Getall BatchClassSchedule\r\nexport const getAllBatchClassSchedulesHandler = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({ \r\n      query: batchClassScheduleQueries.getAllBatchClassSchedules \r\n    });\r\n\r\n    return {\r\n      batchClassSchedules: rows.map(row => ({\r\n        id: row.batchClassScheduleId,\r\n        batch: row.batchId ? { \r\n          id: row.batchId, \r\n          batchName: row.batchName \r\n        } : null,\r\n        module: row.moduleId ? { \r\n          id: row.moduleId, \r\n          moduleName: row.moduleName \r\n        } : null,\r\n        class: row.classId ? { \r\n          id: row.classId, \r\n          classTitle: row.classTitle \r\n        } : null,\r\n        startDate: row.startDate,\r\n        startTime: row.startTime,\r\n        endDate: row.endDate,\r\n        endTime: row.endTime,\r\n        meetingLink: row.meetingLink,\r\n        assignmentEndDate: row.assignmentEndDate,\r\n        trainers: row.trainers\r\n          ? row.trainers.map((trainer: { trainerId: any; firstName: any; lastName: any; }) => ({\r\n              id: trainer.trainerId || null,\r\n              firstName: trainer.firstName || null,\r\n              lastName: trainer.lastName || null\r\n            }))\r\n          : [],\r\n        assignments: row.assignments\r\n          ? row.assignments.map((assignment: { assignmentId: any; assignmentBatchId: any; assignmentTraineeId: any; traineeFirstName: any; traineeLastName: any; assignmentEndDate: any; }) => ({\r\n              id: assignment.assignmentId || null,\r\n              batchId: assignment.assignmentBatchId || null,\r\n              traineeId: assignment.assignmentTraineeId || null,\r\n              traineeFirstName: assignment.traineeFirstName || null,\r\n              traineeLastName: assignment.traineeLastName || null,\r\n              assignmentEndDate: assignment.assignmentEndDate || null\r\n            }))\r\n          : []\r\n      }))\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching batch module schedules:\", error);\r\n    return {\r\n      message: \"Error fetching batch module schedules\",\r\n      error\r\n    };\r\n  }\r\n};\r\n\r\n//GetBatchModule based on ID\r\nexport const getBatchClassScheduleDetailsHandler = async (id: string) => {\r\n  try {\r\n    console.log(\"Fetching BatchClassSchedule with ID:\", id);\r\n\r\n    const options = {\r\n      query: batchClassScheduleQueries.getBatchClassScheduleDetails,\r\n      params: { batchClassScheduleId: id }\r\n    };\r\n\r\n    const [rows] = await bigquery.query(options);\r\n\r\n    if (rows.length === 0) {\r\n      throw new Error(\"BatchClassSchedule not found\");\r\n    }\r\n\r\n    return {\r\n      batchClassSchedules: rows.map(row => ({\r\n        id: row.batchClassScheduleId,\r\n        batch: row.batchId ? { \r\n          id: row.batchId, \r\n          batchName: row.batchName \r\n        } : null,\r\n        module: row.moduleId ? { \r\n          id: row.moduleId, \r\n          moduleName: row.moduleName \r\n        } : null,\r\n        class: row.classId ? { \r\n          id: row.classId, \r\n          classTitle: row.classTitle \r\n        } : null,\r\n        startDate: row.startDate,\r\n        startTime: row.startTime,\r\n        endDate: row.endDate,\r\n        endTime: row.endTime,\r\n        meetingLink: row.meetingLink,\r\n        assignmentEndDate: row.assignmentEndDate,\r\n        trainers: row.trainers\r\n          ? row.trainers.map((trainer: { trainerId: any; firstName: any; lastName: any; }) => ({\r\n              id: trainer.trainerId || null,\r\n              firstName: trainer.firstName || null,\r\n              lastName: trainer.lastName || null\r\n            }))\r\n          : [],\r\n        assignments: row.assignments\r\n          ? row.assignments.map((assignment: { assignmentId: any; assignmentBatchId: any; assignmentTraineeId: any; traineeFirstName: any; traineeLastName: any; assignmentEndDate: any; }) => ({\r\n              id: assignment.assignmentId || null,\r\n              batchId: assignment.assignmentBatchId || null,\r\n              traineeId: assignment.assignmentTraineeId || null,\r\n              traineeFirstName: assignment.traineeFirstName || null,\r\n              traineeLastName: assignment.traineeLastName || null,\r\n              assignmentEndDate: assignment.assignmentEndDate || null\r\n            }))\r\n          : []\r\n      }))\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching batch module schedule details:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const getBatchClassScheduleByClassIdHandler = async (classId: string) => {\r\n  try {\r\n    console.log(\"Fetching BatchClassSchedule with classId:\", classId);\r\n\r\n    const options = {\r\n      query: batchClassScheduleQueries.getBatchClassScheduleByClassId,\r\n      params: { classId },\r\n    };\r\n\r\n    const [rows] = await bigquery.query(options);\r\n\r\n    if (rows.length === 0) {\r\n      throw new Error(\"No BatchClassSchedule found for this classId\");\r\n    }\r\n\r\n    const batchModuleClass = rows.map(row => ({\r\n      id: row.batchClassScheduleId,\r\n      batchId: row.batchId,\r\n      moduleId: row.module?.id || null,\r\n      classId: row.class?.id || null,\r\n      startDate: row.startDate,\r\n      startTime: row.startTime,\r\n      endDate: row.endDate,\r\n      endTime: row.endTime,\r\n      meetingLink: row.meetingLink,\r\n      duration: row.duration || null,\r\n      createdAt: row.createdAt,\r\n      updatedAt: row.updatedAt,\r\n\r\n      module: {\r\n        id: row.module?.id || null,\r\n        moduleName: row.module?.moduleName || null,\r\n        materialForModule: row.module?.materialForModule || null,\r\n      },\r\n\r\n      class: {\r\n        id: row.class?.id || null,\r\n        classTitle: row.class?.classTitle || null,\r\n      },\r\n\r\n      batch: {\r\n        id: row.batch?.id || null,\r\n        batchName: row.batch?.batchName || null,\r\n        startDate: row.batch?.startDate || null,\r\n        endDate: row.batch?.endDate || null,\r\n      },\r\n\r\n      trainers: row.trainers\r\n        ? row.trainers.map((trainer: { id: string; firstName: string; lastName: string; BatchTrainer: { batchClassScheduleId: string; trainerId: string; }; }) => ({\r\n            id: trainer.id,\r\n            firstName: trainer.firstName,\r\n            lastName: trainer.lastName,\r\n            BatchTrainer: {\r\n              batchClassScheduleId: trainer.BatchTrainer?.batchClassScheduleId || null,\r\n              trainerId: trainer.BatchTrainer?.trainerId || null,\r\n            },\r\n          }))\r\n        : [],\r\n\r\n      assignments: row.assignments\r\n        ? row.assignments.map((assignment: { \r\n            assignmentId: string; \r\n            assignmentBatchId: string; \r\n            assignmentTraineeId: string; \r\n            assignmentEndDate: string; \r\n            traineeFirstName: string;\r\n            traineeLastName: string;\r\n          }) => ({\r\n            assignmentId: assignment.assignmentId,\r\n            batchId: assignment.assignmentBatchId,\r\n            traineeId: assignment.assignmentTraineeId,\r\n            assignmentEndDate: assignment.assignmentEndDate,\r\n            traineeName: `${assignment.traineeFirstName} ${assignment.traineeLastName}`,\r\n          }))\r\n        : [],\r\n    }));\r\n\r\n    return { message: \"BatchClassSchedule found\", batchModuleClass };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error fetching batchClassSchedule by classId:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n//GetBatchClassSchedule by BatchId\r\nexport const getBatchClassScheduleByBatchIdHandler = async (batchId: string) => {\r\n  try {\r\n    console.log(\"Fetching Batch Module Schedule for Batch ID:\", batchId);\r\n\r\n    const options = {\r\n      query: batchClassScheduleQueries.getBatchClassScheduleByBatchId,\r\n      params: { batchId },\r\n    };\r\n\r\n    const [rows] = await bigquery.query(options);\r\n\r\n    if (rows.length === 0) {\r\n      return { message: \"Batch Module Schedule not found\", batchClassSchedule: [] };\r\n    }\r\n\r\n    // ✅ Transform result to match expected response structure\r\n    const batchClassSchedule = rows.map(row => ({\r\n      id: row.batchClassScheduleId,\r\n      batchId: row.batchId,\r\n      moduleId: row.module?.id || null,\r\n      classId: row.class?.id || null,\r\n      startDate: row.startDate,\r\n      startTime: row.startTime,\r\n      endDate: row.endDate,\r\n      endTime: row.endTime,\r\n      meetingLink: row.meetingLink,\r\n      duration: row.duration,\r\n      createdAt: row.createdAt,\r\n      updatedAt: row.updatedAt,\r\n      module: {\r\n        id: row.module?.id || null,\r\n        moduleName: row.module?.moduleName || null,\r\n        materialForModule: row.module?.materialForModule || null\r\n      },\r\n      class: {\r\n        id: row.class?.id || null,\r\n        classTitle: row.class?.classTitle || null,\r\n      },\r\n      batch: {\r\n        id: row.batch?.id || null,\r\n        batchName: row.batch?.batchName || null,\r\n        startDate: row.batch?.startDate || null,\r\n        endDate: row.batch?.endDate || null\r\n      },\r\n      trainers: row.trainers\r\n        ? row.trainers.map((trainer: { id: any; firstName: any; lastName: any; BatchTrainer: { batchClassScheduleId: any; trainerId: any; createdAt: any; updatedAt: any; }; }) => ({\r\n          id: trainer.id,\r\n          firstName: trainer.firstName,\r\n          lastName: trainer.lastName,\r\n          BatchTrainer: {\r\n            batchClassScheduleId: trainer.BatchTrainer?.batchClassScheduleId || null,\r\n            trainerId: trainer.BatchTrainer?.trainerId || null,\r\n            createdAt: trainer.BatchTrainer?.createdAt || null,\r\n            updatedAt: trainer.BatchTrainer?.updatedAt || null\r\n          }\r\n        }))\r\n        : [],\r\n      assignments: row.assignments\r\n        ? row.assignments.map((assignment: { id: any; batchId: any; assignmentTraineeId: any; traineeFirstName: any; traineeLastName: any; assignmentEndDate: any; createdAt: any; updatedAt: any; }) => ({\r\n          id: assignment.id,\r\n          batchId: assignment.batchId,\r\n          traineeId: assignment.assignmentTraineeId,\r\n          traineeFirstName: assignment.traineeFirstName || null,  // ✅ Added Trainee First Name\r\n          traineeLastName: assignment.traineeLastName || null,    // ✅ Added Trainee Last Name\r\n          assignmentEndDate: assignment.assignmentEndDate,\r\n          createdAt: assignment.createdAt,\r\n          updatedAt: assignment.updatedAt\r\n        }))\r\n        : []\r\n    }));\r\n\r\n    return { message: \"Batch Module Schedule retrieved successfully\", batchClassSchedule };\r\n  } catch (error) {\r\n    console.error(\"Error fetching Batch Module Schedule:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const updateBatchClassScheduleHandler = async (\r\n  req: any,\r\n  id: string,\r\n  updateBatchModule: Partial<BatchClassSchedule>\r\n) => {\r\n  const { user } = req;\r\n  await createAssignmentTableIfNotExists();\r\n\r\n  try {\r\n    console.log(`Updating batchClassSchedule with ID: ${id}`);\r\n\r\n    // Step 1: Fetch existing batch module schedule\r\n    const [existingRows] = await bigquery.query({\r\n      query: `\r\n        SELECT * \r\n        FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_CLASS_SCHEDULE}\\`\r\n        WHERE id = @batchClassScheduleId\r\n      `,\r\n      params: { batchClassScheduleId: id },\r\n    });\r\n\r\n    if (existingRows.length === 0) {\r\n      throw new Error(\"BatchClassSchedule not found\");\r\n    }\r\n\r\n    const existingBatchClassSchedule = existingRows[0];\r\n\r\n    // Step 2: Determine the correct assignmentEndDate\r\n    let newAssignmentEndDate = existingBatchClassSchedule.assignmentEndDate;\r\n    if (updateBatchModule.endDate) {\r\n      if (!existingBatchClassSchedule.endDate) {\r\n        // If creating a schedule, add +1 day\r\n        const endDateObj = new Date(updateBatchModule.endDate);\r\n        endDateObj.setDate(endDateObj.getDate() + 1);\r\n        newAssignmentEndDate = endDateObj.toISOString().split('T')[0]; // Convert to YYYY-MM-DD string format\r\n      } else {\r\n        // If updating, keep the same date\r\n        newAssignmentEndDate = updateBatchModule.endDate;\r\n      }\r\n    }\r\n\r\n    // Step 3: Update batch module schedule details\r\n    await bigquery.query({\r\n      query: batchClassScheduleQueries.updateBatchClassSchedule,\r\n      params: {\r\n        batchClassScheduleId: id,\r\n        moduleId: updateBatchModule.moduleId || existingBatchClassSchedule.moduleId,\r\n        classId: updateBatchModule.classId || existingBatchClassSchedule.classId,\r\n        startDate: updateBatchModule.startDate || existingBatchClassSchedule.startDate,\r\n        startTime: updateBatchModule.startTime || existingBatchClassSchedule.startTime,\r\n        endDate: updateBatchModule.endDate || existingBatchClassSchedule.endDate,\r\n        endTime: updateBatchModule.endTime || existingBatchClassSchedule.endTime,\r\n        meetingLink: updateBatchModule.meetingLink || existingBatchClassSchedule.meetingLink,\r\n        assignmentEndDate: newAssignmentEndDate, // Now properly formatted as a string\r\n        updatedBy: user?.id,\r\n        updatedAt: new Date().toISOString(),\r\n      },\r\n    });\r\n\r\n    // Step 4: Bulk update assignmentEndDate for all trainees in the batch\r\n    if (updateBatchModule.endDate) {\r\n      await bigquery.query({\r\n        query: batchClassScheduleQueries.bulkUpdateAssignmentEndDate,\r\n        params: {\r\n          batchId: existingBatchClassSchedule.batchId,\r\n          newAssignmentEndDate: newAssignmentEndDate,\r\n        },\r\n      });\r\n\r\n      console.log(\r\n        `Bulk updated assignmentEndDate to ${newAssignmentEndDate} for batch ${existingBatchClassSchedule.batchId}`\r\n      );\r\n    }\r\n\r\n    // Step 5: Handle trainee assignments\r\n    if (updateBatchModule.traineeAssignments && updateBatchModule.traineeAssignments.length > 0) {\r\n      console.log(\"Processing trainee assignments...\");\r\n\r\n      for (const assignment of updateBatchModule.traineeAssignments) {\r\n        // Format the assignment end date if needed\r\n        const assignmentEndDateStr = typeof assignment.assignmentEndDate === 'string' \r\n          ? assignment.assignmentEndDate \r\n          : new Date(assignment.assignmentEndDate).toISOString().split('T')[0];\r\n\r\n        // Check if assignment already exists for this batch, trainee, and class\r\n        const [existingAssignment] = await bigquery.query({\r\n          query: `\r\n            SELECT id \r\n            FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_ASSIGNMENT}\\`\r\n            WHERE \r\n              batchId = @batchId AND \r\n              traineeId = @traineeId AND \r\n              classId = @classId\r\n          `,\r\n          params: {\r\n            batchId: existingBatchClassSchedule.batchId,\r\n            traineeId: assignment.traineeId,\r\n            classId: existingBatchClassSchedule.classId,\r\n          },\r\n        });\r\n\r\n        if (existingAssignment.length === 0) {\r\n          // Create new assignment record\r\n          await bigquery.query({\r\n            query: `\r\n              INSERT INTO \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_ASSIGNMENT}\\`\r\n              (id, batchId, traineeId, classId, assignmentEndDate, createdAt, updatedAt)\r\n              VALUES (@id, @batchId, @traineeId, @classId, @assignmentEndDate, @createdAt, @updatedAt)\r\n            `,\r\n            params: {\r\n              id: uuidv4(),\r\n              batchId: existingBatchClassSchedule.batchId,\r\n              traineeId: assignment.traineeId,\r\n              classId: existingBatchClassSchedule.classId,\r\n              assignmentEndDate: assignmentEndDateStr,\r\n              createdAt: new Date().toISOString(),\r\n              updatedAt: new Date().toISOString(),\r\n            },\r\n          });\r\n          console.log(`Created new assignment record for trainee ${assignment.traineeId}`);\r\n        } else {\r\n          // Update existing assignment\r\n          await bigquery.query({\r\n            query: `\r\n              UPDATE \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_ASSIGNMENT}\\`\r\n              SET \r\n                assignmentEndDate = @assignmentEndDate,\r\n                updatedAt = @updatedAt\r\n              WHERE \r\n                batchId = @batchId AND \r\n                traineeId = @traineeId AND \r\n                classId = @classId\r\n            `,\r\n            params: {\r\n              batchId: existingBatchClassSchedule.batchId,\r\n              traineeId: assignment.traineeId,\r\n              classId: existingBatchClassSchedule.classId,\r\n              assignmentEndDate: assignmentEndDateStr,\r\n              updatedAt: new Date().toISOString(),\r\n            },\r\n          });\r\n          console.log(`Updated assignment for trainee ${assignment.traineeId}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Step 6: Handle trainer assignments (only if trainerIds are provided)\r\n    if (updateBatchModule.trainerIds && updateBatchModule.trainerIds.length > 0) {\r\n      console.log(\"Updating trainer mappings...\");\r\n\r\n      // Delete existing batch-trainer relationships\r\n      await bigquery.query({\r\n        query: `\r\n          DELETE FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_TRAINER}\\`\r\n          WHERE batchClassScheduleId = @batchClassScheduleId\r\n        `,\r\n        params: { batchClassScheduleId: id },\r\n      });\r\n\r\n      // Validate trainer IDs\r\n      const [validTrainers] = await bigquery.query({\r\n        query: `\r\n          SELECT id \r\n          FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_USER}\\`\r\n          WHERE id IN UNNEST(@trainerIds)\r\n        `,\r\n        params: { trainerIds: updateBatchModule.trainerIds },\r\n      });\r\n\r\n      const matchedTrainerIds = validTrainers.map((row: any) => row.id);\r\n      if (matchedTrainerIds.length !== updateBatchModule.trainerIds.length) {\r\n        throw new Error(\"Some trainerIds were not found.\");\r\n      }\r\n\r\n      // Insert new trainers\r\n      await bigquery.query({\r\n        query: `\r\n          INSERT INTO \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_TRAINER}\\`\r\n          (batchClassScheduleId, trainerId, createdAt, updatedAt)\r\n          SELECT \r\n            @batchClassScheduleId, \r\n            trainerId, \r\n            TIMESTAMP(@createdAt) AS createdAt, \r\n            TIMESTAMP(@updatedAt) AS updatedAt\r\n          FROM UNNEST(@trainerIds) AS trainerId\r\n        `,\r\n        params: {\r\n          batchClassScheduleId: id,\r\n          trainerIds: matchedTrainerIds,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString(),\r\n        },\r\n      });\r\n    }\r\n\r\n    // Step 7: Insert audit log\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"BatchClassSchedule\",\r\n        entityId: id,\r\n        action: \"UPDATE\",\r\n        previousData: JSON.stringify(existingBatchClassSchedule),\r\n        newData: JSON.stringify({ ...updateBatchModule, assignmentEndDate: newAssignmentEndDate }),\r\n        performedBy: user?.id,\r\n        createdAt: new Date().toISOString(),\r\n      },\r\n      types: { previousData: \"STRING\", newData: \"STRING\" },\r\n    });\r\n\r\n    console.log(`BatchClassSchedule with ID ${id} updated successfully.`);\r\n\r\n    return { id, ...updateBatchModule, assignmentEndDate: newAssignmentEndDate };\r\n  } catch (error) {\r\n    console.error(`Error updating batchClassSchedule ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//DeleteBatchClassSchedule\r\nexport const deleteBatchClassScheduleHandler = async (id: string, req: any) => {\r\n  if (!id) {\r\n    throw new Error(\"BatchClassSchedule ID is required\");\r\n  }\r\n\r\n  const exist = await checkBatchClassScheduleTableExists();\r\n  if (!exist) {\r\n    console.error(\"BatchClassSchedule table does not exist\");\r\n    throw new Error(\"BatchClassSchedule table does not exist\");\r\n  }\r\n\r\n  const { user } = req;\r\n\r\n  try {\r\n    console.log(`Attempting to delete BatchClassSchedule with ID: ${id}`);\r\n\r\n    // Fetch existing record before deletion (for audit logging)\r\n    const [existingRecords] = await bigquery.query({\r\n      query: `\r\n        SELECT * FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_CLASS_SCHEDULE}\\`\r\n        WHERE id = @id\r\n      `,\r\n      params: { id }\r\n    });\r\n\r\n    if (!existingRecords.length) {\r\n      throw new Error(\"BatchClassSchedule not found\");\r\n    }\r\n\r\n    const existingData = existingRecords[0];\r\n\r\n    await bigquery.query({\r\n      query: `\r\n        DELETE FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.assignments\\`\r\n        WHERE batchId IN (\r\n          SELECT batchId FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH_CLASS_SCHEDULE}\\`\r\n          WHERE id = @id\r\n        )\r\n      `,\r\n      params: { id }\r\n    });\r\n\r\n    // Step 1: Delete batch-trainers mappings first\r\n    await bigquery.query({\r\n      query: batchTrainerQueries.deleteBatchTrainer,\r\n      params: { batchClassScheduleId: id }, // ✅ Ensure parameter consistency\r\n    });\r\n\r\n    // Step 2: Delete the BatchClassSchedule\r\n    await bigquery.query({\r\n      query: batchClassScheduleQueries.deleteBatchClassSchedule,\r\n      params: { id }\r\n    });\r\n\r\n    console.log(`BatchClassSchedule with ID ${id} deleted successfully.`);\r\n\r\n    // Step 3: Insert Audit Log\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"BatchClassSchedule\",\r\n      entityId: id,\r\n      action: \"DELETE\",\r\n      previousData: JSON.stringify(existingData),\r\n      newData: null,\r\n      performedBy: user?.id || \"SYSTEM\",\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    console.log(\"Audit Log Params:\", auditLogParams);\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: {\r\n        previousData: \"STRING\",\r\n        newData: \"STRING\",\r\n      },\r\n    });\r\n\r\n    console.log(\"Audit Log inserted successfully.\");\r\n  } catch (error) {\r\n    console.error(`Error deleting BatchClassSchedule with ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}