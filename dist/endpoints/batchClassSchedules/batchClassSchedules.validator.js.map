{"version":3,"file":"batchClassSchedules.validator.js","names":["batchClassScheduleValidator","exports","batchId","in","exists","errorMessage","isString","moduleId","trainerIds","optional","isArray","custom","options","some","id","Error","startDate","isDate","endDate","startTime","endTime","meetingLink","updateBatchClassScheduleValidator","deleteBatchClassScheduleValidator"],"sources":["../../../src/endpoints/batchClassSchedules/batchClassSchedules.validator.ts"],"sourcesContent":["import { Schema } from 'express-validator';\r\n\r\nexport const batchClassScheduleValidator: Schema = {\r\n    batchId: {\r\n        in: 'body',\r\n        exists: {\r\n            errorMessage: 'Batch ID is required',\r\n        },\r\n        isString: {\r\n            errorMessage: 'Batch ID must be an string',\r\n        }\r\n    },\r\n    moduleId: {\r\n        in: 'body',\r\n        exists: {\r\n            errorMessage: 'Module ID is required',\r\n        },\r\n        isString: {\r\n            errorMessage: 'Module ID must be an string',\r\n        }\r\n    },\r\n    trainerIds: {\r\n        in: 'body',\r\n        optional: true,\r\n        isArray: {\r\n          errorMessage: 'Trainer IDs must be an array'\r\n        },\r\n        custom: {\r\n          options: (trainerIds: any) => {\r\n            if (trainerIds && trainerIds.some((id: any) => typeof id !== 'string')) {\r\n              throw new Error('Each trainer ID must be a string');\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n      },\r\n    startDate: {\r\n        in: 'body',\r\n        optional: true,\r\n        exists: {\r\n            errorMessage: 'StartDate is required',\r\n        },\r\n        isDate: {\r\n            errorMessage: 'StartDate must be a date',\r\n        }\r\n    },\r\n    endDate: {\r\n        in: 'body',\r\n        optional: true,\r\n        exists: {\r\n            errorMessage: 'EndDate is required',\r\n        },\r\n        isDate: {\r\n            errorMessage: 'EndDate must be a valid date',\r\n        }\r\n    },\r\n    startTime: {\r\n        in: 'body',\r\n        optional: true,\r\n        exists: {\r\n            errorMessage: 'StartTime is required',\r\n        }\r\n    },\r\n    endTime: {\r\n        in: 'body',\r\n        optional: true,\r\n        exists: {\r\n            errorMessage: 'EndTime is required',\r\n        }\r\n    },\r\n    meetingLink: {\r\n        in: 'body',\r\n        exists: {\r\n            errorMessage: 'MeetingLink is required',\r\n        },\r\n        isString: {\r\n            errorMessage: 'MeetingLink must be a string',\r\n        }\r\n    }\r\n};\r\n\r\nexport const updateBatchClassScheduleValidator: Schema = {\r\n    id: {\r\n        in: 'params',\r\n        exists: {\r\n            errorMessage: 'Batch Module Schedule ID is required',\r\n        },\r\n        isString: {\r\n            errorMessage: 'Batch Module Schedule ID must be an string',\r\n        }\r\n    },\r\n    batchId: {\r\n        in: 'body',\r\n        optional: true,\r\n        isString: {\r\n            errorMessage: 'Batch ID must be an string',\r\n        }\r\n    },\r\n    moduleId: {\r\n        in: 'body',\r\n        optional: true,\r\n        isString: {\r\n            errorMessage: 'Module ID must be an string',\r\n        }\r\n    },\r\n    trainerIds: {\r\n        in: 'body',\r\n        optional: true,\r\n        isArray: {\r\n          errorMessage: 'Trainer IDs must be an array'\r\n        },\r\n        custom: {\r\n          options: (trainerIds: any) => {\r\n            if (trainerIds && trainerIds.some((id: any) => typeof id !== 'string')) {\r\n              throw new Error('Each trainer ID must be a string');\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n      },\r\n    startDate: {\r\n        in: 'body',\r\n        optional: true,\r\n        exists: {\r\n            errorMessage: 'StartDate is required',\r\n        },\r\n        isDate: {\r\n            errorMessage: 'StartDate must be a date',\r\n        }\r\n    },\r\n    endDate: {\r\n        in: 'body',\r\n        optional: true,\r\n        exists: {\r\n            errorMessage: 'EndDate is required',\r\n        },\r\n        isDate: {\r\n            errorMessage: 'EndDate must be a valid date',\r\n        }\r\n    },\r\n    startTime: {\r\n        in: 'body',\r\n        optional: true,\r\n        exists: {\r\n            errorMessage: 'StartTime is required',\r\n        }\r\n    },\r\n    endTime: {\r\n        in: 'body',\r\n        optional: true,\r\n        exists: {\r\n            errorMessage: 'EndTime is required',\r\n        }\r\n    },\r\n    meetingLink: {\r\n        in: 'body',\r\n        optional: true,\r\n        exists: {\r\n            errorMessage: 'MeetingLink is required',\r\n        },\r\n        isString: {\r\n            errorMessage: 'MeetingLink must be a string',\r\n        }\r\n    }\r\n};\r\n\r\nexport const deleteBatchClassScheduleValidator: Schema = {\r\n    id: {\r\n        in: 'params',\r\n        exists: {\r\n            errorMessage: 'Batch Module Schedule ID is required',\r\n        },\r\n        isString: {\r\n            errorMessage: 'Batch Module Schedule ID must be an string',\r\n        }\r\n    }\r\n};"],"mappings":"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","ignoreList":[]}