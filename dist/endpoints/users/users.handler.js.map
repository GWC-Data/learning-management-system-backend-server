{"version":3,"file":"users.handler.js","names":["_bigquery","require","_user","_bcryptjs","_interopRequireDefault","_uuid","_userProfilePicStorage","_audit","TABLE_USERSAVEDJOBBOARD","process","env","TABLE_USER","checkUserTableExists","rows","bigquery","query","length","error","console","Error","createUserTableIfNotExists","log","checkUserSavedJobTableExists","createUserSavedJobTableIfNotExists","exists","PROJECT_ID","DATASET_ID","createUserHandler","req","userData","JSON","stringify","body","user","firstName","lastName","email","phoneNumber","password","dateOfJoining","roleId","success","errors","duplicateUsers","params","hashedPassword","bcrypt","hash","userId","uuidv4","createdAt","Date","toISOString","createdBy","id","userQueries","createUser","dateOfBirth","address","qualification","profilePic","accountStatus","types","updatedBy","auditLogParams","entityType","entityId","action","previousData","newData","performedBy","auditQueries","insertAuditLog","message","exports","getAllUsersHandler","getAllUsers","users","map","row","roleName","getUserByIdHandler","options","getUserById","updateUserForAdminHandler","updatedData","userQueryOptions","existingRows","existingUser","updateParams","updatedAt","updateUserForAdmin","updateUserForTraineeHandler","file","newProfilePicUrl","oldFileName","split","pop","deleteUserProfilePicFromGCS","fileName","mimetype","uploadUserProfilePicToGCS","buffer","uploadError","updateTraineeUser","updateUserOptions","deleteUserHandler","userToDelete","profilePicUrl","deleteUser","imgError"],"sources":["../../../src/endpoints/users/users.handler.ts"],"sourcesContent":["import { bigquery } from '../../config/bigquery';\r\nimport { userQueries } from '../../queries/users/user.queries';\r\nimport bcrypt from 'bcryptjs';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { User } from 'db';\r\nimport {\r\n  deleteUserProfilePicFromGCS,\r\n  uploadUserProfilePicToGCS\r\n} from '../../config/userProfilePicStorage';\r\nimport { auditQueries } from 'queries/audit/audit.queries';\r\n\r\nconst TABLE_USERSAVEDJOBBOARD =\r\n  process.env.TABLE_USERSAVEDJOBBOARD || 'userSavedJobBoard';\r\n\r\nconst TABLE_USER = process.env.TABLE_USER || 'users';\r\n\r\n// Function to check if the users table exists\r\nconst checkUserTableExists = async (): Promise<boolean> => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `SELECT table_name FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` WHERE table_name = '${TABLE_USER}'`\r\n    });\r\n\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error('Error checking table existence:', error);\r\n    throw new Error('Database error while checking table existence.');\r\n  }\r\n};\r\n\r\n// Function to create the users table if it does not exist\r\nconst createUserTableIfNotExists = async (): Promise<void> => {\r\n  if (!(await checkUserTableExists())) {\r\n    try {\r\n      await bigquery.query({\r\n        query: `\r\n          CREATE TABLE \\`teqcertify.lms.users\\` (\r\n            id STRING NOT NULL,\r\n            firstName STRING,\r\n            lastName STRING,\r\n            email STRING NOT NULL,\r\n            dateOfBirth DATE,\r\n            phoneNumber STRING,\r\n            password STRING NOT NULL,\r\n            dateOfJoining DATE,\r\n            address STRING,\r\n            qualification STRING,\r\n            profilePic STRING,\r\n            roleId STRING,\r\n            accountStatus STRING,\r\n            createdBy STRING NOT NULL,\r\n            updatedBy STRING,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `\r\n      });\r\n      console.log('Users table created successfully.');\r\n    } catch (error) {\r\n      console.error('Error creating users table:', error);\r\n      throw new Error('Failed to create users table.');\r\n    }\r\n  }\r\n};\r\n\r\n// Function to check if the userSavedJob table exists\r\nconst checkUserSavedJobTableExists = async (): Promise<boolean> => {\r\n  try {\r\n    console.log('Checking if userSavedJob table exists...');\r\n    const [rows] = await bigquery.query({\r\n      query: `SELECT table_name FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` WHERE table_name = '${TABLE_USERSAVEDJOBBOARD}'`\r\n    });\r\n    console.log(`Table exists: ${rows.length > 0}`);\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error('Error checking table existence:', error);\r\n    throw new Error('Database error while checking table existence.');\r\n  }\r\n};\r\n\r\n// Function to create the userSavedJob table if it does not exist\r\nconst createUserSavedJobTableIfNotExists = async (): Promise<void> => {\r\n  const exists = await checkUserSavedJobTableExists();\r\n  if (!exists) {\r\n    try {\r\n      console.log('Creating UsersavedJobBoard table...');\r\n      await bigquery.query({\r\n        query: `\r\n\r\n        CREATE TABLE \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_USERSAVEDJOBBOARD}\\` (\r\n            userId STRING NOT NULL,\r\n            jobId STRING NOT NULL,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )`\r\n      });\r\n      console.log('usersavedjobBoard table created successfully.');\r\n    } catch (error) {\r\n      console.error('Error creating usersavedjob table:', error);\r\n      throw new Error('Failed to create usersavedjob table.');\r\n    }\r\n  }\r\n};\r\n\r\nexport const createUserHandler = async (\r\n  req: any,\r\n  userData: any\r\n) => {\r\n  try {\r\n    console.log(\"Incoming Request Body:\", JSON.stringify(req.body, null, 2));\r\n \r\n    // Ensure required tables exist before inserting data\r\n    await createUserTableIfNotExists();\r\n \r\n    const { user } = req;\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      phoneNumber,\r\n      password,\r\n      dateOfJoining,\r\n      roleId,\r\n    } = userData;\r\n \r\n    if (!firstName || !lastName || !email || !password || !roleId) {\r\n      return {\r\n        success: false,\r\n        errors: [\"Missing required fields: firstName, lastName, email, password, or roleId.\"]\r\n      };\r\n    }\r\n \r\n    // **Check for duplicate email or phone**\r\n    const [duplicateUsers] = await bigquery.query({\r\n      query: `SELECT id FROM \\`teqcertify.lms.users\\` WHERE email = @email OR phoneNumber = @phoneNumber`,\r\n      params: { email, phoneNumber }\r\n    });\r\n \r\n    if (duplicateUsers.length > 0) {\r\n      return {\r\n        success: false,\r\n        errors: ['Email or phone number already exists.']\r\n      };\r\n    }\r\n \r\n    // **Hash the password**\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const userId = uuidv4();\r\n    const createdAt = new Date().toISOString();\r\n    const createdBy = user?.id || null;\r\n \r\n    // **Insert user into `users` table with NULL for empty values**\r\n    await bigquery.query({\r\n      query: userQueries.createUser,\r\n      params: {\r\n        id: userId,\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        dateOfBirth: null, // ðŸ”¹ Set to NULL\r\n        phoneNumber,\r\n        password: hashedPassword,\r\n        dateOfJoining: dateOfJoining || null,\r\n        address: null, // ðŸ”¹ NULL instead of empty string\r\n        qualification: null, // ðŸ”¹ NULL instead of empty string\r\n        profilePic: null, // ðŸ”¹ NULL instead of empty string\r\n        roleId,\r\n        accountStatus: \"active\", // ðŸ”¹ Default to \"active\"\r\n        createdBy,\r\n        createdAt\r\n      },\r\n      types: {\r\n        dateOfBirth: \"STRING\",\r\n        address: \"STRING\",\r\n        qualification: \"STRING\",\r\n        profilePic: \"STRING\",\r\n        updatedBy: \"STRING\"\r\n      }\r\n    });\r\n \r\n    console.log('User created successfully:', userId);\r\n \r\n    // ðŸ”¹ **Insert Audit Log**\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"User\",\r\n      entityId: userId,\r\n      action: \"CREATE\",\r\n      previousData: null,\r\n      newData: JSON.stringify({\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        phoneNumber,\r\n        roleId,\r\n        accountStatus: \"active\",\r\n        createdAt\r\n      }),\r\n      performedBy: createdBy,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n \r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\" }\r\n    });\r\n \r\n    return {\r\n      message: 'User created successfully.',\r\n      userId,\r\n      userData\r\n    };\r\n  } catch (error) {\r\n    console.error('Error creating user:', error);\r\n    return { success: false, errors: ['Internal server error occurred.'] };\r\n  }\r\n};\r\n\r\n\r\nexport const getAllUsersHandler = async () => {\r\n  try {\r\n    if (!(await checkUserTableExists()))\r\n      throw new Error(\"Table 'users' does not exist.\");\r\n\r\n    const [rows] = await bigquery.query({ query: userQueries.getAllUsers });\r\n\r\n    // Map user data\r\n    const users = rows.map((row: any) => ({\r\n      id: row.userId,\r\n      firstName: row.firstName,\r\n      lastName: row.lastName,\r\n      email: row.email,\r\n      phoneNumber: row.phoneNumber,\r\n      dateOfBirth: row.dateOfBirth,\r\n      dateOfJoining: row.dateOfJoining,\r\n      address: row.address,\r\n      qualification: row.qualification,\r\n      profilePic: row.profilePic,\r\n      roleId: row.roleId,\r\n      roleName: row.roleName ?? \"No Role Assigned\", // âœ… Ensures roleName is included\r\n      accountStatus: row.accountStatus\r\n}));\r\n\r\n    return users;\r\n  } catch (error) {\r\n    console.error(\"Error fetching all users:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const getUserByIdHandler = async (id: string) => {\r\n  try {\r\n    if (!(await checkUserTableExists())) {\r\n      throw new Error(\"Table 'users' does not exist.\");\r\n    }\r\n\r\n    const options = {\r\n      query: userQueries.getUserById,\r\n      params: { id } // âœ… Fixed incorrect reference to userId\r\n    };\r\n\r\n    const [rows] = await bigquery.query(options);\r\n\r\n    if (!rows || rows.length === 0) {\r\n      throw new Error(`User with ID ${id} not found.`);\r\n    }\r\n\r\n    // âœ… Define the user structure\r\n    const userData = {\r\n      id: rows[0].userId,\r\n      firstName: rows[0].firstName,\r\n      lastName: rows[0].lastName,\r\n      email: rows[0].email,\r\n      phoneNumber: rows[0].phoneNumber,\r\n      dateOfBirth: rows[0].dateOfBirth,\r\n      dateOfJoining: rows[0].dateOfJoining,\r\n      address: rows[0].address,\r\n      qualification: rows[0].qualification,\r\n      profilePic: rows[0].profilePic,\r\n      roleId: rows[0].roleId,\r\n      roleName: rows[0].roleName,\r\n      accountStatus: rows[0].accountStatus\r\n    };\r\n\r\n    return userData;\r\n  } catch (error) {\r\n    console.error(`Error fetching user with ID ${id}:`, error);\r\n    throw new Error(`Failed to fetch user data: ${error}`);\r\n  }\r\n};\r\n\r\n\r\nexport const updateUserForAdminHandler = async (\r\n  req: any,\r\n  userId: string,\r\n  updatedData: Partial<User>\r\n) => {\r\n  const { user } = req;\r\n  try {\r\n    // Fetch existing user data\r\n    const userQueryOptions = {\r\n      query: userQueries.getUserById,\r\n      params: { id: userId }\r\n    };\r\n \r\n    const [existingRows] = await bigquery.query(userQueryOptions);\r\n \r\n    if (existingRows.length === 0) {\r\n      throw new Error(`User with ID ${userId} not found.`);\r\n    }\r\n \r\n    const existingUser = existingRows[0];\r\n \r\n    // Prepare update values\r\n    const updateParams: Record<string, any> = {\r\n      id: userId,\r\n      firstName: updatedData.firstName || null,\r\n      lastName: updatedData.lastName || null,\r\n      email: updatedData.email || null,\r\n      phoneNumber: updatedData.phoneNumber || null,\r\n      dateOfBirth: updatedData.dateOfBirth || null,\r\n      // password: updatedData.password || null,\r\n      // dateOfJoining: updatedData.dateOfJoining || null,\r\n      qualification: updatedData.qualification || null,\r\n      address: updatedData.address || null,\r\n      roleId: updatedData.roleId || null,\r\n      accountStatus: updatedData.accountStatus || null,\r\n      updatedBy: user?.id,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n \r\n    console.log('Update User Params:', updateParams);\r\n \r\n    // Update user details\r\n    await bigquery.query({\r\n      query: userQueries.updateUserForAdmin,\r\n      params: updateParams\r\n    });\r\n \r\n    // Insert audit log\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: 'User',\r\n      entityId: userId,\r\n      action: 'UPDATE',\r\n      previousData: JSON.stringify(existingUser),\r\n      newData: JSON.stringify(updateParams),\r\n      performedBy: user?.id || null,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n \r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: 'STRING', newData: 'STRING' }\r\n    });\r\n \r\n    console.log('Audit log inserted successfully.');\r\n    console.log(`User ${userId} updated successfully.`);\r\n \r\n    return {\r\n      id: userId,\r\n      ...updatedData\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error updating user ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// UPDATE user for trainee\r\nexport const updateUserForTraineeHandler = async (\r\n  req: any,\r\n  userId: string,\r\n  updatedData: Partial<User>,\r\n  file?: Express.Multer.File\r\n) => {\r\n  const { user } = req;\r\n  try {\r\n    // Fetch existing user data\r\n    const userQueryOptions = {\r\n      query: userQueries.getUserById,\r\n      params: { id: userId }\r\n    };\r\n \r\n    const [existingRows] = await bigquery.query(userQueryOptions);\r\n \r\n    if (existingRows.length === 0) {\r\n      throw new Error(`User with ID ${userId} not found.`);\r\n    }\r\n \r\n    const existingUser = existingRows[0];\r\n    let newProfilePicUrl = existingUser.profilePic;\r\n \r\n    // Handle Profile Picture Update\r\n    if (file) {\r\n      try {\r\n        const oldFileName = existingUser.profilePic?.split('/').pop();\r\n        if (oldFileName) {\r\n          await deleteUserProfilePicFromGCS(oldFileName);\r\n        }\r\n \r\n        const fileName = `${userId}.${file.mimetype.split('/')[1]}`;\r\n        newProfilePicUrl = await uploadUserProfilePicToGCS(\r\n          file.buffer,\r\n          fileName,\r\n          file.mimetype\r\n        );\r\n      } catch (uploadError) {\r\n        console.error('Error uploading profile picture:', uploadError);\r\n        throw new Error('Failed to upload profile picture.');\r\n      }\r\n    }\r\n \r\n    // Prepare update values\r\n    const updateParams: Record<string, any> = {\r\n      id: userId,\r\n      firstName: updatedData.firstName || existingUser.firstName,\r\n      lastName: updatedData.lastName || existingUser.lastName,\r\n      dateOfBirth: updatedData.dateOfBirth || existingUser.dateOfBirth,\r\n      phoneNumber: updatedData.phoneNumber || existingUser.phoneNumber,\r\n      address: updatedData.address || existingUser.address,\r\n      qualification: updatedData.qualification || existingUser.qualification,\r\n      profilePic: newProfilePicUrl || existingUser.profilePic,\r\n      updatedBy: user?.id,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n \r\n    console.log('Update User Query:', userQueries.updateTraineeUser);\r\n    console.log('Update User Params:', updateParams);\r\n \r\n    // Update user details\r\n    const updateUserOptions = {\r\n      query: userQueries.updateTraineeUser, // Use new query reference\r\n      params: updateParams\r\n    };\r\n \r\n    await bigquery.query(updateUserOptions);\r\n \r\n    // Insert audit log\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: 'User',\r\n      entityId: userId,\r\n      action: 'UPDATE',\r\n      previousData: JSON.stringify(existingUser),\r\n      newData: JSON.stringify(updateParams),\r\n      performedBy: user?.id || null,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n \r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: 'STRING', newData: 'STRING' }\r\n    });\r\n \r\n    console.log('Audit log inserted successfully.');\r\n    console.log(`User ${userId} updated successfully.`);\r\n \r\n    return {\r\n      id: userId,\r\n      ...updatedData,\r\n      profilePic: newProfilePicUrl || existingUser.profilePic\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error updating user ${userId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteUserHandler = async (req: any, id: string) => {\r\n  const { user } = req;\r\n  try {\r\n    // Check if 'users' table exists\r\n    if (!(await checkUserTableExists())) {\r\n      throw new Error(\"Table 'users' does not exist.\");\r\n    }\r\n\r\n    // Fetch user details to check existence and get profilePic URL\r\n    const [rows] = await bigquery.query({\r\n      query: userQueries.getUserById,\r\n      params: { id },\r\n    });\r\n\r\n    if (!rows.length) {\r\n      return { success: false, message: 'User not found.' };\r\n    }\r\n\r\n    const userToDelete = rows[0];\r\n    const profilePicUrl = userToDelete.profilePic;\r\n\r\n    // Extract the filename from the profilePic URL if available\r\n    let fileName: string | null = null;\r\n\r\n    if (profilePicUrl) {\r\n      fileName = profilePicUrl.split('/').pop();\r\n      console.log('Filename:', fileName);\r\n    } else {\r\n      console.log('Profile picture is not set for this user.');\r\n    }\r\n\r\n    console.log('Filename:', fileName);\r\n\r\n    console.log(`User's saved jobs deleted successfully.`);\r\n\r\n    // **Insert Audit Log Before Deletion**\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"User\", // Correct entity type\r\n      entityId: id,\r\n      action: \"DELETE\",\r\n      previousData: JSON.stringify(userToDelete), // Store full user data before deletion\r\n      newData: null, // No new data after deletion\r\n      performedBy: user?.id || null, // Who performed this action\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { \r\n        previousData: \"STRING\", \r\n        newData: \"STRING\",  // Explicitly define null type\r\n        performedBy: \"STRING\" // Ensure performedBy is treated as a string\r\n      }\r\n    });    \r\n\r\n    console.log(`Audit log recorded for user deletion.`);\r\n\r\n    // **Delete user from database**\r\n    await bigquery.query({\r\n      query: userQueries.deleteUser,\r\n      params: { id },\r\n    });\r\n\r\n    console.log(`User record deleted.`);\r\n\r\n    // **Delete image from GCS if exists**\r\n    if (fileName) {\r\n      try {\r\n        await deleteUserProfilePicFromGCS(fileName);\r\n        console.log(`Profile picture ${fileName} deleted from GCS.`);\r\n      } catch (imgError) {\r\n        console.error(`Failed to delete profile picture ${fileName}:`, imgError);\r\n      }\r\n    }\r\n\r\n    console.log(`User with ID ${id} deleted successfully.`);\r\n\r\n    return {\r\n      success: true,\r\n      message: `User with ID ${id} deleted successfully.`,\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error deleting user with ID ${id}:`, error);\r\n    return { success: false, errors: ['Internal server error occurred.'] };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}