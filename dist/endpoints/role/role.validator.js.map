{"version":3,"file":"role.validator.js","names":["createRoleValidator","exports","name","in","exists","errorMessage","isString","isLength","options","max","description","optional","permissions","isArray","custom","some","perm","Error","updateRoleValidator","id","deleteRoleValidator","createPermissionValidator","action","groupName","updatePermissionValidator","deletePermissionValidator"],"sources":["../../../src/endpoints/role/role.validator.ts"],"sourcesContent":["import { Schema } from 'express-validator';\r\n\r\nexport const createRoleValidator: Schema = {\r\n  name: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'Role name is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Role name must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 255 },\r\n      errorMessage: 'Role name cannot exceed 255 characters'\r\n    }\r\n  },\r\n  description: {\r\n    in: 'body',\r\n    optional: true,\r\n    isString: {\r\n      errorMessage: 'Description must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 500 },\r\n      errorMessage: 'Description cannot exceed 500 characters'\r\n    }\r\n  },\r\n  permissions: {\r\n    in: 'body',\r\n    optional: true,\r\n    isArray: {\r\n      errorMessage: 'Permissions must be an array of actions'\r\n    },\r\n    custom: {\r\n      options: (permissions: any) => {\r\n        if (permissions && permissions.some((perm: any) => typeof perm !== 'string')) {\r\n          throw new Error('Each permission must be a string');\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const updateRoleValidator: Schema = {\r\n  id: {\r\n    in: 'params',\r\n    exists: {\r\n      errorMessage: 'Role ID is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Role ID must be an string'\r\n    }\r\n  },\r\n  name: {\r\n    in: 'body',\r\n    optional: true,\r\n    isString: {\r\n      errorMessage: 'Role name must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 255 },\r\n      errorMessage: 'Role name cannot exceed 255 characters'\r\n    }\r\n  },\r\n  description: {\r\n    in: 'body',\r\n    optional: true,\r\n    isString: {\r\n      errorMessage: 'Description must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 500 },\r\n      errorMessage: 'Description cannot exceed 500 characters'\r\n    }\r\n  },\r\n  permissions: {\r\n    in: 'body',\r\n    optional: true,\r\n    isArray: {\r\n      errorMessage: 'Permissions must be an array of actions'\r\n    },\r\n    custom: {\r\n      options: (permissions: any) => {\r\n        if (permissions && permissions.some((perm: any) => typeof perm !== 'string')) {\r\n          throw new Error('Each permission must be a string');\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const deleteRoleValidator: Schema = {\r\n  id: {\r\n    in: 'params',\r\n    exists: {\r\n      errorMessage: 'Role ID is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Role ID must be an string'\r\n    }\r\n  }\r\n};\r\n\r\nexport const createPermissionValidator: Schema = {\r\n  action: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'Action is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Action must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 255 },\r\n      errorMessage: 'Action cannot exceed 255 characters'\r\n    }\r\n  },\r\n  description: {\r\n    in: 'body',\r\n    isLength: {\r\n      options: { max: 255 },\r\n      errorMessage: 'Description cannot exceed 255 characters'\r\n    }\r\n  },\r\n  groupName: {\r\n    in: 'body',\r\n    exists: {\r\n      errorMessage: 'Group Name is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Group Name  must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 255 },\r\n      errorMessage: 'Group Name  cannot exceed 255 characters'\r\n    }\r\n  }\r\n};\r\n\r\nexport const updatePermissionValidator: Schema = {\r\n  action: {\r\n    in: 'body',\r\n    optional: true,\r\n    isString: {\r\n      errorMessage: 'Action must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 255 },\r\n      errorMessage: 'Action cannot exceed 255 characters'\r\n    }\r\n  }\r\n};\r\n\r\nexport const deletePermissionValidator: Schema = {\r\n  action: {\r\n    in: 'params',\r\n    exists: {\r\n      errorMessage: 'Permission action is required'\r\n    },\r\n    isString: {\r\n      errorMessage: 'Permission action must be a string'\r\n    },\r\n    isLength: {\r\n      options: { max: 255 },\r\n      errorMessage: 'Permission action cannot exceed 255 characters'\r\n    }\r\n  }\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]}