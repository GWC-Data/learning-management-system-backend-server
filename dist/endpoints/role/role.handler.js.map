{"version":3,"file":"role.handler.js","names":["_role","require","_bigquery","_permission","_uuid","_audit","_rolePermission","checkAuditTableExists","rows","bigquery","query","length","error","console","createAuditTableIfNotExists","tableExists","log","process","env","PROJECT_ID","DATASET_ID","TABLE_AUDIT","checkRoleTableExists","createRoleTableIfNotExists","exists","checkRolePermissionTableExists","createRolePermissionsTableIfNotExists","createRoleTable","req","role","name","description","permissions","id","uuidv4","user","createdBy","createdAt","Date","toISOString","roleInsertOptions","roleQueries","createRole","params","result","rolePermissionQueries","getPermissionIds","actions","Error","matchedPermissions","map","row","missingPermissions","filter","action","some","perm","join","permissionId","insertRolePermissions","roleId","updatedAt","auditQueries","insertAuditLog","entityType","entityId","previousData","newData","JSON","stringify","performedBy","types","message","exports","getAllRolesHandler","getRoles","roleMap","Map","forEach","roleName","roleDescription","permissionAction","permissionGroupName","has","set","get","push","groupName","Array","from","values","getRoleDetailsHandler","options","getRoleDetails","roleData","updateRolesHandler","updateRole","roleOptions","existingRows","existingRole","updatedBy","updateRoleOptions","deletePermissionsOptions","deleteRolePermissions","insertQuery","auditLogParams","deleteRoleHandler","exist","status","deleteRole","checkPermissionTableExists","createPermissionTableIfNotExists","createPermissionHandler","permission","permissionQueries","createPermission","getAllPermissionHandler","getAllPermission","updatePermissionHandler","updatedPermission","fetchOptions","existingPermission","finalUpdatedPermission","updateOptions","updatePermission","deletePermissionHandler","deleteOptions","deletePermission"],"sources":["../../../src/endpoints/role/role.handler.ts"],"sourcesContent":["import { roleQueries } from 'queries/role/role.queries';\r\nimport { bigquery } from '../../config/bigquery';\r\nimport { permissionQueries } from '../../queries/permissions/permission.queries';\r\nimport { Permission } from 'db';\r\nimport { Role } from 'db';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { auditQueries } from 'queries/audit/audit.queries';\r\nimport { rolePermissionQueries } from '../../queries/rolePermission/rolePermission.queries';\r\n\r\n\r\n// Function to check if the audit table exists\r\nconst checkAuditTableExists = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `\r\n        SELECT table_name \r\n        FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` \r\n        WHERE table_name = 'audit'\r\n      `\r\n    });\r\n\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking table existence:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n // Function to create the audit table if it does not exist\r\n const createAuditTableIfNotExists = async () => {\r\n  try {\r\n    const tableExists = await checkAuditTableExists();\r\n\r\n    if (tableExists) {\r\n      console.log(\"Audit table already exists.\");\r\n      return;\r\n    }\r\n\r\n    await bigquery.query({\r\n      query: `\r\n        CREATE TABLE \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_AUDIT}\\` (\r\n          id STRING NOT NULL,\r\n          entityType STRING NOT NULL,\r\n          entityId STRING NOT NULL, \r\n          action STRING NOT NULL,\r\n          previousData STRING, \r\n          newData STRING,\r\n          performedBy STRING, \r\n          createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  \r\n          updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP  \r\n        )\r\n      `,\r\n    });\r\n\r\n    console.log(\"Audit table created successfully.\");\r\n  } catch (error) {\r\n    console.error(\"Error creating Audit table:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Function to check if the role table exists\r\nconst checkRoleTableExists = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `\r\n        SELECT table_name \r\n        FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` \r\n        WHERE table_name = 'roles'\r\n      `\r\n    });\r\n\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking table existence:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Function to create the role table if it does not exist\r\nconst createRoleTableIfNotExists = async () => {\r\n  const exists = await checkRoleTableExists();\r\n  if (!exists) {\r\n    try {\r\n      await bigquery.query({\r\n        query: `\r\n          CREATE TABLE \\`teqcertify.lms.roles\\` (\r\n            id STRING NOT NULL, \r\n            name STRING NOT NULL,\r\n            description STRING NOT NULL,\r\n            createdBy STRING NOT NULL,\r\n            updatedBy STRING,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `\r\n      });\r\n      console.log(\"Roles table created successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error creating Roles table:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Function to check if the rolepermission table exists\r\nconst checkRolePermissionTableExists = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `\r\n        SELECT table_name \r\n        FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` \r\n        WHERE table_name = 'rolePermissions'\r\n      `\r\n    });\r\n\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking table existence:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nconst createRolePermissionsTableIfNotExists = async () => {\r\n  const exists = await checkRolePermissionTableExists(); // Function to check existence\r\n  if (!exists) {\r\n    try {\r\n      await bigquery.query({\r\n        query: `\r\n          CREATE TABLE \\`teqcertify.lms.rolePermissions\\` ( \r\n            roleId STRING NOT NULL,\r\n            permissionId STRING NOT NULL,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `\r\n      });\r\n      console.log(\"rolePermissions table created successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error creating rolePermissions table:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n//create role table\r\nexport const createRoleTable = async (req: any, role: Role) => {\r\n  await createRoleTableIfNotExists();\r\n  await createRolePermissionsTableIfNotExists();\r\n\r\n  const { name, description, permissions } = role;\r\n  const id = uuidv4();\r\n  const { user } = req;\r\n\r\n  try {\r\n    // Ensure createdBy is valid\r\n    const createdBy = user?.id || null;\r\n    const createdAt = new Date().toISOString();\r\n\r\n    // Insert Role\r\n    const roleInsertOptions = {\r\n      query: roleQueries.createRole,\r\n      params: {\r\n        id,\r\n        name,\r\n        description,\r\n        createdBy,\r\n        createdAt,\r\n      },\r\n    };\r\n\r\n    console.log(\"Inserting role:\", roleInsertOptions);\r\n    await bigquery.query(roleInsertOptions);\r\n    console.log(\"Role inserted successfully:\", id);\r\n\r\n    // ✅ Fetch Permission IDs After Role Insertion\r\n    if (permissions.length > 0) {\r\n      const [result] = await bigquery.query({\r\n        query: rolePermissionQueries.getPermissionIds,\r\n        params: { actions: permissions },\r\n      });\r\n\r\n      console.log(\"Fetched permission IDs:\", result);\r\n\r\n      if (!result || result.length === 0) {\r\n        throw new Error(\"No matching permissions found in DB.\");\r\n      }\r\n\r\n      const matchedPermissions = result.map((row: any) => row.id);\r\n      if (matchedPermissions.length !== permissions.length) {\r\n        const missingPermissions = permissions.filter(\r\n          (action) => !result.some((perm: any) => perm.action === action)\r\n        );\r\n        throw new Error(\r\n          `Some permissions were not found: ${missingPermissions.join(\", \")}`\r\n        );\r\n      }\r\n\r\n      // ✅ Insert Role-Permission Mappings\r\n      for (const permissionId of matchedPermissions) {\r\n        await bigquery.query({\r\n          query: rolePermissionQueries.insertRolePermissions,\r\n          params: {\r\n            roleId: id,\r\n            permissionId,\r\n            createdAt,\r\n            updatedAt: createdAt,\r\n          },\r\n        });\r\n      }\r\n      console.log(\"Role-Permissions linked successfully.\");\r\n    }\r\n\r\n    // ✅ Insert Audit Log with Explicit Type Handling\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"Role\",\r\n        entityId: id,\r\n        action: \"CREATE\",\r\n        previousData: null, // Ensure correct type handling below\r\n        newData: JSON.stringify({ id, name, description, permissions }),\r\n        performedBy: createdBy,\r\n        createdAt\r\n      },\r\n      types: {\r\n        previousData: \"STRING\", // Explicitly define type for null\r\n        newData: \"STRING\"\r\n      },\r\n    });\r\n\r\n    return { id, name, description, permissions };\r\n  } catch (error) {\r\n    console.error(\"Error creating Role:\", error);\r\n    return { message: \"Error creating Role\", error };\r\n  }\r\n};\r\n\r\nexport const getAllRolesHandler = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({ query: roleQueries.getRoles });\r\n\r\n    // Transform data to group permissions under each role\r\n    const roleMap = new Map();\r\n\r\n    rows.forEach((row: any) => {\r\n      const { roleId, roleName, roleDescription, permissionAction, permissionGroupName } = row;\r\n\r\n      if (!roleMap.has(roleId)) {\r\n        roleMap.set(roleId, {\r\n          id: roleId,\r\n          name: roleName,\r\n          description: roleDescription,\r\n          permissions: []\r\n        });\r\n      }\r\n\r\n      // Only add permissions if they exist\r\n      if (permissionAction && permissionGroupName) {\r\n        roleMap.get(roleId).permissions.push({\r\n          action: permissionAction,\r\n          groupName: permissionGroupName\r\n        });\r\n      }\r\n    });\r\n\r\n    return Array.from(roleMap.values());\r\n  } catch (error) {\r\n    console.error(\"Error fetching all roles:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getRoleDetailsHandler = async (roleId: string) => {\r\n  try {\r\n    const options = {\r\n      query: roleQueries.getRoleDetails,\r\n      params: { roleId }\r\n    };\r\n\r\n    const [rows] = await bigquery.query(options);\r\n\r\n    if (rows.length === 0) {\r\n      throw new Error(\"Role not found\");\r\n    }\r\n\r\n    // Define the expected type for role data\r\n    const roleData: {\r\n      id: string;\r\n      name: string;\r\n      description: string;\r\n      permissions: { action: string; groupName: string }[];\r\n    } = {\r\n      id: rows[0].roleId,\r\n      name: rows[0].roleName,\r\n      description: rows[0].roleDescription,\r\n      permissions: []\r\n    };\r\n\r\n    rows.forEach((row: any) => {\r\n      if (row.permissionAction && row.permissionGroupName) {\r\n        roleData.permissions.push({\r\n          action: row.permissionAction,\r\n          groupName: row.permissionGroupName\r\n        });\r\n      }\r\n    });\r\n\r\n    return roleData;\r\n  } catch (error) {\r\n    console.error(\"Error fetching role details:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n//update role\r\nexport const updateRolesHandler = async (\r\n  req: any,\r\n  id: string,\r\n  updateRole: Partial<Role>\r\n) => {\r\n  const { user } = req;\r\n\r\n  try {\r\n    // Fetch existing role data\r\n    const roleOptions = {\r\n      query: roleQueries.getRoleDetails,\r\n      params: { roleId: id },\r\n    };\r\n\r\n    const [existingRows] = await bigquery.query(roleOptions);\r\n\r\n    if (!existingRows || existingRows.length === 0) {\r\n      throw new Error(\"Role not found\");\r\n    }\r\n\r\n    const existingRole = existingRows[0];\r\n    console.log(\"exisiting role\", existingRole)\r\n\r\n    // Ensure updatedBy is valid\r\n    const updatedBy = user?.id || null;\r\n    const updatedAt = new Date().toISOString();\r\n\r\n    // Ensure values are not undefined\r\n    const name = updateRole.name ?? existingRole.roleName;\r\n    const description = updateRole.description ?? existingRole.roleDescription;\r\n\r\n    // Update role name & description\r\n    const updateRoleOptions = {\r\n      query: roleQueries.updateRole,\r\n      params: { roleId: id, name, description, updatedBy: updatedBy, updatedAt },\r\n      types: { updatedBy: \"STRING\" }, // Explicitly define the type\r\n    };\r\n\r\n    console.log(\"Executing updateRole query with params:\", updateRoleOptions);\r\n    await bigquery.query(updateRoleOptions);\r\n\r\n    if (updateRole.permissions && updateRole.permissions.length > 0) {\r\n      // Delete all existing permissions for this role\r\n      const deletePermissionsOptions = {\r\n        query: rolePermissionQueries.deleteRolePermissions,\r\n        params: { roleId: id },\r\n      };\r\n\r\n      console.log(\"Deleting existing permissions:\", deletePermissionsOptions);\r\n      await bigquery.query(deletePermissionsOptions);\r\n\r\n      // Fetch correct permission IDs from database\r\n      const [result] = await bigquery.query({\r\n        query: rolePermissionQueries.getPermissionIds,\r\n        params: { actions: updateRole.permissions },\r\n      });\r\n\r\n      console.log(\"Fetched permission IDs:\", result);\r\n\r\n      const matchedPermissions = result.map((row: any) => row.id);\r\n\r\n      if (matchedPermissions.length !== updateRole.permissions.length) {\r\n        throw new Error(\"Some permissions were not found.\");\r\n      }\r\n\r\n      // Insert new permissions\r\n      for (const permissionId of matchedPermissions) {\r\n        const insertQuery = {\r\n          query: rolePermissionQueries.insertRolePermissions,\r\n          params: {\r\n            roleId: id,\r\n            permissionId,\r\n            createdAt: updatedAt,\r\n            updatedAt,\r\n          },\r\n        };\r\n\r\n        console.log(\"Inserting new permission:\", insertQuery);\r\n        await bigquery.query(insertQuery);\r\n      }\r\n    }\r\n\r\n    // Prepare audit log entry\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"Role\",\r\n      entityId: id,\r\n      action: \"UPDATE\",\r\n      previousData: JSON.stringify(existingRole) || '', // Ensure not undefined\r\n      newData: JSON.stringify(updateRole) || '', // Ensure not undefined\r\n      performedBy: updatedBy,\r\n      createdAt: updatedAt,\r\n    };\r\n\r\n    console.log(\"Audit Log Params:\", auditLogParams);\r\n\r\n    // Insert Audit Log\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: {\r\n        id: \"STRING\",\r\n        entityType: \"STRING\",\r\n        entityId: \"STRING\",\r\n        action: \"STRING\",\r\n        previousData: \"STRING\",\r\n        newData: \"STRING\",\r\n        performedBy: \"STRING\",\r\n        createdAt: \"TIMESTAMP\"\r\n      }, \r\n    });\r\n\r\n    console.log(\"Audit log created successfully.\");\r\n    console.log(`Role updated successfully.`);\r\n    return { id, ...updateRole };\r\n  } catch (error) {\r\n    console.error(`Error updating role ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n//delete role\r\nexport const deleteRoleHandler = async (req: any, id: string) => {\r\n  try {\r\n    // 🔹 Check if Role table exists\r\n    const exist = await checkRoleTableExists();\r\n    if (!exist) {\r\n      console.error(\"Role table does not exist\");\r\n      return { message: \"Role table does not exist\", status: 400 };\r\n    }\r\n\r\n    const { user } = req;\r\n\r\n    // 🔹 Fetch existing role details before deletion\r\n    const [existingRole] = await bigquery.query({\r\n      query: roleQueries.getRoleDetails, // Ensure this query fetches the role correctly\r\n      params: { roleId: id }\r\n    });\r\n\r\n    if (!existingRole || existingRole.length === 0) {\r\n      console.error(`Role with ID ${id} not found`);\r\n      return { message: \"Role not found\", status: 404 };\r\n    }\r\n\r\n    // 🔹 First, delete associated role-permission mappings\r\n    await bigquery.query({\r\n      query: rolePermissionQueries.deleteRolePermissions,\r\n      params: { roleId: id }\r\n    });\r\n\r\n    console.log(`Deleted permissions linked to role ${id}`);\r\n\r\n    // 🔹 Then, delete the role itself\r\n    await bigquery.query({\r\n      query: roleQueries.deleteRole,\r\n      params: { roleId: id } // 🔥 Corrected parameter name\r\n    });\r\n\r\n    console.log(`Role ${id} deleted successfully`);\r\n\r\n    // 🔹 Insert Audit Log Entry for Role Deletion\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"Role\",\r\n      entityId: id,\r\n      action: \"DELETE\",\r\n      previousData: JSON.stringify(existingRole[0]), // Store deleted role data\r\n      newData: null,\r\n      performedBy: user?.id || null,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\" }\r\n    });\r\n\r\n    console.log(\"Audit log inserted successfully\");\r\n\r\n    return { message: \"Role and related audit logs deleted successfully\", status: 200 };\r\n\r\n  } catch (error) {\r\n    console.error(`Error deleting role ${id}:`, error);\r\n    return { message: \"Error deleting role\", error };\r\n  }\r\n};\r\n\r\n\r\n\r\n// Function to check if the permission table exists\r\nconst checkPermissionTableExists = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: `\r\n        SELECT table_name \r\n        FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` \r\n        WHERE table_name = 'permissions'\r\n      `\r\n    });\r\n\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking table existence:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Function to create the permission table if it does not exist\r\nconst createPermissionTableIfNotExists = async () => {\r\n  const exists = await checkPermissionTableExists();\r\n  if (!exists) {\r\n    try {\r\n      await bigquery.query({\r\n        query: `\r\n          CREATE TABLE \\`teqcertify.lms.permissions\\` (\r\n            id STRING NOT NULL, \r\n            action STRING NOT NULL,\r\n            groupName STRING NOT NULL,\r\n            description STRING NOT NULL,\r\n            createdBy STRING NOT NULL,\r\n            updatedBy STRING,\r\n            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n          )\r\n        `\r\n      });\r\n      console.log(\"Permissions table created successfully.\");\r\n    } catch (error) {\r\n      console.error(\"Error creating permissions table:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n//create Permission table Handler\r\nexport const createPermissionHandler = async (req: any, permission: Permission) => {\r\n  try {\r\n    console.log(\"Checking if tables exist...\");\r\n    await createPermissionTableIfNotExists();\r\n    await createAuditTableIfNotExists();\r\n\r\n    const id = uuidv4();\r\n    const { user } = req;\r\n    const {\r\n      action,\r\n      groupName,\r\n      description\r\n    } = permission;\r\n\r\n    // Ensure createdBy is valid\r\n    const createdBy = user?.id || null;\r\n    const createdAt = new Date().toISOString();\r\n\r\n    // Insert Permission Query\r\n    const options = {\r\n      query: permissionQueries.createPermission,\r\n      params: {\r\n        id,\r\n        action,\r\n        groupName,\r\n        description,\r\n        createdBy,\r\n        createdAt\r\n      }\r\n    };\r\n\r\n    console.log(\"Executing Permission Insert Query:\", options);\r\n    await bigquery.query(options);\r\n    console.log(\"Permission created successfully:\", id);\r\n\r\n    // **Log in the Audit Table**\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"Permission\",\r\n        entityId: id,\r\n        action: \"CREATE\",\r\n        previousData: null,\r\n        newData: JSON.stringify({ id, action, description, groupName }),\r\n        performedBy: createdBy,\r\n        createdAt\r\n      },\r\n      types: { \r\n        previousData: \"STRING\", \r\n        newData: \"STRING\" \r\n      }\r\n    });\r\n\r\n    console.log(\"Audit log inserted successfully.\");\r\n    return { id, ...permission };\r\n  } catch (error) {\r\n    console.error(\"Error creating Permission:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n// Get All Permission\r\nexport const getAllPermissionHandler = async () => {\r\n  try {\r\n    const [rows] = await bigquery.query({ query: permissionQueries.getAllPermission });\r\n    return rows;\r\n  } catch (error) {\r\n    console.error(\"Error fetching all permissions:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//update permission\r\nexport const updatePermissionHandler = async (\r\n  req: any,\r\n  action: string,\r\n  updatedPermission: Partial<Permission>\r\n) => {\r\n  try {\r\n    const { user } = req;\r\n\r\n    console.log(`Fetching existing permission for action: ${action}...`);\r\n\r\n    // Fetch existing permission data\r\n    const fetchOptions = {\r\n      query: permissionQueries.getAllPermission,\r\n      params: { action },\r\n    };\r\n\r\n    const [existingRows] = await bigquery.query(fetchOptions);\r\n\r\n    if (existingRows.length === 0) {\r\n      throw new Error(\"Permission not found.\");\r\n    }\r\n\r\n    const existingPermission = existingRows[0];\r\n\r\n    // Ensure updatedBy is valid\r\n    const updatedBy = user?.id || null;\r\n    const updatedAt = new Date().toISOString();\r\n\r\n    // Final updated data\r\n    const finalUpdatedPermission = {\r\n      action,\r\n      groupName: updatedPermission.groupName || existingPermission.groupName,\r\n      description: updatedPermission.description || existingPermission.description,\r\n      updatedBy,\r\n      updatedAt,\r\n    };\r\n\r\n    // Prepare update query\r\n    const updateOptions = {\r\n      query: permissionQueries.updatePermission,\r\n      params: finalUpdatedPermission,\r\n    };\r\n\r\n    // Execute update query\r\n    await bigquery.query(updateOptions);\r\n    console.log(`Permission updated successfully.`);\r\n\r\n    // **Log in the Audit Table**\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"Permission\",\r\n      entityId: existingPermission.id, // Use the actual permission ID\r\n      action: \"UPDATE\",\r\n      previousData: JSON.stringify(existingPermission),\r\n      newData: JSON.stringify(finalUpdatedPermission),\r\n      performedBy: updatedBy,\r\n      createdAt: updatedAt,\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\" }, // Explicit null handling\r\n    });\r\n\r\n    console.log(\"Audit log inserted successfully.\");\r\n\r\n    return finalUpdatedPermission;\r\n  } catch (error) {\r\n    console.error(`Error updating ${action} permission:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//Delete permission\r\nexport const deletePermissionHandler = async (req: any, action: string) => {\r\n  try {\r\n    console.log(`Deleting permission with action: ${action}`);\r\n\r\n    // Check if permission exists before deleting\r\n    const fetchOptions = {\r\n      query: permissionQueries.getAllPermission,\r\n      params: { action }\r\n    };\r\n\r\n    const [existingRows] = await bigquery.query(fetchOptions);\r\n\r\n    if (existingRows.length === 0) {\r\n      return { message: \"Permission not found\", status: 404 };\r\n    }\r\n\r\n    const existingPermission = existingRows[0];\r\n\r\n    // Delete permission\r\n    const deleteOptions = {\r\n      query: permissionQueries.deletePermission,\r\n      params: { action }\r\n    };\r\n\r\n    await bigquery.query(deleteOptions);\r\n    console.log(`Permission deleted successfully: ${action}`);\r\n\r\n    // **Insert Audit Log**\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"Permission\",\r\n        entityId: action,\r\n        action: \"DELETE\",\r\n        previousData: JSON.stringify(existingPermission),\r\n        newData: null,\r\n        performedBy: req?.user?.id || null,\r\n        createdAt: new Date().toISOString(),\r\n      },\r\n      types: { previousData: \"STRING\", newData: \"STRING\" } // Handling null values\r\n    });\r\n\r\n    console.log(\"Audit log inserted successfully.\");\r\n\r\n    // **Return success response**\r\n    return { message: \"Permission deleted successfully\", status: 200 };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error deleting permission:\", error);\r\n    return { message: \"Error deleting permission\", error};\r\n  }\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]}