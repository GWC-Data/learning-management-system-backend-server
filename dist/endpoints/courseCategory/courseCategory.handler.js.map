{"version":3,"file":"courseCategory.handler.js","names":["_uuid","require","_bigquery","_courseCategory","_courseCategoryStorage","_audit","TABLE_COURSE_CATEGORY","process","env","checkCourseCategoryTableExists","console","log","rows","bigquery","query","length","error","Error","createCourseCategoryTableIfNotExists","exists","PROJECT_ID","DATASET_ID","createCourseCategoryHandler","req","courseCategoryData","file","id","uuidv4","user","coursecategoryName","description","existingCourseCategory","params","types","warn","success","message","courseCategoryId","createdAt","Date","toISOString","updatedAt","uploadedImgUrl","fileName","mimetype","split","uploadCourseCategoryImageToGCS","buffer","uploadError","queries","createCourseCategory","coursecategoryImg","createdBy","auditQueries","insertAuditLog","entityType","entityId","action","previousData","newData","JSON","stringify","performedBy","errors","exports","getAllCourseCategoriesHandler","getAllCourseCategories","getCourseCategoryByIdHandler","getCourseCategoryById","updateCourseCategoryHandler","updatedData","tableExists","courseCategoryResults","Array","isArray","status","courseCategory","newCourseCategoryImgUrl","oldFileName","pop","deleteCourseCategoryImageFromGCS","queryParams","updatedBy","companyImg","Object","entries","forEach","key","value","undefined","updateFields","keys","filter","map","join","auditLogParams","deleteCourseCategoryHandler","deleteCategory","deleteCourseCategory","name"],"sources":["../../../src/endpoints/courseCategory/courseCategory.handler.ts"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\r\nimport { bigquery } from '../../config/bigquery';\r\nimport { queries } from \"../../queries/courseCategory/courseCategory.queries\";\r\nimport { CourseCategory } from \"db\";\r\nimport { deleteCourseCategoryImageFromGCS, uploadCourseCategoryImageToGCS } from '../../config/courseCategoryStorage';\r\nimport { auditQueries } from \"queries/audit/audit.queries\";\r\n\r\nconst TABLE_COURSE_CATEGORY = process.env.TABLE_COURSE_CATEGORY || 'courseCategory';\r\n\r\n// Function to check if the course category table exists\r\nconst checkCourseCategoryTableExists = async (): Promise<boolean> => {\r\n  try {\r\n    console.log('Checking if course category table exists...');\r\n    const [rows] = await bigquery.query({\r\n      query: `SELECT table_name FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` WHERE table_name = '${TABLE_COURSE_CATEGORY}'`\r\n    });\r\n    console.log(`Table exists: ${rows.length > 0}`);\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error('Error checking table existence:', error);\r\n    throw new Error('Database error while checking table existence.');\r\n  }\r\n};\r\n\r\n// Function to create the course category table if it does not exist\r\nconst createCourseCategoryTableIfNotExists = async (): Promise<void> => {\r\n  const exists = await checkCourseCategoryTableExists();\r\n  if (!exists) {\r\n    try {\r\n      console.log('Creating course category table...');\r\n      await bigquery.query({\r\n        query: `\r\n        CREATE TABLE \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_COURSE_CATEGORY}\\` (\r\n          id STRING NOT NULL,\r\n          coursecategoryName STRING NOT NULL,\r\n          description STRING NOT NULL,\r\n          coursecategoryImg STRING,\r\n          createdBy STRING NOT NULL,\r\n          updatedBy STRING,\r\n          createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n          updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n        )`,\r\n      });\r\n      console.log('Course category table created successfully.');\r\n    } catch (error) {\r\n      console.error('Error creating course category table:', error);\r\n      throw new Error('Failed to create course category table.');\r\n    }\r\n  }\r\n};\r\n\r\n// **Create CourseCategory**\r\n// export const createCourseCategoryHandler = async (\r\n//   req:any,\r\n//   courseCategoryData: CourseCategory,\r\n//   file?: Express.Multer.File\r\n// ) => {\r\n\r\n//   const id = uuidv4();\r\n//   const { user } = req;\r\n\r\n//   const { coursecategoryName, description } = courseCategoryData;\r\n\r\n//   try {\r\n//     await createCourseCategoryTableIfNotExists();\r\n//     console.log(\"Checking if course category name already exists...\");\r\n\r\n//     // **Check if course category already exists**\r\n//     const [existingCourseCategory] = await bigquery.query({\r\n//       query: `SELECT id FROM \\`teqcertify.lms.${process.env.TABLE_COURSE_CATEGORY}\\` WHERE coursecategoryName = @coursecategoryName`,\r\n//       params: { coursecategoryName },\r\n//     });\r\n\r\n//     if (existingCourseCategory.length > 0) {\r\n//       console.warn(`Course category \"${coursecategoryName}\" already exists.`);\r\n//       return { success: false, message: \"Course Category Name already exists.\" };\r\n//     }\r\n\r\n//     console.log(\"Creating new course category...\");\r\n//     const courseCategoryId = uuidv4();\r\n//     const createdAt = new Date().toISOString();\r\n//     const updatedAt = createdAt;\r\n//     let uploadedImgUrl = \"\";\r\n\r\n//     // **Upload image to GCS if provided**\r\n//     if (file) {\r\n//       try {\r\n//         const fileName = `${courseCategoryId}.${file.mimetype.split(\"/\")[1]}`;\r\n//         console.log(\"Uploading course category image to GCS...\");\r\n//         uploadedImgUrl = await uploadCourseCategoryImageToGCS(file.buffer, fileName, file.mimetype);\r\n//       } catch (uploadError) {\r\n//         console.error(\"Error uploading image to GCS:\", uploadError);\r\n//         return { success: false, message: \"Failed to upload image.\" };\r\n//       }\r\n//     }\r\n\r\n//     console.log(\"Inserting course category info into BigQuery...\");\r\n\r\n//     await bigquery.query({\r\n//       query: queries.createCourseCategory,\r\n//       params: {\r\n//         id: courseCategoryId,\r\n//         coursecategoryName,\r\n//         description,\r\n//         coursecategoryImg: uploadedImgUrl,\r\n//         createdBy: user?.id,\r\n//         createdAt,\r\n//         updatedAt,\r\n//       },\r\n//     });\r\n\r\n//     console.log(`Course category created successfully. ID: ${courseCategoryId}`);\r\n\r\n//    // **Audit Log**\r\n//    await bigquery.query({\r\n//     query: auditQueries.insertAuditLog,\r\n//     params: {\r\n//       id: uuidv4(),\r\n//       entityType: \"CourseCategory\", \r\n//       entityId: courseCategoryId, \r\n//       action: \"CREATE\",\r\n//       previousData: null, \r\n//       newData: JSON.stringify({\r\n//         id: courseCategoryId,\r\n//         coursecategoryName,\r\n//         description,\r\n//         coursecategoryImg: uploadedImgUrl,\r\n//       }),\r\n//       performedBy: user?.id,\r\n//       createdAt: new Date().toISOString(),\r\n//     },\r\n//     types: {\r\n//       previousData: \"STRING\",\r\n//       newData: \"STRING\",\r\n//     },\r\n//   });\r\n        \r\n//     return {\r\n//       message: \"Course category created successfully.\",\r\n//       courseCategoryId,\r\n//       coursecategoryImg: uploadedImgUrl,\r\n//       courseCategoryData: courseCategoryData\r\n//     };\r\n//   } catch (error) {\r\n//     console.error(\"Error creating course category:\", error);\r\n//     return { success: false, errors: [error instanceof Error ? error.message : \"Unknown error occurred.\"] };\r\n//   }\r\n// };\r\n\r\nexport const createCourseCategoryHandler = async (\r\n  req: any,\r\n  courseCategoryData: any,\r\n  file?: Express.Multer.File\r\n) => {\r\n  try {\r\n    const id = uuidv4();\r\n    const { user } = req;\r\n    const { coursecategoryName, description } = courseCategoryData;\r\n\r\n    // Ensure the Course Category table exists\r\n    await createCourseCategoryTableIfNotExists();\r\n\r\n    console.log(\"Checking if course category name already exists...\");\r\n    const [existingCourseCategory] = await bigquery.query({\r\n      query: `SELECT id FROM \\`teqcertify.lms.${process.env.TABLE_COURSE_CATEGORY}\\` WHERE coursecategoryName = @coursecategoryName`,\r\n      params: { coursecategoryName },\r\n      types: { coursecategoryName: \"STRING\" }\r\n    });\r\n\r\n    if (existingCourseCategory.length > 0) {\r\n      console.warn(`Course category \"${coursecategoryName}\" already exists.`);\r\n      return { success: false, message: \"Course Category Name already exists.\" };\r\n    }\r\n\r\n    console.log(\"Creating new course category...\");\r\n    const courseCategoryId = uuidv4();\r\n    const createdAt = new Date().toISOString();\r\n    const updatedAt = createdAt;\r\n    let uploadedImgUrl = \"\";\r\n\r\n    // **Upload image to GCS if provided**\r\n    if (file) {\r\n      try {\r\n        const fileName = `${courseCategoryId}.${file.mimetype.split(\"/\")[1]}`;\r\n        console.log(\"Uploading course category image to GCS...\");\r\n        uploadedImgUrl = await uploadCourseCategoryImageToGCS(file.buffer, fileName, file.mimetype);\r\n      } catch (uploadError) {\r\n        console.error(\"Error uploading image to GCS:\", uploadError);\r\n        return { success: false, message: \"Failed to upload image.\" };\r\n      }\r\n    }\r\n\r\n    console.log(\"Inserting course category info into BigQuery...\");\r\n    await bigquery.query({\r\n      query: queries.createCourseCategory,\r\n      params: {\r\n        id: courseCategoryId,\r\n        coursecategoryName,\r\n        description,\r\n        coursecategoryImg: uploadedImgUrl || null,\r\n        createdBy: user?.id || null,\r\n        createdAt\r\n      },\r\n      types: {\r\n        coursecategoryImg: \"STRING\",\r\n        createdBy: \"STRING\",\r\n      }\r\n    });\r\n\r\n    console.log(`Course category created successfully. ID: ${courseCategoryId}`);\r\n\r\n    // **Audit Log**\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: {\r\n        id: uuidv4(),\r\n        entityType: \"CourseCategory\",\r\n        entityId: courseCategoryId,\r\n        action: \"CREATE\",\r\n        previousData: null,\r\n        newData: JSON.stringify({\r\n          id: courseCategoryId,\r\n          coursecategoryName,\r\n          description,\r\n          coursecategoryImg: uploadedImgUrl,\r\n        }),\r\n        performedBy: user?.id || null,\r\n        createdAt: new Date().toISOString(),\r\n      },\r\n      types: {\r\n        previousData: \"STRING\",\r\n        newData: \"STRING\",\r\n        performedBy: \"STRING\",\r\n      }\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Course category created successfully.\",\r\n      courseCategoryId,\r\n      coursecategoryImg: uploadedImgUrl,\r\n    };\r\n  } catch (error: any) {\r\n    console.error(\"Error creating course category:\", error);\r\n    return { success: false, errors: [error.message || \"Unknown error occurred.\"] };\r\n  }\r\n};\r\n\r\n// **Get All Course Categories**\r\nexport const getAllCourseCategoriesHandler = async () => {\r\n  await checkCourseCategoryTableExists();\r\n  try {\r\n    console.log('Fetching all course categories...');\r\n    const [rows] = await bigquery.query({ query: queries.getAllCourseCategories });\r\n    console.log(`Total course categories found: ${rows.length}`);\r\n    return rows;\r\n  } catch (error) {\r\n    console.error('Error fetching all course categories:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// **Get Course Category By ID**\r\nexport const getCourseCategoryByIdHandler = async (id: string) => {\r\n  await checkCourseCategoryTableExists();\r\n  try {\r\n    console.log(`Fetching course category with ID: ${id}`);\r\n    const [rows] = await bigquery.query({ query: queries.getCourseCategoryById, params: { id } });\r\n    if (!rows.length) {\r\n      console.log(`No course category found with ID: ${id}`);\r\n      return null;\r\n    }\r\n    console.log(`Course category found:`, rows[0]);\r\n    return rows[0];\r\n  } catch (error) {\r\n    console.error(`Error fetching course category with ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const updateCourseCategoryHandler = async (\r\n  id: string,\r\n  req:any,\r\n  updatedData: CourseCategory,\r\n  file?: Express.Multer.File\r\n) => {\r\n  try {\r\n    const { user } = req;    \r\n    // Check if the table exists\r\n    const tableExists = await checkCourseCategoryTableExists();\r\n    if (!tableExists) {\r\n      return { success: false, message: `Table '${TABLE_COURSE_CATEGORY}' does not exist.` };\r\n    }\r\n\r\n    // Fetch existing company data\r\n    const [courseCategoryResults] = await bigquery.query({\r\n      query: `SELECT * FROM \\`teqcertify.lms.${TABLE_COURSE_CATEGORY}\\` WHERE id = @id`,\r\n      params: { id }\r\n    });\r\n    \r\n    if (!Array.isArray(courseCategoryResults) || courseCategoryResults.length === 0) {\r\n      console.error(`courseCategory with ID ${id} is not registered.`);\r\n      return {\r\n        status: 400,\r\n        success: false,\r\n        errors: [`courseCategory with ID ${id} is not registered.`]\r\n      };\r\n    }\r\n\r\n    const courseCategory = courseCategoryResults[0];\r\n    let newCourseCategoryImgUrl = courseCategory.coursecategoryImg;\r\n\r\n    // Handle Company Logo Update\r\n    if (file) {\r\n      try {\r\n        // Delete old image if exists\r\n        const oldFileName = courseCategory.coursecategoryImg?.split(\"/\").pop();\r\n        if (oldFileName) {\r\n          await deleteCourseCategoryImageFromGCS(oldFileName);\r\n        }\r\n\r\n        // Upload new image\r\n        const fileName = `${id}.${file.mimetype.split(\"/\")[1]}`;\r\n        newCourseCategoryImgUrl = await uploadCourseCategoryImageToGCS(file.buffer, fileName, file.mimetype);\r\n      } catch (uploadError) {\r\n        console.error(\"Error uploading courseCategory image:\", uploadError);\r\n        return { success: false, message: \"Failed to upload courseCategory image.\" };\r\n      }\r\n    }\r\n\r\n    // Prepare update values\r\n    const queryParams: Record<string, any> = { id, updatedBy: user?.id, updatedAt: new Date().toISOString() };\r\n    if (newCourseCategoryImgUrl !== courseCategory.coursecategoryImg) {\r\n      queryParams.companyImg = newCourseCategoryImgUrl;\r\n    }\r\n\r\n    Object.entries(updatedData).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        queryParams[key] = value;\r\n      }\r\n    });\r\n\r\n    // Construct dynamic update query\r\n    const updateFields = Object.keys(queryParams)\r\n      .filter((key) => key !== \"id\")\r\n      .map((key) => `${key} = @${key}`)\r\n      .join(\", \");\r\n\r\n    if (!updateFields) {\r\n      return { success: false, message: \"No fields provided for update.\" };\r\n    }\r\n\r\n    // Execute update query\r\n    await bigquery.query({\r\n      query: `UPDATE \\`teqcertify.lms.${TABLE_COURSE_CATEGORY}\\` SET ${updateFields} WHERE id = @id`,\r\n      params: queryParams\r\n    });\r\n\r\n    console.log(`Course Category with ID ${id} updated successfully.`);\r\n\r\n    // Insert Audit Log\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"CourseCategory\",\r\n      entityId: id,\r\n      action: \"UPDATE\",\r\n      previousData: JSON.stringify(courseCategory),\r\n      newData: JSON.stringify(queryParams),\r\n      performedBy: user?.id,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\" }, // Explicit null handling\r\n    });\r\n\r\n    return {\r\n      // status: 200,\r\n      // success: true,\r\n      message: `Company with ID ${id} updated successfully.`,\r\n      // courseCategoryImg: queryParams.coursecategoryImg || courseCategory.coursecategoryImg,\r\n      courseCategoryData: courseCategory\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error updating course category with ID ${id}:`, error);\r\n    return { status: 500, success: false, errors: [\"Internal server error occurred.\"] };\r\n  }\r\n};\r\n\r\n\r\n// **Delete Company Handler**\r\nexport const deleteCourseCategoryHandler = async (id: string, req:any) => {\r\n\r\n  const { user } = req;\r\n  try {\r\n\r\n    if (!(await checkCourseCategoryTableExists())) throw new Error(`Table '${TABLE_COURSE_CATEGORY}' does not exist.`);\r\n    \r\n    const [rows] = await bigquery.query({ query: queries.getCourseCategoryById, params: { id } });\r\n    if (!rows.length) {\r\n      console.log('Company not found.');\r\n      return { success: false, message: 'CourseCategory not found.' };\r\n    }\r\n\r\n    const fileName = rows[0].coursecategoryImg?.split('/').pop();\r\n    if (fileName) {\r\n      console.log('Deleting CourseCategory image...');\r\n      await deleteCourseCategoryImageFromGCS(fileName);\r\n    }\r\n\r\n    const deleteCategory = await bigquery.query({ \r\n      query: queries.deleteCourseCategory, \r\n      params: [{ name: 'id', value: id }] \r\n    });    \r\n    console.log(`CourseCategory with ID ${id} deleted successfully.`);\r\n\r\n     // Insert Audit Log\r\n     const auditLogParams = {\r\n      entityType: \"CourseCategory\",\r\n      entityId: id,\r\n      action: \"DELETE\",\r\n      previousData: JSON.stringify(deleteCategory),\r\n      newData: null,\r\n      performedBy: user?.id\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: {\r\n        previousData: \"STRING\", \r\n        newData: \"STRING\",  // Explicitly define null type\r\n        performedBy: \"STRING\"\r\n      }\r\n    });\r\n    \r\n    return { success: true, message: `CourseCategory with ID ${id} deleted successfully.` };\r\n  } catch (error) {\r\n    console.error(`Error deleting CourseCategory with ID ${id}:`, error);\r\n    return { success: false, errors: ['Internal server error occurred.'] };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}