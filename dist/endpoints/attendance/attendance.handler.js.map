{"version":3,"file":"attendance.handler.js","names":["XLSX","_interopRequireWildcard","require","_uuid","_bigquery","_attendanceFile","_attendanceQueries","_attendanceStorage","_audit","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","TABLE_ATTENDANCE_FILE","process","env","TABLE_CLASS","checkAttendanceFileTableExists","console","log","rows","bigquery","query","length","error","Error","createAttendanceFileTableIfNotExists","exists","PROJECT_ID","DATASET_ID","createAttendanceFileHandler","req","AttendanceFileData","file","user","classId","teamsAttendanceFile","attendanceDate","classExists","attendanceFileQueries","validateClassId","params","success","message","attendanceFileId","uuidv4","createdAt","Date","toISOString","updatedAt","uploadedTeamsAttendanceFileUrl","fileName","mimetype","split","uploadAttendanceFileForClassToGCS","buffer","uploadError","createAttendanceFile","id","createdBy","auditLogParams","entityType","entityId","action","previousData","newData","JSON","stringify","performedBy","auditQueries","insertAuditLog","types","attendanceFileData","errors","exports","getAllAttendanceFilesHandler","getAllAttendanceFiles","getAttendanceFileByIdHandler","getAttendanceFileById","getAttendanceFilesByClassIdHandler","getAttendanceFilesByClassId","updateAttendanceFileHandler","updatedData","tableExists","attendanceFileResults","Array","isArray","status","attendanceFile","newTeamsAttendanceFileUrl","oldFileName","pop","deleteAttendanceForClassFromGCS","queryParams","updatedBy","updateAttendanceFile","deleteAttendanceFileHandler","attendance","deleteAttendanceFile","checkAttendanceTableExists","attendanceQueries","checkTableExists","tableName","TABLE_ATTENDANCE","createAttendanceTableIfNotExists","createAttendanceTable","createAttendanceHandler","res","batchId","courseId","moduleId","body","excelFile","json","fileBuffer","workbook","read","type","SheetNames","sheetName","worksheet","Sheets","keys","excelData","utils","sheet_to_json","batchExists","validateBatchId","moduleExists","validateModuleId","fileExists","validateAttendanceFileId","missingUsers","attendancePromises","row","name","trim","firstJoin","lastLeave","email","percentage","duration","role","attendanceValue","undefined","warn","userExists","TABLE_USER","push","userId","attendanceId","percentageValue","parseFloat","replace","durationValue","reduce","acc","val","includes","parseInt","attendanceValueBool","toLowerCase","convertToBigQueryTimestamp","dateString","dateObj","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","firstJoinFormatted","lastLeaveFormatted","teamsRole","attendancePromise","insertAttendance","catch","Promise","all","updateAttendanceByClassIdHandler","updateData","TABLE_CLASSES","updateAttendance","deleteAttendanceByClassIdHandler","result","deleteAttendance","getAllAttendanceHandler","getAllAttendance","getAttendanceHandler","conditions","TABLE_BATCH","TABLE_MODULE","TABLE_COURSE","TABLE_ASSIGNMENTCOMPLETION","join","attendanceRecords","details"],"sources":["../../../src/endpoints/attendance/attendance.handler.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { BigQuery } from '@google-cloud/bigquery';\r\nimport * as XLSX from 'xlsx';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { bigquery } from '../../config/bigquery';\r\nimport { attendanceFileQueries } from '../../queries/attendanceFile/attendanceFile.queries';\r\nimport { attendanceQueries } from '../../queries/attendance/attendanceQueries';\r\nimport { AttendanceFile, Attendance } from 'db';\r\nimport {\r\n  deleteAttendanceForClassFromGCS,\r\n  uploadAttendanceFileForClassToGCS\r\n} from '../../config/attendanceStorage';\r\nimport { auditQueries } from 'queries/audit/audit.queries';\r\n\r\nconst TABLE_ATTENDANCE_FILE =\r\n  process.env.TABLE_ATTENDANCE_FILE || 'attendanceFiles';\r\nconst TABLE_CLASS = process.env.TABLE_CLASS || 'classes';\r\n\r\n// Function to check if the attendance file table exists\r\nconst checkAttendanceFileTableExists = async (): Promise<boolean> => {\r\n  try {\r\n    console.log('Checking if attendance file table exists...');\r\n    const [rows] = await bigquery.query({\r\n      query: `SELECT table_name FROM \\`teqcertify.lms.INFORMATION_SCHEMA.TABLES\\` WHERE table_name = '${TABLE_ATTENDANCE_FILE}'`\r\n    });\r\n    console.log(`Table exists: ${rows.length > 0}`);\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error('Error checking table existence:', error);\r\n    throw new Error('Database error while checking table existence.');\r\n  }\r\n};\r\n\r\n// Function to create the attendance file table if it does not exist\r\nconst createAttendanceFileTableIfNotExists = async (): Promise<void> => {\r\n  const exists = await checkAttendanceFileTableExists();\r\n  if (!exists) {\r\n    try {\r\n      console.log('Creating attendance file table...');\r\n      await bigquery.query({\r\n        query: `\r\n        CREATE TABLE \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_ATTENDANCE_FILE}\\` (\r\n          id STRING NOT NULL,\r\n          classId STRING NOT NULL,\r\n          teamsAttendanceFile STRING NOT NULL,\r\n          attendanceDate STRING NOT NULL,\r\n          createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n          updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n        )`\r\n      });\r\n      console.log('Attendance File table created successfully.');\r\n    } catch (error) {\r\n      console.error('Error creating attendance file table:', error);\r\n      throw new Error('Failed to create attendance file table.');\r\n    }\r\n  }\r\n};\r\n\r\n// **Create AttendanceFile**\r\nexport const createAttendanceFileHandler = async (\r\n  req:any,\r\n  AttendanceFileData: AttendanceFile,\r\n  file?: Express.Multer.File\r\n) => {\r\n  const { user } = req;\r\n  const { classId, teamsAttendanceFile, attendanceDate } = AttendanceFileData;\r\n\r\n  try {\r\n    await createAttendanceFileTableIfNotExists();\r\n    console.log('Checking if attendance is already exists...');\r\n\r\n    console.log(`Validating class ID: ${AttendanceFileData.classId}`);\r\n\r\n    // Check if classId exists\r\n    const [classExists] = await bigquery.query({\r\n      query: attendanceFileQueries.validateClassId,\r\n      params: { classId: AttendanceFileData.classId }\r\n    });\r\n\r\n    if (!classExists.length) {\r\n      console.error(`Class ID ${AttendanceFileData.classId} does not exist.`);\r\n      return {\r\n        success: false,\r\n        message: 'Invalid classId. Class does not exist.'\r\n      };\r\n    }\r\n    console.log(\r\n      `Class ID ${AttendanceFileData.classId} is valid. Proceeding with insertion.`\r\n    );\r\n\r\n    console.log('Creating new Attendance...');\r\n    const attendanceFileId = uuidv4();\r\n    const createdAt = new Date().toISOString();\r\n    const updatedAt = createdAt;\r\n    let uploadedTeamsAttendanceFileUrl = '';\r\n\r\n    // **Upload image to GCS if provided**\r\n    if (file) {\r\n      try {\r\n        const fileName = `${attendanceFileId}.${file.mimetype.split('/')[1]}`;\r\n        console.log('Uploading TeamsAttendanceFile to GCS...');\r\n        uploadedTeamsAttendanceFileUrl =\r\n          await uploadAttendanceFileForClassToGCS(\r\n            file.buffer,\r\n            fileName,\r\n            file.mimetype\r\n          );\r\n      } catch (uploadError) {\r\n        console.error(\r\n          'Error uploading TeamsAttendanceFile to GCS:',\r\n          uploadError\r\n        );\r\n        return {\r\n          success: false,\r\n          message: 'Failed to upload TeamsAttendanceFile.'\r\n        };\r\n      }\r\n    }\r\n\r\n    console.log('Inserting attendanceFile info into BigQuery...');\r\n\r\n    await bigquery.query({\r\n      query: attendanceFileQueries.createAttendanceFile,\r\n      params: {\r\n        id: attendanceFileId,\r\n        classId,\r\n        teamsAttendanceFile: uploadedTeamsAttendanceFileUrl,\r\n        attendanceDate,\r\n        createdAt,\r\n        createdBy: user?.id\r\n      }\r\n    });\r\n\r\n\r\n    // Insert Audit Log\r\n        const auditLogParams = {\r\n          id: uuidv4(),\r\n          entityType: \"AttendanceFile\",\r\n          entityId: attendanceFileId,\r\n          action: \"CREATE\",\r\n          previousData: null,\r\n          newData: JSON.stringify({\r\n            id: attendanceFileId,\r\n            classId,\r\n            teamsAttendanceFile,\r\n            attendanceDate\r\n          }),\r\n          performedBy: user?.id,\r\n          createdAt,\r\n        };\r\n    \r\n        await bigquery.query({\r\n          query: auditQueries.insertAuditLog,\r\n          params: auditLogParams,\r\n          types: { previousData: \"STRING\", newData: \"STRING\", createdAt: \"TIMESTAMP\" },\r\n        });\r\n\r\n    console.log(\r\n      `Attendance File created successfully. ID: ${attendanceFileId}`\r\n    );\r\n    return {\r\n      success: true,\r\n      message: 'Attendance File created successfully.',\r\n      attendanceFileId,\r\n      teamsAttendanceFile: uploadedTeamsAttendanceFileUrl,\r\n      attendanceFileData: AttendanceFileData\r\n    };\r\n  } catch (error) {\r\n    console.error('Error creating attendanceFile:', error);\r\n    return {\r\n      success: false,\r\n      errors: [\r\n        error instanceof Error ? error.message : 'Unknown error occurred.'\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// **Get All AttendanceFile**\r\nexport const getAllAttendanceFilesHandler = async () => {\r\n  await checkAttendanceFileTableExists();\r\n  try {\r\n    console.log('Fetching all attendanceFile...');\r\n    const [rows] = await bigquery.query({\r\n      query: attendanceFileQueries.getAllAttendanceFiles\r\n    });\r\n    console.log(`Total Attendance Files found: ${rows.length}`);\r\n    return rows;\r\n  } catch (error) {\r\n    console.error('Error fetching all Attendance Files:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// **Get AttendanceFile By ID**\r\nexport const getAttendanceFileByIdHandler = async (id: string) => {\r\n  await checkAttendanceFileTableExists();\r\n  try {\r\n    console.log(`Fetching course category with ID: ${id}`);\r\n    const [rows] = await bigquery.query({\r\n      query: attendanceFileQueries.getAttendanceFileById,\r\n      params: { id }\r\n    });\r\n    if (!rows.length) {\r\n      console.log(`No attendance file found with ID: ${id}`);\r\n      return null;\r\n    }\r\n    console.log(`Attendance File found:`, rows[0]);\r\n    return rows[0];\r\n  } catch (error) {\r\n    console.error(`Error fetching Attendance File with ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// **Get Attendance Files By Class ID**\r\nexport const getAttendanceFilesByClassIdHandler = async (classId: string) => {\r\n  await checkAttendanceFileTableExists();\r\n  try {\r\n    console.log(`Fetching attendance files for Class ID: ${classId}`);\r\n\r\n    const [rows] = await bigquery.query({\r\n      query: attendanceFileQueries.getAttendanceFilesByClassId,\r\n      params: { classId }\r\n    });\r\n\r\n    if (!rows.length) {\r\n      console.log(`No attendance files found for Class ID: ${classId}`);\r\n      return null;\r\n    }\r\n\r\n    console.log(`Attendance Files found:`, rows);\r\n    return rows;\r\n  } catch (error) {\r\n    console.error(\r\n      `Error fetching attendance files for Class ID ${classId}:`,\r\n      error\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateAttendanceFileHandler = async (\r\n  req:any,\r\n  id: string,\r\n  updatedData: AttendanceFile,\r\n  file?: Express.Multer.File\r\n) => {\r\n  try {\r\n    const { user } = req;\r\n    console.log(`Updating attendance file info for ID: ${id}`);\r\n\r\n    // Check if the table exists\r\n    const tableExists = await checkAttendanceFileTableExists();\r\n    if (!tableExists) {\r\n      return {\r\n        success: false,\r\n        message: `Table '${TABLE_ATTENDANCE_FILE}' does not exist.`\r\n      };\r\n    }\r\n\r\n    // Fetch existing attendance file data\r\n    const [attendanceFileResults] = await bigquery.query({\r\n      query: `SELECT * FROM \\`teqcertify.lms.${TABLE_ATTENDANCE_FILE}\\` WHERE id = @id`,\r\n      params: { id }\r\n    });\r\n\r\n    if (\r\n      !Array.isArray(attendanceFileResults) ||\r\n      attendanceFileResults.length === 0\r\n    ) {\r\n      console.error(`Attendance file with ID ${id} is not registered.`);\r\n      return {\r\n        status: 400,\r\n        success: false,\r\n        errors: [`Attendance file with ID ${id} is not registered.`]\r\n      };\r\n    }\r\n\r\n    const attendanceFile = attendanceFileResults[0];\r\n    let newTeamsAttendanceFileUrl = attendanceFile.teamsAttendanceFile;\r\n\r\n    // Validate classId before updating\r\n    if (updatedData.classId) {\r\n      const [classExists] = await bigquery.query({\r\n        query: `SELECT id FROM \\`teqcertify.lms.${TABLE_CLASS}\\` WHERE id = @classId`,\r\n        params: { classId: updatedData.classId }\r\n      });\r\n\r\n      if (!Array.isArray(classExists) || classExists.length === 0) {\r\n        console.error(`Class ID ${updatedData.classId} does not exist.`);\r\n        return {\r\n          success: false,\r\n          message: 'Invalid classId. Class does not exist.'\r\n        };\r\n      }\r\n    }\r\n\r\n    // Handle TeamsAttendanceFile Update\r\n    if (file) {\r\n      try {\r\n        // Delete old file if exists\r\n        const oldFileName = attendanceFile.teamsAttendanceFile\r\n          ?.split('/')\r\n          .pop();\r\n        if (oldFileName) {\r\n          await deleteAttendanceForClassFromGCS(oldFileName);\r\n        }\r\n\r\n        // Upload new file\r\n        const fileName = `${id}.${file.mimetype.split('/')[1]}`;\r\n        newTeamsAttendanceFileUrl = await uploadAttendanceFileForClassToGCS(\r\n          file.buffer,\r\n          fileName,\r\n          file.mimetype\r\n        );\r\n      } catch (uploadError) {\r\n        console.error('Error uploading attendance file:', uploadError);\r\n        return { success: false, message: 'Failed to upload attendance file.' };\r\n      }\r\n    }\r\n\r\n    // Prepare update values\r\n    const queryParams: Record<string, any> = {\r\n      id,\r\n      classId: updatedData.classId || attendanceFile.classId,\r\n      teamsAttendanceFile: newTeamsAttendanceFileUrl,\r\n      attendanceDate:\r\n      updatedData.attendanceDate || attendanceFile.attendanceDate,\r\n      updatedBy: user?.id,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    // Execute update query using updateAttendanceFile\r\n    await bigquery.query({\r\n      query: attendanceFileQueries.updateAttendanceFile, // Using the predefined query name\r\n      params: queryParams\r\n    });\r\n\r\n    // Insert Audit Log\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"AttendanceFile\",\r\n      entityId: id,\r\n      action: \"UPDATE\",\r\n      previousData: null,\r\n      newData: JSON.stringify({\r\n        id,\r\n        classId: updatedData.classId,\r\n        teamsAttendanceFile: updatedData.teamsAttendanceFile,\r\n        attendanceDate: updatedData.attendanceDate,\r\n      }),\r\n      performedBy: user?.id,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\", createdAt: \"TIMESTAMP\" },\r\n    });\r\n\r\n    return {\r\n      message: `Attendance file with ID ${id} updated successfully.`,\r\n      attendanceFileData: updatedData\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error updating attendance file with ID ${id}:`, error);\r\n    return {\r\n      status: 500,\r\n      success: false,\r\n      errors: ['Internal server error occurred.']\r\n    };\r\n  }\r\n};\r\n\r\n// **Delete AttendanceFile Handler**\r\nexport const deleteAttendanceFileHandler = async (req: any, id: string) => {\r\n  try {\r\n\r\n    const { user } = req;\r\n    console.log(`Deleting attendanceFile with ID: ${id}`);\r\n    if (!(await checkAttendanceFileTableExists()))\r\n      throw new Error(`Table '${TABLE_ATTENDANCE_FILE}' does not exist.`);\r\n\r\n    const [rows] = await bigquery.query({\r\n      query: attendanceFileQueries.getAttendanceFileById,\r\n      params: { id }\r\n    });\r\n\r\n    const attendance = rows[0];\r\n\r\n    if (!rows.length) {\r\n      return { success: false, message: 'AttendanceFile not found.' };\r\n    }\r\n\r\n    const fileName = rows[0].teamsAttendanceFile?.split('/').pop();\r\n    if (fileName) {\r\n      console.log('Deleting TeamsAttendanceFile...');\r\n      await deleteAttendanceForClassFromGCS(fileName);\r\n    }\r\n\r\n    await bigquery.query({\r\n      query: attendanceFileQueries.deleteAttendanceFile,\r\n      params: { id }\r\n    });\r\n\r\n    // Insert Audit Log\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"AttendanceFile\",\r\n      entityId: id,\r\n      action: \"DELETE\",\r\n      previousData: JSON.stringify(attendance),\r\n      newData:null,\r\n      performedBy: user?.id,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\", createdAt: \"TIMESTAMP\" },\r\n    });\r\n\r\n    console.log(`TeamsAttendanceFile with ID ${id} deleted successfully.`);\r\n\r\n    return {\r\n      success: true,\r\n      message: `AttendanceFile with ID ${id} deleted successfully.`\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error deleting AttendanceFile with ID ${id}:`, error);\r\n    return { success: false, errors: ['Internal server error occurred.'] };\r\n  }\r\n};\r\n\r\n//Attendance\r\n\r\n// ✅ Check if Attendance Table Exists\r\nconst checkAttendanceTableExists = async (): Promise<boolean> => {\r\n  try {\r\n    const [rows] = await bigquery.query({\r\n      query: attendanceQueries.checkTableExists,\r\n      params: { tableName: process.env.TABLE_ATTENDANCE }\r\n    });\r\n\r\n    return rows.length > 0;\r\n  } catch (error) {\r\n    console.error('Error checking attendance table existence:', error);\r\n    throw new Error('Database error while checking table existence.');\r\n  }\r\n};\r\n\r\n// ✅ Create Attendance Table If Not Exists\r\nconst createAttendanceTableIfNotExists = async (): Promise<void> => {\r\n  if (!(await checkAttendanceTableExists())) {\r\n    try {\r\n      await bigquery.query({ query: attendanceQueries.createAttendanceTable });\r\n      console.log('✅ Attendance table created successfully.');\r\n    } catch (error) {\r\n      console.error('❌ Error creating attendance table:', error);\r\n      throw new Error('Failed to create attendance table.');\r\n    }\r\n  }\r\n};\r\n\r\n//Attendance - Create\r\nexport const createAttendanceHandler = async (req: Request, \r\n  res: Response) => {\r\n  try {\r\n    const { batchId, courseId, moduleId, classId, attendanceFileId } = req.body;\r\n    const excelFile = req.file; \r\n    const { user } = req;\r\n\r\n    if (!excelFile) {\r\n      return res.status(400).json({ message: 'No file uploaded!' });\r\n    }\r\n\r\n    await createAttendanceTableIfNotExists(); // Ensure table exists before inserting data\r\n\r\n    // Read the uploaded Excel file\r\n    const fileBuffer = excelFile.buffer;\r\n    const workbook = XLSX.read(fileBuffer, { type: 'buffer' });\r\n\r\n    if (!workbook.SheetNames.length) {\r\n      return res\r\n        .status(400)\r\n        .json({ message: 'Uploaded file is invalid or empty' });\r\n    }\r\n\r\n    const sheetName = workbook.SheetNames[0];\r\n    const worksheet = workbook.Sheets[sheetName];\r\n\r\n    if (!worksheet || Object.keys(worksheet).length === 0) {\r\n      return res\r\n        .status(400)\r\n        .json({ message: 'No valid data found in the Excel file' });\r\n    }\r\n\r\n    const excelData: Record<string, any>[] =\r\n      XLSX.utils.sheet_to_json(worksheet);\r\n    if (excelData.length === 0) {\r\n      return res\r\n        .status(400)\r\n        .json({ message: 'Excel file is empty or improperly formatted' });\r\n    }\r\n\r\n    // Validate batch, module, class, and attendanceFileId exist in the database\r\n    const [batchExists] = await bigquery.query({\r\n      query: attendanceQueries.validateBatchId,\r\n      params: { batchId }\r\n    });\r\n    if (!batchExists.length)\r\n      return res.status(400).json({ message: 'Invalid batchId' });\r\n\r\n    const [moduleExists] = await bigquery.query({\r\n      query: attendanceQueries.validateModuleId,\r\n      params: { moduleId }\r\n    });\r\n\r\n    if (!moduleExists.length)\r\n      return res.status(400).json({ message: 'Invalid moduleId' });\r\n\r\n    const [classExists] = await bigquery.query({\r\n      query: attendanceQueries.validateClassId,\r\n      params: { classId }\r\n    });\r\n\r\n    if (!classExists.length)\r\n      return res.status(400).json({ message: 'Invalid classId' });\r\n\r\n    const [fileExists] = await bigquery.query({\r\n      query: attendanceQueries.validateAttendanceFileId,\r\n      params: { attendanceFileId }\r\n    });\r\n\r\n    if (!fileExists.length)\r\n      return res.status(400).json({ message: 'Invalid attendanceFileId' });\r\n\r\n    const missingUsers: string[] = [];\r\n    const attendancePromises: Promise<any>[] = [];\r\n\r\n    // Iterate through each row in the parsed Excel data\r\n    for (let i = 0; i < excelData.length; i++) {\r\n      const row = excelData[i];\r\n\r\n      const name = row['Name']?.trim();\r\n      const firstJoin = row['First Join']?.trim();\r\n      const lastLeave = row['Last Leave']?.trim();\r\n      const email = row['Email']?.trim();\r\n      const percentage = row['Participation Rate']?.trim();\r\n      const duration = row['In-Meeting Duration']?.trim();\r\n      const role = row['Role']?.trim();\r\n      const attendanceValue = row['Attendance']?.trim();\r\n\r\n      if (!email || !duration || !role || attendanceValue === undefined) {\r\n        console.warn(`⚠ Missing required data in row ${i + 1}`);\r\n        continue;\r\n      }\r\n\r\n      // Validate user by email\r\n      const [userExists] = await bigquery.query({\r\n        query: `SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_USER}\\` WHERE email = @email`,\r\n        params: { email }\r\n      });\r\n\r\n      if (!userExists.length) {\r\n        console.warn(`⚠ User with email ${email} not found in row ${i + 1}`);\r\n        missingUsers.push(email);\r\n        continue;\r\n      }\r\n\r\n      const userId = userExists[0].id;\r\n      const attendanceId = uuidv4();\r\n      const createdAt = new Date().toISOString();\r\n\r\n      // ✅ Convert percentage from \"XX.XX%\" to FLOAT64\r\n      const percentageValue = percentage\r\n        ? parseFloat(percentage.replace('%', ''))\r\n        : null;\r\n\r\n      // ✅ Convert duration from \"XXm YYs\" to total seconds (INT64)\r\n      const durationValue = duration\r\n        ? duration.split(' ').reduce((acc: number, val: string) => {\r\n            if (val.includes('m')) return acc + parseInt(val) * 60;\r\n            if (val.includes('s')) return acc + parseInt(val);\r\n            return acc;\r\n          }, 0)\r\n        : null;\r\n\r\n      // ✅ Convert attendance from \"Present\"/\"Absent\" to BOOL\r\n      const attendanceValueBool = attendanceValue.toLowerCase() === 'present';\r\n\r\n      // ✅ Convert \"MM/DD/YY, HH:mm:ss AM/PM\" to \"YYYY-MM-DD HH:MM:SS\"\r\n      const convertToBigQueryTimestamp = (dateString: string | null) => {\r\n        if (!dateString) return null;\r\n        const dateObj = new Date(dateString);\r\n        return `${dateObj.getFullYear()}-${String(dateObj.getMonth() + 1).padStart(2, '0')}-${String(dateObj.getDate()).padStart(2, '0')} ${String(dateObj.getHours()).padStart(2, '0')}:${String(dateObj.getMinutes()).padStart(2, '0')}:${String(dateObj.getSeconds()).padStart(2, '0')}`;\r\n      };\r\n\r\n      const firstJoinFormatted = convertToBigQueryTimestamp(firstJoin);\r\n      const lastLeaveFormatted = convertToBigQueryTimestamp(lastLeave);\r\n\r\n      console.log('📌 Creating attendance with data:', {\r\n        attendanceId,\r\n        userId,\r\n        batchId,\r\n        courseId,\r\n        moduleId,\r\n        classId,\r\n        firstJoin: firstJoinFormatted,\r\n        lastLeave: lastLeaveFormatted,\r\n        email,\r\n        percentage: percentageValue,\r\n        duration: durationValue,\r\n        teamsRole: role,\r\n        attendance: attendanceValueBool,\r\n        attendanceFileId\r\n      });\r\n\r\n      // Insert Attendance Record\r\n      const attendancePromise = bigquery\r\n        .query({\r\n          query: attendanceQueries.insertAttendance,\r\n          params: {\r\n            id: attendanceId,\r\n            userId,\r\n            batchId,\r\n            courseId,\r\n            moduleId,\r\n            classId,\r\n            firstJoin: firstJoinFormatted,\r\n            lastLeave: lastLeaveFormatted,\r\n            email,\r\n            percentage: percentageValue,\r\n            duration: durationValue,\r\n            teamsRole: role,\r\n            attendance: attendanceValueBool,\r\n            attendanceFileId,\r\n            createdBy: user?.id,\r\n            createdAt: createdAt\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\r\n            `❌ Error creating attendance for row ${i + 1}:`,\r\n            error\r\n          );\r\n        });\r\n\r\n      attendancePromises.push(attendancePromise);\r\n    }\r\n\r\n    // Wait for all attendance creation promises to resolve\r\n    await Promise.all(attendancePromises);\r\n\r\n    // Return missing users if any\r\n    if (missingUsers.length > 0) {\r\n      return res.status(400).json({\r\n        message: 'Some users were not found in the system.',\r\n        missingUsers\r\n      });\r\n    };\r\n\r\n    const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"Attendance\",\r\n      entityId: batchId,\r\n      action: \"CREATE\",\r\n      previousData: null,\r\n      newData: JSON.stringify(attendancePromises),\r\n      performedBy: user?.id,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\", createdAt: \"TIMESTAMP\" },\r\n    });\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\", createdAt: \"TIMESTAMP\" },\r\n    });\r\n\r\n    res.status(201).json({ message: '✅ Attendances created successfully' });\r\n  } catch (error) {\r\n    console.error('❌ Error during attendance creation:', error);\r\n    res.status(500).json({ message: 'Internal Server Error', error });\r\n  }\r\n};\r\n\r\n// ✅ Update Attendance\r\nexport const updateAttendanceByClassIdHandler = async (\r\n  req: Request,\r\n  res: Response\r\n) => {\r\n  try {\r\n    const { classId } = req.query; // Get classId from query params\r\n    const updateData = req.body; // Expect bulk update data in the request body\r\n    const { user } = req;\r\n\r\n    if (!classId) {\r\n      return res.status(400).json({ message: 'classId is required!' });\r\n    }\r\n\r\n    // Ensure the classId exists before updating\r\n    const [classExists] = await bigquery.query({\r\n      query: `SELECT id FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_CLASSES}\\` WHERE id = @classId`,\r\n      params: { classId }\r\n    });\r\n\r\n    if (!classExists.length) {\r\n      return res.status(404).json({ message: 'Class not found!' });\r\n    }\r\n\r\n    console.log(`Updating attendance records for classId: ${classId}`);\r\n\r\n    // Perform the bulk update\r\n    await bigquery.query({\r\n      query: attendanceQueries.updateAttendance,\r\n      params: {\r\n        classId,\r\n        batchId: updateData.batchId || null,\r\n        courseId: updateData.courseId || null,\r\n        moduleId: updateData.moduleId || null,\r\n        firstJoin: updateData.firstJoin || null,\r\n        lastLeave: updateData.lastLeave || null,\r\n        duration: updateData.duration || null,\r\n        email: updateData.email || null,\r\n        teamsRole: updateData.teamsRole || null,\r\n        attendance: updateData.attendance || null,\r\n        attendanceFileId: updateData.attendanceFileId || null\r\n      }\r\n    });\r\n\r\n     // Insert Audit Log\r\n     const auditLogParams = {\r\n      id: uuidv4(),\r\n      entityType: \"Attendance\",\r\n      entityId: classId,\r\n      action: \"UPDATE\",\r\n      previousData: null,\r\n      newData: JSON.stringify({\r\n        classId: updateData.classId,\r\n        teamsAttendanceFile: updateData.teamsAttendanceFile,\r\n        attendanceDate: updateData.attendanceDate,\r\n      }),\r\n      performedBy: user?.id,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    await bigquery.query({\r\n      query: auditQueries.insertAuditLog,\r\n      params: auditLogParams,\r\n      types: { previousData: \"STRING\", newData: \"STRING\", createdAt: \"TIMESTAMP\" },\r\n    });\r\n\r\n\r\n    console.log(\r\n      `✅ Attendance records updated successfully for classId: ${classId}`\r\n    );\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      message: 'Attendance records updated successfully.'\r\n    });\r\n  } catch (error) {\r\n    console.error('❌ Error updating attendance:', error);\r\n    return res.status(500).json({ message: 'Internal Server Error', error });\r\n  }\r\n};\r\n\r\n// ✅ Delete Attendance\r\nexport const deleteAttendanceByClassIdHandler = async (req:any, classId: string) => {\r\n  try {\r\n\r\n    const { user } = req;\r\n    console.log(`Deleting attendance records for classId: ${classId}`);\r\n\r\n    // Execute the DELETE query\r\n    const [result] = await bigquery.query({\r\n      query: attendanceQueries.deleteAttendance,\r\n      params: { classId }\r\n    });\r\n\r\n    const deleteAttendance = result[0];\r\n    console.log(`Deleted records for classId: ${classId}`);\r\n\r\n      // Insert Audit Log\r\n      const auditLogParams = {\r\n        id: uuidv4(),\r\n        entityType: \"Attendance\",\r\n        entityId: classId,\r\n        action: \"DELETE\",\r\n        previousData: JSON.stringify(deleteAttendance),\r\n        newData:null,\r\n        performedBy: user?.id,\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n  \r\n      await bigquery.query({\r\n        query: auditQueries.insertAuditLog,\r\n        params: auditLogParams,\r\n        types: { previousData: \"STRING\", newData: \"STRING\", createdAt: \"TIMESTAMP\" },\r\n      });\r\n  \r\n\r\n    return {\r\n      success: true,\r\n      message: `Attendance records for classId: ${classId} deleted successfully.`\r\n    };\r\n  } catch (error) {\r\n    console.error('Error deleting attendance records:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Unknown error occurred.'\r\n    };\r\n  }\r\n};\r\n\r\nexport const getAllAttendanceHandler = async () => {\r\n  try {\r\n    console.log('Fetching all attendance...');\r\n    const [rows] = await bigquery.query({\r\n      query: attendanceQueries.getAllAttendance\r\n    });\r\n    console.log(` attendance found: ${rows.length}`);\r\n    return rows;\r\n  } catch (error) {\r\n    console.error('Error fetching attendance:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getAttendanceHandler = async (req: Request): Promise<any> => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { userId, batchId, courseId, classId } = req.query;\r\n\r\n    let query: string;\r\n    let params: Record<string, any> = {};\r\n\r\n    if (id) {\r\n      // Fetch attendance by specific ID\r\n      query = `\r\n        SELECT * \r\n        FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_ATTENDANCE}\\`\r\n        WHERE id = @id\r\n      `;\r\n      params = { id };\r\n    } else {\r\n      // Build dynamic query based on provided filters\r\n      const conditions: string[] = [];\r\n      if (userId) {\r\n        conditions.push('att.userId = @userId');\r\n        params.userId = userId;\r\n      }\r\n      if (batchId) {\r\n        conditions.push('att.batchId = @batchId');\r\n        params.batchId = batchId;\r\n      }\r\n      if (courseId) {\r\n        conditions.push('att.courseId = @courseId');\r\n        params.courseId = courseId;\r\n      }\r\n      if (classId) {\r\n        conditions.push('att.classId = @classId');\r\n        params.classId = classId;\r\n      }\r\n\r\n      // Ensure at least one condition is provided\r\n      if (conditions.length === 0) {\r\n        return {\r\n          error: true,\r\n          message:\r\n            'At least one filter parameter (userId, batchId, courseId, classId) is required'\r\n        };\r\n      }\r\n\r\n      // Construct the query dynamically\r\n      query = `\r\n       SELECT \r\n          att.id AS attendanceId, att.userId, att.batchId, att.courseId, att.moduleId, att.classId,\r\n          att.firstJoin, att.lastLeave, att.duration, att.email, att.teamsRole, att.attendance,\r\n          att.attendanceFileId, att.createdAt AS attendanceCreatedAt, att.updatedAt AS attendanceUpdatedAt,\r\n          \r\n          -- User Information\r\n          u.firstName, u.lastName,\r\n          \r\n          -- Batch, Module, Course, and Class Information\r\n          b.batchName, \r\n          m.moduleName, \r\n          c.courseName, \r\n          cls.classTitle,\r\n          \r\n          -- Assignment Completion Information\r\n          ac.courseAssignId, ac.obtainedPercentage, ac.obtainedMarks, \r\n          ac.createdAt AS assignmentCreatedAt, ac.classId AS assignmentClassId, \r\n          ac.id AS assignCompletionId, ac.traineeId AS assignmentTraineeId\r\n\r\n        FROM \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_ATTENDANCE}\\` att\r\n\r\n        -- Joins\r\n        LEFT JOIN \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_USER}\\` u \r\n          ON att.userId = u.id\r\n\r\n        LEFT JOIN \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_BATCH}\\` b \r\n          ON att.batchId = b.id\r\n\r\n        LEFT JOIN \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_MODULE}\\` m \r\n          ON att.moduleId = m.id\r\n\r\n        LEFT JOIN \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_COURSE}\\` c \r\n          ON att.courseId = c.id\r\n\r\n        LEFT JOIN \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_CLASS}\\` cls \r\n          ON att.classId = cls.id\r\n\r\n        LEFT JOIN \\`${process.env.PROJECT_ID}.${process.env.DATASET_ID}.${process.env.TABLE_ASSIGNMENTCOMPLETION}\\` ac \r\n          ON att.userId = ac.traineeId \r\n          AND att.classId = ac.classId\r\n\r\n        WHERE ${conditions.join(' AND ')}\r\n\r\n      `;\r\n    }\r\n\r\n    console.log('🚀 Executing query:', query);\r\n    console.log('🔍 Query parameters:', params);\r\n\r\n    const [attendanceRecords] = await bigquery.query({ query, params });\r\n\r\n    if (!attendanceRecords.length) {\r\n      return { error: true, message: 'No attendance records found' };\r\n    }\r\n\r\n    return { error: false, attendanceRecords };\r\n  } catch (error) {\r\n    console.error('❌ Error fetching attendance:', error);\r\n    return {\r\n      error: true,\r\n      message: 'Error fetching attendance records',\r\n      details: error\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}